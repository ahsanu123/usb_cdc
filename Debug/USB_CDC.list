
USB_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800c148  0800c148  0001c148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c594  0800c594  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c594  0800c594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c59c  0800c59c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c59c  0800c59c  0001c59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5a0  0800c5a0  0001c5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800c5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202cc  2**0
                  CONTENTS
 10 .bss          00001d44  200002d0  200002d0  000202d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002014  20002014  000202d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169b1  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b8  00000000  00000000  00036cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  0003ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026476  00000000  00000000  0003cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e3f  00000000  00000000  00063096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad03  00000000  00000000  0007bed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156bd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062a4  00000000  00000000  00156c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c12c 	.word	0x0800c12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800c12c 	.word	0x0800c12c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fc2f 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f859 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 f98f 	bl	80011e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec2:	f000 f96d 	bl	80011a0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ec6:	f007 fe41 	bl	8008b4c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000eca:	f000 f8bb 	bl	8001044 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ece:	f000 f919 	bl	8001104 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcint.raw, 2);
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4920      	ldr	r1, [pc, #128]	; (8000f58 <main+0xa8>)
 8000ed6:	4821      	ldr	r0, [pc, #132]	; (8000f5c <main+0xac>)
 8000ed8:	f000 fe08 	bl	8001aec <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000edc:	4820      	ldr	r0, [pc, #128]	; (8000f60 <main+0xb0>)
 8000ede:	f003 ff39 	bl	8004d54 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(convComplete==1){
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <main+0xb4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d12b      	bne.n	8000f42 <main+0x92>
//		  sprintf(buffer, "temp: %.2f\n", adcint.intTemp);
//		  CDC_Transmit_FS(buffer, strlen(buffer));
		  adcint.intTemp = TMPSENSOR_getTemperature(adcint.raw[0], adcint.raw[1]);
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <main+0xa8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <main+0xa8>)
 8000ef0:	6852      	ldr	r2, [r2, #4]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fb7f 	bl	80015f8 <TMPSENSOR_getTemperature>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb11 	bl	8000524 <__aeabi_i2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4914      	ldr	r1, [pc, #80]	; (8000f58 <main+0xa8>)
 8000f08:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  printf("temp: %d, %d, %f\n", adcint.raw[0], adcint.raw[1], adcint.intTemp);
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <main+0xa8>)
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <main+0xa8>)
 8000f12:	6858      	ldr	r0, [r3, #4]
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <main+0xa8>)
 8000f16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <main+0xb8>)
 8000f22:	f008 ffc9 	bl	8009eb8 <iprintf>
		  if(adcint.intTemp < 4095) printf("low brow...\n");
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <main+0xa8>)
 8000f28:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f2c:	a308      	add	r3, pc, #32	; (adr r3, 8000f50 <main+0xa0>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fdd3 	bl	8000adc <__aeabi_dcmplt>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <main+0x92>
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <main+0xbc>)
 8000f3e:	f009 f841 	bl	8009fc4 <puts>
//		  CDC_Transmit_FS(buffer, strlen(buffer));

//
//		  HAL_Delay(1000);
	  }
	  convComplete=0;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <main+0xb4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
	  if(convComplete==1){
 8000f48:	e7cb      	b.n	8000ee2 <main+0x32>
 8000f4a:	bf00      	nop
 8000f4c:	f3af 8000 	nop.w
 8000f50:	00000000 	.word	0x00000000
 8000f54:	40affe00 	.word	0x40affe00
 8000f58:	200003e0 	.word	0x200003e0
 8000f5c:	200002ec 	.word	0x200002ec
 8000f60:	20000394 	.word	0x20000394
 8000f64:	200003dc 	.word	0x200003dc
 8000f68:	0800c148 	.word	0x0800c148
 8000f6c:	0800c15c 	.word	0x0800c15c

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b094      	sub	sp, #80	; 0x50
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	2230      	movs	r2, #48	; 0x30
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f008 fb28 	bl	80095d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <SystemClock_Config+0xcc>)
 8000f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <SystemClock_Config+0xcc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <SystemClock_Config+0xd0>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fe4:	23a8      	movs	r3, #168	; 0xa8
 8000fe6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fec:	2307      	movs	r3, #7
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 f9ed 	bl	80043d4 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001000:	f000 f94a 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	2302      	movs	r3, #2
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001010:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2105      	movs	r1, #5
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fc4e 	bl	80048c4 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800102e:	f000 f933 	bl	8001298 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3750      	adds	r7, #80	; 0x50
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <MX_ADC1_Init+0xbc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_ADC1_Init+0xb8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_ADC1_Init+0xb8>)
 800106c:	2201      	movs	r2, #1
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001072:	2201      	movs	r2, #1
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001096:	2202      	movs	r2, #2
 8001098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_ADC1_Init+0xb8>)
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010aa:	f000 fbcb 	bl	8001844 <HAL_ADC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010b4:	f000 f8f0 	bl	8001298 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010b8:	2311      	movs	r3, #17
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010c0:	2307      	movs	r3, #7
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010ca:	f000 fe3d 	bl	8001d48 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010d4:	f000 f8e0 	bl	8001298 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010d8:	2310      	movs	r3, #16
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010e6:	f000 fe2f 	bl	8001d48 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80010f0:	f000 f8d2 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200002ec 	.word	0x200002ec
 8001100:	40012000 	.word	0x40012000

08001104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM3_Init+0x94>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_TIM3_Init+0x98>)
 8001124:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_TIM3_Init+0x94>)
 8001128:	f240 3247 	movw	r2, #839	; 0x347
 800112c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_TIM3_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM3_Init+0x94>)
 8001136:	f242 720f 	movw	r2, #9999	; 0x270f
 800113a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM3_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM3_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM3_Init+0x94>)
 800114a:	f003 fdb3 	bl	8004cb4 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f8a0 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM3_Init+0x94>)
 8001166:	f003 fe5d 	bl	8004e24 <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f892 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001174:	2320      	movs	r3, #32
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM3_Init+0x94>)
 8001182:	f004 f851 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f884 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000394 	.word	0x20000394
 800119c:	40000400 	.word	0x40000400

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_DMA_Init+0x3c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MX_DMA_Init+0x3c>)
 80011b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2038      	movs	r0, #56	; 0x38
 80011c8:	f001 f943 	bl	8002452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011cc:	2038      	movs	r0, #56	; 0x38
 80011ce:	f001 f95c 	bl	800248a <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_GPIO_Init+0x68>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <MX_GPIO_Init+0x68>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_GPIO_Init+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_GPIO_Init+0x68>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <MX_GPIO_Init+0x68>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_GPIO_Init+0x68>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_GPIO_Init+0x68>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <MX_GPIO_Init+0x68>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_GPIO_Init+0x68>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)ptr, len); return len;
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f007 fd34 	bl	8008cc8 <CDC_Transmit_FS>
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_ADC_ConvCpltCallback+0x24>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d102      	bne.n	8001284 <HAL_ADC_ConvCpltCallback+0x18>
//		  sprintf(buffer, "temp: %.2f\n", adcint.intTemp);
//		  CDC_Transmit_FS(buffer, strlen(buffer));
		convComplete=1;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_ADC_ConvCpltCallback+0x28>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
	}

}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40012000 	.word	0x40012000
 8001294:	200003dc 	.word	0x200003dc

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a26      	ldr	r2, [pc, #152]	; (800139c <HAL_ADC_MspInit+0xa8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d145      	bne.n	8001392 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_ADC_MspInit+0xac>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <HAL_ADC_MspInit+0xac>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_ADC_MspInit+0xac>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <HAL_ADC_MspInit+0xb4>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001348:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 800134c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001350:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001358:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001366:	480f      	ldr	r0, [pc, #60]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 8001368:	f001 f8aa 	bl	80024c0 <HAL_DMA_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8001372:	f7ff ff91 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_ADC_MspInit+0xb0>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2012      	movs	r0, #18
 8001388:	f001 f863 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800138c:	2012      	movs	r0, #18
 800138e:	f001 f87c 	bl	800248a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40012000 	.word	0x40012000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	20000334 	.word	0x20000334
 80013a8:	40026410 	.word	0x40026410

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10d      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40023800 	.word	0x40023800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f9be 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <ADC_IRQHandler+0x10>)
 800144a:	f000 fa3e 	bl	80018ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002ec 	.word	0x200002ec

08001458 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA2_Stream0_IRQHandler+0x10>)
 800145e:	f001 f935 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000334 	.word	0x20000334

0800146c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <OTG_FS_IRQHandler+0x10>)
 8001472:	f001 fe81 	bl	8003178 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200018d8 	.word	0x200018d8

08001480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return 1;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_kill>:

int _kill(int pid, int sig)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800149a:	f008 f871 	bl	8009580 <__errno>
 800149e:	4603      	mov	r3, r0
 80014a0:	2216      	movs	r2, #22
 80014a2:	601a      	str	r2, [r3, #0]
  return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_exit>:

void _exit (int status)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffe7 	bl	8001490 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014c2:	e7fe      	b.n	80014c2 <_exit+0x12>

080014c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4601      	mov	r1, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <_read+0x12>
  }

  return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	605a      	str	r2, [r3, #4]
  return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f007 fff2 	bl	8009580 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20020000 	.word	0x20020000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200003f0 	.word	0x200003f0
 80015d0:	20002018 	.word	0x20002018

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <TMPSENSOR_getTemperature>:
  * @brief Calculate temperature (tested on STM32F401, other MCU may have different constants!)
  * @note If IntRef not use, set it [ex.: #define TMPSENSOR_USE_INTREF 0]
  * @param Temperature sensor's ADC 16-bit value, Internal Reference ADC 16-bit value (if use)
  * @retval Internal sensor temperature
  */
double TMPSENSOR_getTemperature(uint16_t adc_sensor, uint16_t adc_intref){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	4613      	mov	r3, r2
 8001606:	80bb      	strh	r3, [r7, #4]
#if(TMPSENSOR_USE_INTREF)

	double intref_vol = (TMPSENSOR_ADCMAX*TMPSENSOR_ADCVREFINT)/adc_intref;

#else
	double intref_vol = TMPSENSOR_ADCREFVOL;
 8001608:	a328      	add	r3, pc, #160	; (adr r3, 80016ac <TMPSENSOR_getTemperature+0xb4>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif

	double sensor_vol = adc_sensor * intref_vol/TMPSENSOR_ADCMAX;
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff85 	bl	8000524 <__aeabi_i2d>
 800161a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800161e:	f7fe ffeb 	bl	80005f8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a322      	add	r3, pc, #136	; (adr r3, 80016b4 <TMPSENSOR_getTemperature+0xbc>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff f90c 	bl	800084c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double sensor_tmp = (sensor_vol - TMPSENSOR_V25) *1000.0/TMPSENSOR_AVGSLOPE + 25.0;
 800163c:	a31f      	add	r3, pc, #124	; (adr r3, 80016bc <TMPSENSOR_getTemperature+0xc4>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <TMPSENSOR_getTemperature+0xa8>)
 8001658:	f7fe ffce 	bl	80005f8 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <TMPSENSOR_getTemperature+0xac>)
 800166a:	f7ff f8ef 	bl	800084c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <TMPSENSOR_getTemperature+0xb0>)
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return sensor_tmp;
 8001688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	408f4000 	.word	0x408f4000
 80016a4:	40040000 	.word	0x40040000
 80016a8:	40390000 	.word	0x40390000
 80016ac:	66666666 	.word	0x66666666
 80016b0:	400a6666 	.word	0x400a6666
 80016b4:	00000000 	.word	0x00000000
 80016b8:	40affe00 	.word	0x40affe00
 80016bc:	851eb852 	.word	0x851eb852
 80016c0:	3fe851eb 	.word	0x3fe851eb

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ee:	f7ff ff71 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f007 ff4b 	bl	800958c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fbdb 	bl	8000eb0 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001708:	0800c5a4 	.word	0x0800c5a4
  ldr r2, =_sbss
 800170c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001710:	20002014 	.word	0x20002014

08001714 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <CAN1_RX0_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 fe7b 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fdaa 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fe93 	bl	80024a6 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 fe5b 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	200003f4 	.word	0x200003f4

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200003f4 	.word	0x200003f4

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e033      	b.n	80018c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fd46 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800188a:	f023 0302 	bic.w	r3, r3, #2
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fb78 	bl	8001f8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
 80018b2:	e001      	b.n	80018b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d049      	beq.n	8001994 <HAL_ADC_IRQHandler+0xca>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d046      	beq.n	8001994 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d12b      	bne.n	8001984 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	d127      	bne.n	8001984 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800194c:	2b00      	cmp	r3, #0
 800194e:	d119      	bne.n	8001984 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0220 	bic.w	r2, r2, #32
 800195e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fc71 	bl	800126c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f06f 0212 	mvn.w	r2, #18
 8001992:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d057      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x190>
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d054      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d139      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12b      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d124      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11d      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d119      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fc1c 	bl	8002288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 020c 	mvn.w	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d017      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x1d6>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d014      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10d      	bne.n	8001aa0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f945 	bl	8001d20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f06f 0201 	mvn.w	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x218>
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f043 0202 	orr.w	r2, r3, #2
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0220 	mvn.w	r2, #32
 8001ad0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f92e 	bl	8001d34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0220 	mvn.w	r2, #32
 8001ae0:	601a      	str	r2, [r3, #0]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Start_DMA+0x1e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e0e9      	b.n	8001cde <HAL_ADC_Start_DMA+0x1f2>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d018      	beq.n	8001b52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b30:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_ADC_Start_DMA+0x1fc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6d      	ldr	r2, [pc, #436]	; (8001cec <HAL_ADC_Start_DMA+0x200>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9a      	lsrs	r2, r3, #18
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b60:	d107      	bne.n	8001b72 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b70:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	f040 80a1 	bne.w	8001cc4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc0:	d106      	bne.n	8001bd0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f023 0206 	bic.w	r2, r3, #6
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_ADC_Start_DMA+0x204>)
 8001be0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_ADC_Start_DMA+0x208>)
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_ADC_Start_DMA+0x20c>)
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	4a41      	ldr	r2, [pc, #260]	; (8001cfc <HAL_ADC_Start_DMA+0x210>)
 8001bf8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	334c      	adds	r3, #76	; 0x4c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f000 fcf2 	bl	800261c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d12a      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <HAL_ADC_Start_DMA+0x214>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d015      	beq.n	8001c7a <HAL_ADC_Start_DMA+0x18e>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2c      	ldr	r2, [pc, #176]	; (8001d04 <HAL_ADC_Start_DMA+0x218>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d105      	bne.n	8001c64 <HAL_ADC_Start_DMA+0x178>
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_ADC_Start_DMA+0x204>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_ADC_Start_DMA+0x21c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d136      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_ADC_Start_DMA+0x204>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d130      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d129      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e020      	b.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_ADC_Start_DMA+0x214>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d11b      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d114      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	e00b      	b.n	8001cdc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f043 0210 	orr.w	r2, r3, #16
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	431bde83 	.word	0x431bde83
 8001cf0:	40012300 	.word	0x40012300
 8001cf4:	08002185 	.word	0x08002185
 8001cf8:	0800223f 	.word	0x0800223f
 8001cfc:	0800225b 	.word	0x0800225b
 8001d00:	40012000 	.word	0x40012000
 8001d04:	40012100 	.word	0x40012100
 8001d08:	40012200 	.word	0x40012200

08001d0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1c>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e105      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x228>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d925      	bls.n	8001dc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68d9      	ldr	r1, [r3, #12]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4403      	add	r3, r0
 8001db2:	3b1e      	subs	r3, #30
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e022      	b.n	8001e06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4403      	add	r3, r0
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d824      	bhi.n	8001e58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b05      	subs	r3, #5
 8001e20:	221f      	movs	r2, #31
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b05      	subs	r3, #5
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
 8001e56:	e04c      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d824      	bhi.n	8001eaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b23      	subs	r3, #35	; 0x23
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b23      	subs	r3, #35	; 0x23
 8001e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea8:	e023      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	; 0x41
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b41      	subs	r3, #65	; 0x41
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_ADC_ConfigChannel+0x234>)
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_ADC_ConfigChannel+0x238>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_ADC_ConfigChannel+0x238>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d123      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d003      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x1e6>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b11      	cmp	r3, #17
 8001f2c:	d11b      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d111      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_ADC_ConfigChannel+0x23c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_ADC_ConfigChannel+0x240>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9a      	lsrs	r2, r3, #18
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	40012000 	.word	0x40012000
 8001f84:	20000000 	.word	0x20000000
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <ADC_Init+0x1f0>)
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	021a      	lsls	r2, r3, #8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	4a58      	ldr	r2, [pc, #352]	; (8002180 <ADC_Init+0x1f4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	e00f      	b.n	800208a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002088:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0202 	bic.w	r2, r2, #2
 8002098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
 80020a4:	005a      	lsls	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	3b01      	subs	r3, #1
 80020e4:	035a      	lsls	r2, r3, #13
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	e007      	b.n	8002100 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	3b01      	subs	r3, #1
 800211c:	051a      	lsls	r2, r3, #20
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002142:	025a      	lsls	r2, r3, #9
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	029a      	lsls	r2, r3, #10
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40012300 	.word	0x40012300
 8002180:	0f000001 	.word	0x0f000001

08002184 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d13c      	bne.n	8002218 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d12b      	bne.n	8002210 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d127      	bne.n	8002210 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d119      	bne.n	8002210 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0220 	bic.w	r2, r2, #32
 80021ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f7ff f82b 	bl	800126c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002216:	e00e      	b.n	8002236 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7ff fd85 	bl	8001d34 <HAL_ADC_ErrorCallback>
}
 800222a:	e004      	b.n	8002236 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff fd5d 	bl	8001d0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff fd5a 	bl	8001d34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	; (8002338 <__NVIC_EnableIRQ+0x38>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f7ff ff8e 	bl	800233c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff29 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002464:	f7ff ff3e 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff ff8e 	bl	8002390 <NVIC_EncodePriority>
 8002474:	4602      	mov	r2, r0
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5d 	bl	800233c <__NVIC_SetPriority>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff31 	bl	8002300 <__NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ffa2 	bl	80023f8 <SysTick_Config>
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff f98a 	bl	80017e4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e099      	b.n	8002610 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fc:	e00f      	b.n	800251e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024fe:	f7ff f971 	bl	80017e4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b05      	cmp	r3, #5
 800250a:	d908      	bls.n	800251e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e078      	b.n	8002610 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e8      	bne.n	80024fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_DMA_Init+0x158>)
 8002538:	4013      	ands	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800254a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2b04      	cmp	r3, #4
 8002576:	d107      	bne.n	8002588 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4313      	orrs	r3, r2
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f023 0307 	bic.w	r3, r3, #7
 800259e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d117      	bne.n	80025e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fa6f 	bl	8002aa8 <DMA_CheckFifoParam>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025de:	2301      	movs	r3, #1
 80025e0:	e016      	b.n	8002610 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa26 	bl	8002a3c <DMA_CalcBaseAndBitshift>
 80025f0:	4603      	mov	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	223f      	movs	r2, #63	; 0x3f
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	f010803f 	.word	0xf010803f

0800261c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Start_IT+0x26>
 800263e:	2302      	movs	r3, #2
 8002640:	e040      	b.n	80026c4 <HAL_DMA_Start_IT+0xa8>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d12f      	bne.n	80026b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2202      	movs	r2, #2
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f9b8 	bl	80029e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	223f      	movs	r2, #63	; 0x3f
 8002676:	409a      	lsls	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0216 	orr.w	r2, r2, #22
 800268a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e005      	b.n	80026c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d8:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_DMA_IRQHandler+0x248>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <HAL_DMA_IRQHandler+0x24c>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2208      	movs	r2, #8
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	2208      	movs	r2, #8
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0202 	orr.w	r2, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2204      	movs	r2, #4
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2204      	movs	r2, #4
 8002792:	409a      	lsls	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f043 0204 	orr.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	2210      	movs	r2, #16
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d043      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03c      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2210      	movs	r2, #16
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d018      	beq.n	800280e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d024      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
 80027fa:	e01f      	b.n	800283c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
 800280c:	e016      	b.n	800283c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0208 	bic.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2220      	movs	r2, #32
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 808f 	beq.w	800296c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8087 	beq.w	800296c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2220      	movs	r2, #32
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b05      	cmp	r3, #5
 8002874:	d136      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0216 	bic.w	r2, r2, #22
 8002884:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002894:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x1da>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	223f      	movs	r2, #63	; 0x3f
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d07e      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
        }
        return;
 80028e2:	e079      	b.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	2b00      	cmp	r3, #0
 8002906:	d031      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e02c      	b.n	800296c <HAL_DMA_IRQHandler+0x2a0>
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000
 8002918:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d023      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e01e      	b.n	800296c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0210 	bic.w	r2, r2, #16
 800294a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d032      	beq.n	80029da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2205      	movs	r2, #5
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d307      	bcc.n	80029b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f2      	bne.n	8002998 <HAL_DMA_IRQHandler+0x2cc>
 80029b2:	e000      	b.n	80029b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e000      	b.n	80029da <HAL_DMA_IRQHandler+0x30e>
        return;
 80029d8:	bf00      	nop
    }
  }
}
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d108      	bne.n	8002a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a1e:	e007      	b.n	8002a30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3b10      	subs	r3, #16
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d909      	bls.n	8002a7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a7c:	e007      	b.n	8002a8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	aaaaaaab 	.word	0xaaaaaaab
 8002aa4:	0800c1b0 	.word	0x0800c1b0

08002aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d856      	bhi.n	8002b76 <DMA_CheckFifoParam+0xce>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <DMA_CheckFifoParam+0x28>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002af3 	.word	0x08002af3
 8002ad8:	08002ae1 	.word	0x08002ae1
 8002adc:	08002b77 	.word	0x08002b77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d046      	beq.n	8002b7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e043      	b.n	8002b7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002afa:	d140      	bne.n	8002b7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e03d      	b.n	8002b7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0a:	d121      	bne.n	8002b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d837      	bhi.n	8002b82 <DMA_CheckFifoParam+0xda>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <DMA_CheckFifoParam+0x70>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b2f 	.word	0x08002b2f
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002b41 	.word	0x08002b41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e030      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d025      	beq.n	8002b86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3e:	e022      	b.n	8002b86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b48:	d11f      	bne.n	8002b8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b4e:	e01c      	b.n	8002b8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d903      	bls.n	8002b5e <DMA_CheckFifoParam+0xb6>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d003      	beq.n	8002b64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b5c:	e018      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      break;
 8002b62:	e015      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e00b      	b.n	8002b8e <DMA_CheckFifoParam+0xe6>
      break;
 8002b76:	bf00      	nop
 8002b78:	e00a      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e008      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e006      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e004      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e002      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b8a:	bf00      	nop
 8002b8c:	e000      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e16b      	b.n	8002e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 815a 	bne.w	8002e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80b4 	beq.w	8002e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b60      	ldr	r3, [pc, #384]	; (8002eac <HAL_GPIO_Init+0x30c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a5f      	ldr	r2, [pc, #380]	; (8002eac <HAL_GPIO_Init+0x30c>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_GPIO_Init+0x30c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a5b      	ldr	r2, [pc, #364]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x314>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x226>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <HAL_GPIO_Init+0x318>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x222>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a50      	ldr	r2, [pc, #320]	; (8002ebc <HAL_GPIO_Init+0x31c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x21e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4f      	ldr	r2, [pc, #316]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x21a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4e      	ldr	r2, [pc, #312]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x216>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4d      	ldr	r2, [pc, #308]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x212>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4c      	ldr	r2, [pc, #304]	; (8002ecc <HAL_GPIO_Init+0x32c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x20e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4b      	ldr	r2, [pc, #300]	; (8002ed0 <HAL_GPIO_Init+0x330>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x20a>
 8002da6:	2307      	movs	r3, #7
 8002da8:	e00e      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002daa:	2308      	movs	r3, #8
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dae:	2306      	movs	r3, #6
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f ae90 	bls.w	8002bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40021c00 	.word	0x40021c00
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eda:	b08f      	sub	sp, #60	; 0x3c
 8002edc:	af0a      	add	r7, sp, #40	; 0x28
 8002ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e10f      	b.n	800310a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f006 f827 	bl	8008f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fb0e 	bl	800554a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	687e      	ldr	r6, [r7, #4]
 8002f36:	466d      	mov	r5, sp
 8002f38:	f106 0410 	add.w	r4, r6, #16
 8002f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f4c:	1d33      	adds	r3, r6, #4
 8002f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	f002 f9e5 	bl	8005320 <USB_CoreInit>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d0      	b.n	800310a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fafc 	bl	800556c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	e04a      	b.n	8003010 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	333d      	adds	r3, #61	; 0x3d
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	333c      	adds	r3, #60	; 0x3c
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	b298      	uxth	r0, r3
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3344      	adds	r3, #68	; 0x44
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3340      	adds	r3, #64	; 0x40
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3348      	adds	r3, #72	; 0x48
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334c      	adds	r3, #76	; 0x4c
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3354      	adds	r3, #84	; 0x54
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	3301      	adds	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d3af      	bcc.n	8002f7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e044      	b.n	80030aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	3301      	adds	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3b5      	bcc.n	8003020 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	687e      	ldr	r6, [r7, #4]
 80030bc:	466d      	mov	r5, sp
 80030be:	f106 0410 	add.w	r4, r6, #16
 80030c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d2:	1d33      	adds	r3, r6, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	f002 fa94 	bl	8005604 <USB_DevInit>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00d      	b.n	800310a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fbe3 	bl	80068ce <USB_DevDisconnect>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003112 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_Start+0x1c>
 800312a:	2302      	movs	r3, #2
 800312c:	e020      	b.n	8003170 <HAL_PCD_Start+0x5e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d109      	bne.n	8003152 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003142:	2b01      	cmp	r3, #1
 8003144:	d005      	beq.n	8003152 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f002 f9e6 	bl	8005528 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fb93 	bl	800688c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b08d      	sub	sp, #52	; 0x34
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fc51 	bl	8006a36 <USB_GetMode>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 848a 	bne.w	8003ab0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fbb5 	bl	8006910 <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8480 	beq.w	8003aae <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fba2 	bl	8006910 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d107      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f002 0202 	and.w	r2, r2, #2
 80031e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fb90 	bl	8006910 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d161      	bne.n	80032be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0210 	bic.w	r2, r2, #16
 8003208:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f003 020f 	and.w	r2, r3, #15
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	0c5b      	lsrs	r3, r3, #17
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	2b02      	cmp	r3, #2
 8003234:	d124      	bne.n	8003280 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d035      	beq.n	80032ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800324c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	6a38      	ldr	r0, [r7, #32]
 8003256:	f003 f9c7 	bl	80065e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003266:	441a      	add	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003278:	441a      	add	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
 800327e:	e016      	b.n	80032ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	0c5b      	lsrs	r3, r3, #17
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	2b06      	cmp	r3, #6
 800328a:	d110      	bne.n	80032ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003292:	2208      	movs	r2, #8
 8003294:	4619      	mov	r1, r3
 8003296:	6a38      	ldr	r0, [r7, #32]
 8003298:	f003 f9a6 	bl	80065e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a8:	441a      	add	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0210 	orr.w	r2, r2, #16
 80032bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 fb24 	bl	8006910 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032d2:	f040 80a7 	bne.w	8003424 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fb29 	bl	8006936 <USB_ReadDevAllOutEpInterrupt>
 80032e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032e6:	e099      	b.n	800341c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 808e 	beq.w	8003410 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 fb4d 	bl	800699e <USB_ReadDevOutEPInterrupt>
 8003304:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	2301      	movs	r3, #1
 8003320:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fec3 	bl	80040b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	2308      	movs	r3, #8
 8003344:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 ff99 	bl	8004280 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	461a      	mov	r2, r3
 8003366:	2310      	movs	r3, #16
 8003368:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d030      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d109      	bne.n	8003394 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003392:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	78db      	ldrb	r3, [r3, #3]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f005 fed0 	bl	8009164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	461a      	mov	r2, r3
 80033d2:	2302      	movs	r3, #2
 80033d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2320      	movs	r3, #32
 80033f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800340e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3301      	adds	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	2b00      	cmp	r3, #0
 8003420:	f47f af62 	bne.w	80032e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fa71 	bl	8006910 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003438:	f040 80db 	bne.w	80035f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fa92 	bl	800696a <USB_ReadDevAllInEpInterrupt>
 8003446:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800344c:	e0cd      	b.n	80035ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80c2 	beq.w	80035de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fab8 	bl	80069da <USB_ReadDevInEPInterrupt>
 800346a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d057      	beq.n	8003526 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	2201      	movs	r2, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	69f9      	ldr	r1, [r7, #28]
 8003492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003496:	4013      	ands	r3, r2
 8003498:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a6:	461a      	mov	r2, r3
 80034a8:	2301      	movs	r3, #1
 80034aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d132      	bne.n	800351a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334c      	adds	r3, #76	; 0x4c
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4403      	add	r3, r0
 80034d4:	3348      	adds	r3, #72	; 0x48
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4419      	add	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4403      	add	r3, r0
 80034e8:	334c      	adds	r3, #76	; 0x4c
 80034ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <HAL_PCD_IRQHandler+0x3a2>
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3354      	adds	r3, #84	; 0x54
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003512:	461a      	mov	r2, r3
 8003514:	2101      	movs	r1, #1
 8003516:	f003 fabf 	bl	8006a98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f005 fd9a 	bl	800905a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	461a      	mov	r2, r3
 800353e:	2308      	movs	r3, #8
 8003540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003558:	461a      	mov	r2, r3
 800355a:	2310      	movs	r3, #16
 800355c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003586:	6a38      	ldr	r0, [r7, #32]
 8003588:	f002 f9a0 	bl	80058cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3338      	adds	r3, #56	; 0x38
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4413      	add	r3, r2
 800359c:	3304      	adds	r3, #4
 800359e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	78db      	ldrb	r3, [r3, #3]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d108      	bne.n	80035ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2200      	movs	r2, #0
 80035ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f005 fde7 	bl	8009188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	461a      	mov	r2, r3
 80035c8:	2302      	movs	r3, #2
 80035ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fcdb 	bl	8003f94 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f af2e 	bne.w	800344e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 f98a 	bl	8006910 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003606:	d122      	bne.n	800364e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003622:	2b01      	cmp	r3, #1
 8003624:	d108      	bne.n	8003638 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800362e:	2100      	movs	r1, #0
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fec3 	bl	80043bc <HAL_PCDEx_LPM_Callback>
 8003636:	e002      	b.n	800363e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f005 fd85 	bl	8009148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800364c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 f95c 	bl	8006910 <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003662:	d112      	bne.n	800368a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d102      	bne.n	800367a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f005 fd41 	bl	80090fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003688:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 f93e 	bl	8006910 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	f040 80b7 	bne.w	8003810 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2110      	movs	r1, #16
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 f905 	bl	80058cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c6:	e046      	b.n	8003756 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d4:	461a      	mov	r2, r3
 80036d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	461a      	mov	r2, r3
 800370a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800370e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003720:	0151      	lsls	r1, r2, #5
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	440a      	add	r2, r1
 8003726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800372a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800372e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003740:	0151      	lsls	r1, r2, #5
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	440a      	add	r2, r1
 8003746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800374a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800374e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	3301      	adds	r3, #1
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d3b3      	bcc.n	80036c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003772:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d016      	beq.n	80037aa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800378c:	f043 030b 	orr.w	r3, r3, #11
 8003790:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a2:	f043 030b 	orr.w	r3, r3, #11
 80037a6:	6453      	str	r3, [r2, #68]	; 0x44
 80037a8:	e015      	b.n	80037d6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037bc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d0:	f043 030b 	orr.w	r3, r3, #11
 80037d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037fa:	461a      	mov	r2, r3
 80037fc:	f003 f94c 	bl	8006a98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800380e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f003 f87b 	bl	8006910 <USB_ReadInterrupts>
 800381a:	4603      	mov	r3, r0
 800381c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d124      	bne.n	8003870 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f003 f911 	bl	8006a52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 f8c6 	bl	80059c6 <USB_GetDevSpeed>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681c      	ldr	r4, [r3, #0]
 8003846:	f001 fa29 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 800384a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	4620      	mov	r0, r4
 8003856:	f001 fdc5 	bl	80053e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f005 fc25 	bl	80090aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800386e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f003 f84b 	bl	8006910 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d10a      	bne.n	800389a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f005 fc02 	bl	800908e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f002 0208 	and.w	r2, r2, #8
 8003898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 f836 	bl	8006910 <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d122      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	e014      	b.n	80038ea <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb27 	bl	8003f32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	3301      	adds	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3e5      	bcc.n	80038c0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 f809 	bl	8006910 <USB_ReadInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003908:	d13b      	bne.n	8003982 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	e02b      	b.n	8003968 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3340      	adds	r3, #64	; 0x40
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d115      	bne.n	8003962 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003936:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	da12      	bge.n	8003962 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	333f      	adds	r3, #63	; 0x3f
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fae8 	bl	8003f32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	3301      	adds	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	429a      	cmp	r2, r3
 8003970:	d3ce      	bcc.n	8003910 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f002 ffc2 	bl	8006910 <USB_ReadInterrupts>
 800398c:	4603      	mov	r3, r0
 800398e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003996:	d155      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
 800399c:	e045      	b.n	8003a2a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d12e      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	da2b      	bge.n	8003a24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039dc:	429a      	cmp	r2, r3
 80039de:	d121      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a20:	6053      	str	r3, [r2, #4]
            break;
 8003a22:	e007      	b.n	8003a34 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	3301      	adds	r3, #1
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3b4      	bcc.n	800399e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 ff61 	bl	8006910 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d10a      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f005 fba6 	bl	80091ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 ff4b 	bl	8006910 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d115      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f005 fb96 	bl	80091c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	e000      	b.n	8003ab0 <HAL_PCD_IRQHandler+0x938>
      return;
 8003aae:	bf00      	nop
    }
  }
}
 8003ab0:	3734      	adds	r7, #52	; 0x34
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}

08003ab6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_PCD_SetAddress+0x1a>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e013      	b.n	8003af8 <HAL_PCD_SetAddress+0x42>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f002 fea9 	bl	8006840 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	70fb      	strb	r3, [r7, #3]
 8003b12:	460b      	mov	r3, r1
 8003b14:	803b      	strh	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da0f      	bge.n	8003b46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	3338      	adds	r3, #56	; 0x38
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	705a      	strb	r2, [r3, #1]
 8003b44:	e00f      	b.n	8003b66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b72:	883a      	ldrh	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	78ba      	ldrb	r2, [r7, #2]
 8003b7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b90:	78bb      	ldrb	r3, [r7, #2]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d102      	bne.n	8003b9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_PCD_EP_Open+0xaa>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e00e      	b.n	8003bc8 <HAL_PCD_EP_Open+0xc8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 ff29 	bl	8005a10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	da0f      	bge.n	8003c04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	3338      	adds	r3, #56	; 0x38
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	705a      	strb	r2, [r3, #1]
 8003c02:	e00f      	b.n	8003c24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_EP_Close+0x6e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e00e      	b.n	8003c5c <HAL_PCD_EP_Close+0x8c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 ff67 	bl	8005b20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	460b      	mov	r3, r1
 8003c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6979      	ldr	r1, [r7, #20]
 8003cd8:	f002 fa46 	bl	8006168 <USB_EP0StartXfer>
 8003cdc:	e008      	b.n	8003cf0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	f001 fff4 	bl	8005cd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003d1c:	681b      	ldr	r3, [r3, #0]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	460b      	mov	r3, r1
 8003d38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3338      	adds	r3, #56	; 0x38
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2201      	movs	r2, #1
 8003d68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d84:	7afb      	ldrb	r3, [r7, #11]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6979      	ldr	r1, [r7, #20]
 8003d9c:	f002 f9e4 	bl	8006168 <USB_EP0StartXfer>
 8003da0:	e008      	b.n	8003db4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	f001 ff92 	bl	8005cd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 020f 	and.w	r2, r3, #15
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d901      	bls.n	8003ddc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e050      	b.n	8003e7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da0f      	bge.n	8003e04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3338      	adds	r3, #56	; 0x38
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	705a      	strb	r2, [r3, #1]
 8003e02:	e00d      	b.n	8003e20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_PCD_EP_SetStall+0x82>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e01e      	b.n	8003e7e <HAL_PCD_EP_SetStall+0xc0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68f9      	ldr	r1, [r7, #12]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 fc22 	bl	8006698 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	b2d9      	uxtb	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f002 fe12 	bl	8006a98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d901      	bls.n	8003ea4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e042      	b.n	8003f2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da0f      	bge.n	8003ecc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	f003 020f 	and.w	r2, r3, #15
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	3338      	adds	r3, #56	; 0x38
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	705a      	strb	r2, [r3, #1]
 8003eca:	e00f      	b.n	8003eec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_PCD_EP_ClrStall+0x86>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e00e      	b.n	8003f2a <HAL_PCD_EP_ClrStall+0xa4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68f9      	ldr	r1, [r7, #12]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f002 fc2a 	bl	8006774 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da0c      	bge.n	8003f60 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e00c      	b.n	8003f7a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	3304      	adds	r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 fa49 	bl	8006418 <USB_EPStopXfer>
 8003f86:	4603      	mov	r3, r0
 8003f88:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3338      	adds	r3, #56	; 0x38
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d901      	bls.n	8003fcc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e06c      	b.n	80040a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d902      	bls.n	8003fe8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3303      	adds	r3, #3
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ff0:	e02b      	b.n	800404a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	429a      	cmp	r2, r3
 8004006:	d902      	bls.n	800400e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3303      	adds	r3, #3
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6919      	ldr	r1, [r3, #16]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004026:	b2db      	uxtb	r3, r3
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	4603      	mov	r3, r0
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f002 fa9d 	bl	800656c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	441a      	add	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	b29b      	uxth	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d809      	bhi.n	8004074 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004068:	429a      	cmp	r2, r3
 800406a:	d203      	bcs.n	8004074 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1be      	bne.n	8003ff2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d811      	bhi.n	80040a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	2201      	movs	r2, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	43db      	mvns	r3, r3
 800409a:	6939      	ldr	r1, [r7, #16]
 800409c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a0:	4013      	ands	r3, r2
 80040a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	333c      	adds	r3, #60	; 0x3c
 80040c8:	3304      	adds	r3, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d17b      	bne.n	80041de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	4a61      	ldr	r2, [pc, #388]	; (8004278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	f240 80b9 	bls.w	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80b3 	beq.w	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	461a      	mov	r2, r3
 8004114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004118:	6093      	str	r3, [r2, #8]
 800411a:	e0a7      	b.n	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	461a      	mov	r2, r3
 8004134:	2320      	movs	r3, #32
 8004136:	6093      	str	r3, [r2, #8]
 8004138:	e098      	b.n	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 8093 	bne.w	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d90f      	bls.n	800416e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	461a      	mov	r2, r3
 8004166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	e07e      	b.n	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	3304      	adds	r3, #4
 8004182:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	0159      	lsls	r1, r3, #5
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	440b      	add	r3, r1
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d114      	bne.n	80041d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041b8:	461a      	mov	r2, r3
 80041ba:	2101      	movs	r1, #1
 80041bc:	f002 fc6c 	bl	8006a98 <USB_EP0_OutStart>
 80041c0:	e006      	b.n	80041d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f004 ff24 	bl	8009024 <HAL_PCD_DataOutStageCallback>
 80041dc:	e046      	b.n	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d124      	bne.n	8004230 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	e032      	b.n	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421c:	461a      	mov	r2, r3
 800421e:	2320      	movs	r3, #32
 8004220:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f004 fefb 	bl	8009024 <HAL_PCD_DataOutStageCallback>
 800422e:	e01d      	b.n	800426c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d114      	bne.n	8004260 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d108      	bne.n	8004260 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004258:	461a      	mov	r2, r3
 800425a:	2100      	movs	r1, #0
 800425c:	f002 fc1c 	bl	8006a98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f004 fedc 	bl	8009024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	4f54300a 	.word	0x4f54300a
 800427c:	4f54310a 	.word	0x4f54310a

08004280 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	333c      	adds	r3, #60	; 0x3c
 8004298:	3304      	adds	r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <PCD_EP_OutSetupPacket_int+0x88>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d90e      	bls.n	80042d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f004 fe93 	bl	8009000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <PCD_EP_OutSetupPacket_int+0x88>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d90c      	bls.n	80042fc <PCD_EP_OutSetupPacket_int+0x7c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042f4:	461a      	mov	r2, r3
 80042f6:	2101      	movs	r1, #1
 80042f8:	f002 fbce 	bl	8006a98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	4f54300a 	.word	0x4f54300a

0800430c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
 8004318:	4613      	mov	r3, r2
 800431a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800432a:	883b      	ldrh	r3, [r7, #0]
 800432c:	0419      	lsls	r1, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	430a      	orrs	r2, r1
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
 8004338:	e028      	b.n	800438c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4413      	add	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e00d      	b.n	800436a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	3340      	adds	r3, #64	; 0x40
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	3301      	adds	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	3b01      	subs	r3, #1
 8004370:	429a      	cmp	r2, r3
 8004372:	d3ec      	bcc.n	800434e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004374:	883b      	ldrh	r3, [r7, #0]
 8004376:	0418      	lsls	r0, r3, #16
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	3b01      	subs	r3, #1
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4302      	orrs	r2, r0
 8004384:	3340      	adds	r3, #64	; 0x40
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e267      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d075      	beq.n	80044de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043f2:	4b88      	ldr	r3, [pc, #544]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d00c      	beq.n	8004418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fe:	4b85      	ldr	r3, [pc, #532]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004406:	2b08      	cmp	r3, #8
 8004408:	d112      	bne.n	8004430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440a:	4b82      	ldr	r3, [pc, #520]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004416:	d10b      	bne.n	8004430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	4b7e      	ldr	r3, [pc, #504]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05b      	beq.n	80044dc <HAL_RCC_OscConfig+0x108>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d157      	bne.n	80044dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e242      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d106      	bne.n	8004448 <HAL_RCC_OscConfig+0x74>
 800443a:	4b76      	ldr	r3, [pc, #472]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a75      	ldr	r2, [pc, #468]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e01d      	b.n	8004484 <HAL_RCC_OscConfig+0xb0>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x98>
 8004452:	4b70      	ldr	r3, [pc, #448]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a6f      	ldr	r2, [pc, #444]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6c      	ldr	r2, [pc, #432]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e00b      	b.n	8004484 <HAL_RCC_OscConfig+0xb0>
 800446c:	4b69      	ldr	r3, [pc, #420]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a68      	ldr	r2, [pc, #416]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4b66      	ldr	r3, [pc, #408]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a65      	ldr	r2, [pc, #404]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 800447e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d013      	beq.n	80044b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fd f9aa 	bl	80017e4 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004494:	f7fd f9a6 	bl	80017e4 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	; 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e207      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b5b      	ldr	r3, [pc, #364]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0xc0>
 80044b2:	e014      	b.n	80044de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fd f996 	bl	80017e4 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fd f992 	bl	80017e4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1f3      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	4b51      	ldr	r3, [pc, #324]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0xe8>
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d063      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ea:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044f6:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d11c      	bne.n	800453c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b44      	ldr	r3, [pc, #272]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d116      	bne.n	800453c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x152>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e1c7      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4937      	ldr	r1, [pc, #220]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	e03a      	b.n	80045b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004544:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_OscConfig+0x244>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd f94b 	bl	80017e4 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004552:	f7fd f947 	bl	80017e4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1a8      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004570:	4b28      	ldr	r3, [pc, #160]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4925      	ldr	r1, [pc, #148]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]
 8004584:	e015      	b.n	80045b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCC_OscConfig+0x244>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd f92a 	bl	80017e4 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004594:	f7fd f926 	bl	80017e4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e187      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d036      	beq.n	800462c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_RCC_OscConfig+0x248>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd f90a 	bl	80017e4 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fd f906 	bl	80017e4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e167      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_OscConfig+0x240>)
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x200>
 80045f2:	e01b      	b.n	800462c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f4:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_OscConfig+0x248>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fd f8f3 	bl	80017e4 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004600:	e00e      	b.n	8004620 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004602:	f7fd f8ef 	bl	80017e4 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d907      	bls.n	8004620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e150      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
 8004614:	40023800 	.word	0x40023800
 8004618:	42470000 	.word	0x42470000
 800461c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	4b88      	ldr	r3, [pc, #544]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ea      	bne.n	8004602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8097 	beq.w	8004768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	4b81      	ldr	r3, [pc, #516]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	4b7d      	ldr	r3, [pc, #500]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a7c      	ldr	r2, [pc, #496]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
 800465a:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b77      	ldr	r3, [pc, #476]	; (8004848 <HAL_RCC_OscConfig+0x474>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d118      	bne.n	80046a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004676:	4b74      	ldr	r3, [pc, #464]	; (8004848 <HAL_RCC_OscConfig+0x474>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a73      	ldr	r2, [pc, #460]	; (8004848 <HAL_RCC_OscConfig+0x474>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fd f8af 	bl	80017e4 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fd f8ab 	bl	80017e4 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e10c      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x474>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x2ea>
 80046b0:	4b64      	ldr	r3, [pc, #400]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a63      	ldr	r2, [pc, #396]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	e01c      	b.n	80046f8 <HAL_RCC_OscConfig+0x324>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x30c>
 80046c6:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a5e      	ldr	r2, [pc, #376]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
 80046d2:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	4a5b      	ldr	r2, [pc, #364]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0x324>
 80046e0:	4b58      	ldr	r3, [pc, #352]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a57      	ldr	r2, [pc, #348]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
 80046ec:	4b55      	ldr	r3, [pc, #340]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a54      	ldr	r2, [pc, #336]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f023 0304 	bic.w	r3, r3, #4
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d015      	beq.n	800472c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd f870 	bl	80017e4 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd f86c 	bl	80017e4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0cb      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471e:	4b49      	ldr	r3, [pc, #292]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0ee      	beq.n	8004708 <HAL_RCC_OscConfig+0x334>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472c:	f7fd f85a 	bl	80017e4 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004732:	e00a      	b.n	800474a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004734:	f7fd f856 	bl	80017e4 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e0b5      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474a:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ee      	bne.n	8004734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d105      	bne.n	8004768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475c:	4b39      	ldr	r3, [pc, #228]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	4a38      	ldr	r2, [pc, #224]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a1 	beq.w	80048b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004772:	4b34      	ldr	r3, [pc, #208]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b08      	cmp	r3, #8
 800477c:	d05c      	beq.n	8004838 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d141      	bne.n	800480a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b31      	ldr	r3, [pc, #196]	; (800484c <HAL_RCC_OscConfig+0x478>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd f82a 	bl	80017e4 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd f826 	bl	80017e4 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e087      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	3b01      	subs	r3, #1
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	491b      	ldr	r1, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x478>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fc ffff 	bl	80017e4 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fc fffb 	bl	80017e4 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e05c      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x416>
 8004808:	e054      	b.n	80048b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <HAL_RCC_OscConfig+0x478>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fc ffe8 	bl	80017e4 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004818:	f7fc ffe4 	bl	80017e4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e045      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_OscConfig+0x470>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x444>
 8004836:	e03d      	b.n	80048b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e038      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
 8004844:	40023800 	.word	0x40023800
 8004848:	40007000 	.word	0x40007000
 800484c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x4ec>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d028      	beq.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d121      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d11a      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	4293      	cmp	r3, r2
 800488a:	d111      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	3b01      	subs	r3, #1
 800489a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800

080048c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0cc      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d8:	4b68      	ldr	r3, [pc, #416]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d90c      	bls.n	8004900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b65      	ldr	r3, [pc, #404]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0b8      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004930:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800493a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b50      	ldr	r3, [pc, #320]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	494d      	ldr	r1, [pc, #308]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d044      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d119      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d003      	beq.n	8004982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497e:	2b03      	cmp	r3, #3
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004982:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e06f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004992:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e067      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4934      	ldr	r1, [pc, #208]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b4:	f7fc ff16 	bl	80017e4 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fc ff12 	bl	80017e4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e04f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 020c 	and.w	r2, r3, #12
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d1eb      	bne.n	80049bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d20c      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e032      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4916      	ldr	r1, [pc, #88]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	490e      	ldr	r1, [pc, #56]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a4a:	f000 f821 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	490a      	ldr	r1, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 8004a5c:	5ccb      	ldrb	r3, [r1, r3]
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc fe76 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023c00 	.word	0x40023c00
 8004a80:	40023800 	.word	0x40023800
 8004a84:	0800c1a0 	.word	0x0800c1a0
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000004 	.word	0x20000004

08004a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a94:	b094      	sub	sp, #80	; 0x50
 8004a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa8:	4b79      	ldr	r3, [pc, #484]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d00d      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	f200 80e1 	bhi.w	8004c7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x3a>
 8004ac2:	e0db      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b73      	ldr	r3, [pc, #460]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ac8:	e0db      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aca:	4b73      	ldr	r3, [pc, #460]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ace:	e0d8      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad0:	4b6f      	ldr	r3, [pc, #444]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ada:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d063      	beq.n	8004bae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae6:	4b6a      	ldr	r3, [pc, #424]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	2200      	movs	r2, #0
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
 8004afa:	2300      	movs	r3, #0
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
 8004afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b02:	4622      	mov	r2, r4
 8004b04:	462b      	mov	r3, r5
 8004b06:	f04f 0000 	mov.w	r0, #0
 8004b0a:	f04f 0100 	mov.w	r1, #0
 8004b0e:	0159      	lsls	r1, r3, #5
 8004b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b14:	0150      	lsls	r0, r2, #5
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	1a51      	subs	r1, r2, r1
 8004b1e:	6139      	str	r1, [r7, #16]
 8004b20:	4629      	mov	r1, r5
 8004b22:	eb63 0301 	sbc.w	r3, r3, r1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b34:	4659      	mov	r1, fp
 8004b36:	018b      	lsls	r3, r1, #6
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b3e:	4651      	mov	r1, sl
 8004b40:	018a      	lsls	r2, r1, #6
 8004b42:	4651      	mov	r1, sl
 8004b44:	ebb2 0801 	subs.w	r8, r2, r1
 8004b48:	4659      	mov	r1, fp
 8004b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b62:	4690      	mov	r8, r2
 8004b64:	4699      	mov	r9, r3
 8004b66:	4623      	mov	r3, r4
 8004b68:	eb18 0303 	adds.w	r3, r8, r3
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	462b      	mov	r3, r5
 8004b70:	eb49 0303 	adc.w	r3, r9, r3
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b82:	4629      	mov	r1, r5
 8004b84:	024b      	lsls	r3, r1, #9
 8004b86:	4621      	mov	r1, r4
 8004b88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	024a      	lsls	r2, r1, #9
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b96:	2200      	movs	r2, #0
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba0:	f7fc f802 	bl	8000ba8 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bac:	e058      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b38      	ldr	r3, [pc, #224]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	4611      	mov	r1, r2
 8004bba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	f04f 0000 	mov.w	r0, #0
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	0159      	lsls	r1, r3, #5
 8004bd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bda:	0150      	lsls	r0, r2, #5
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4641      	mov	r1, r8
 8004be2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004be6:	4649      	mov	r1, r9
 8004be8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c00:	ebb2 040a 	subs.w	r4, r2, sl
 8004c04:	eb63 050b 	sbc.w	r5, r3, fp
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	00eb      	lsls	r3, r5, #3
 8004c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c16:	00e2      	lsls	r2, r4, #3
 8004c18:	4614      	mov	r4, r2
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	4643      	mov	r3, r8
 8004c1e:	18e3      	adds	r3, r4, r3
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	464b      	mov	r3, r9
 8004c24:	eb45 0303 	adc.w	r3, r5, r3
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c36:	4629      	mov	r1, r5
 8004c38:	028b      	lsls	r3, r1, #10
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c40:	4621      	mov	r1, r4
 8004c42:	028a      	lsls	r2, r1, #10
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	61fa      	str	r2, [r7, #28]
 8004c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c54:	f7fb ffa8 	bl	8000ba8 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c7a:	e002      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3750      	adds	r7, #80	; 0x50
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	007a1200 	.word	0x007a1200

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000000 	.word	0x20000000

08004cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e041      	b.n	8004d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fb66 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 f95e 	bl	8004fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d001      	beq.n	8004d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e046      	b.n	8004dfa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <HAL_TIM_Base_Start+0xb4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d022      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d01d      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_TIM_Base_Start+0xb8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <HAL_TIM_Base_Start+0xbc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_TIM_Base_Start+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <HAL_TIM_Base_Start+0xc4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <HAL_TIM_Base_Start+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x70>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <HAL_TIM_Base_Start+0xcc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d111      	bne.n	8004de8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d010      	beq.n	8004df8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	e007      	b.n	8004df8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40001800 	.word	0x40001800

08004e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_ConfigClockSource+0x1c>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e0b4      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x186>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e78:	d03e      	beq.n	8004ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	f200 8087 	bhi.w	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e86:	f000 8086 	beq.w	8004f96 <HAL_TIM_ConfigClockSource+0x172>
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d87f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b70      	cmp	r3, #112	; 0x70
 8004e92:	d01a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xa6>
 8004e94:	2b70      	cmp	r3, #112	; 0x70
 8004e96:	d87b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b60      	cmp	r3, #96	; 0x60
 8004e9a:	d050      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x11a>
 8004e9c:	2b60      	cmp	r3, #96	; 0x60
 8004e9e:	d877      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b50      	cmp	r3, #80	; 0x50
 8004ea2:	d03c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ea4:	2b50      	cmp	r3, #80	; 0x50
 8004ea6:	d873      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d058      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x13a>
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d86f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d064      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b30      	cmp	r3, #48	; 0x30
 8004eb6:	d86b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d060      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d867      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d05a      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec8:	e062      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f000 f985 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	609a      	str	r2, [r3, #8]
      break;
 8004ef6:	e04f      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f000 f96e 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f1a:	609a      	str	r2, [r3, #8]
      break;
 8004f1c:	e03c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 f8e2 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2150      	movs	r1, #80	; 0x50
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f93b 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e02c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 f901 	bl	8005152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2160      	movs	r1, #96	; 0x60
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f92b 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e01c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f000 f8c2 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f91b 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e00c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f000 f912 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f8e:	e003      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	e000      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a40      	ldr	r2, [pc, #256]	; (80050c8 <TIM_Base_SetConfig+0x114>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a3d      	ldr	r2, [pc, #244]	; (80050cc <TIM_Base_SetConfig+0x118>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <TIM_Base_SetConfig+0x11c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3b      	ldr	r2, [pc, #236]	; (80050d4 <TIM_Base_SetConfig+0x120>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3a      	ldr	r2, [pc, #232]	; (80050d8 <TIM_Base_SetConfig+0x124>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <TIM_Base_SetConfig+0x114>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02b      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d027      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <TIM_Base_SetConfig+0x118>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d023      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2b      	ldr	r2, [pc, #172]	; (80050d0 <TIM_Base_SetConfig+0x11c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01f      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <TIM_Base_SetConfig+0x120>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01b      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <TIM_Base_SetConfig+0x124>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d017      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a28      	ldr	r2, [pc, #160]	; (80050dc <TIM_Base_SetConfig+0x128>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <TIM_Base_SetConfig+0x12c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <TIM_Base_SetConfig+0x130>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <TIM_Base_SetConfig+0x134>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a24      	ldr	r2, [pc, #144]	; (80050ec <TIM_Base_SetConfig+0x138>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a23      	ldr	r2, [pc, #140]	; (80050f0 <TIM_Base_SetConfig+0x13c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d108      	bne.n	8005078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <TIM_Base_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0xf8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <TIM_Base_SetConfig+0x124>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d103      	bne.n	80050b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	615a      	str	r2, [r3, #20]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800
 80050e8:	40001800 	.word	0x40001800
 80050ec:	40001c00 	.word	0x40001c00
 80050f0:	40002000 	.word	0x40002000

080050f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0210 	bic.w	r2, r3, #16
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800517c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 0307 	orr.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	431a      	orrs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e05a      	b.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d01d      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a18      	ldr	r2, [pc, #96]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10c      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40010400 	.word	0x40010400
 8005318:	40014000 	.word	0x40014000
 800531c:	40001800 	.word	0x40001800

08005320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005320:	b084      	sub	sp, #16
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	f107 001c 	add.w	r0, r7, #28
 800532e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2b01      	cmp	r3, #1
 8005336:	d122      	bne.n	800537e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800534c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fbee 	bl	8006b54 <USB_CoreReset>
 8005378:	4603      	mov	r3, r0
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e01a      	b.n	80053b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fbe2 	bl	8006b54 <USB_CoreReset>
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
 80053a6:	e005      	b.n	80053b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10b      	bne.n	80053d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f043 0206 	orr.w	r2, r3, #6
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053de:	b004      	add	sp, #16
 80053e0:	4770      	bx	lr
	...

080053e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d165      	bne.n	80054c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a41      	ldr	r2, [pc, #260]	; (8005500 <USB_SetTurnaroundTime+0x11c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0x2a>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a40      	ldr	r2, [pc, #256]	; (8005504 <USB_SetTurnaroundTime+0x120>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d202      	bcs.n	800540e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005408:	230f      	movs	r3, #15
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e062      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a3c      	ldr	r2, [pc, #240]	; (8005504 <USB_SetTurnaroundTime+0x120>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d306      	bcc.n	8005424 <USB_SetTurnaroundTime+0x40>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a3b      	ldr	r2, [pc, #236]	; (8005508 <USB_SetTurnaroundTime+0x124>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d202      	bcs.n	8005424 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800541e:	230e      	movs	r3, #14
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e057      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a38      	ldr	r2, [pc, #224]	; (8005508 <USB_SetTurnaroundTime+0x124>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d306      	bcc.n	800543a <USB_SetTurnaroundTime+0x56>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a37      	ldr	r2, [pc, #220]	; (800550c <USB_SetTurnaroundTime+0x128>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d202      	bcs.n	800543a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005434:	230d      	movs	r3, #13
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e04c      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a33      	ldr	r2, [pc, #204]	; (800550c <USB_SetTurnaroundTime+0x128>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d306      	bcc.n	8005450 <USB_SetTurnaroundTime+0x6c>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a32      	ldr	r2, [pc, #200]	; (8005510 <USB_SetTurnaroundTime+0x12c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d802      	bhi.n	8005450 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800544a:	230c      	movs	r3, #12
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e041      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <USB_SetTurnaroundTime+0x12c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d906      	bls.n	8005466 <USB_SetTurnaroundTime+0x82>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a2e      	ldr	r2, [pc, #184]	; (8005514 <USB_SetTurnaroundTime+0x130>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d802      	bhi.n	8005466 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005460:	230b      	movs	r3, #11
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e036      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <USB_SetTurnaroundTime+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d906      	bls.n	800547c <USB_SetTurnaroundTime+0x98>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a29      	ldr	r2, [pc, #164]	; (8005518 <USB_SetTurnaroundTime+0x134>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d802      	bhi.n	800547c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005476:	230a      	movs	r3, #10
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e02b      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a26      	ldr	r2, [pc, #152]	; (8005518 <USB_SetTurnaroundTime+0x134>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d906      	bls.n	8005492 <USB_SetTurnaroundTime+0xae>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a25      	ldr	r2, [pc, #148]	; (800551c <USB_SetTurnaroundTime+0x138>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d202      	bcs.n	8005492 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800548c:	2309      	movs	r3, #9
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e020      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a21      	ldr	r2, [pc, #132]	; (800551c <USB_SetTurnaroundTime+0x138>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d306      	bcc.n	80054a8 <USB_SetTurnaroundTime+0xc4>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <USB_SetTurnaroundTime+0x13c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d802      	bhi.n	80054a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054a2:	2308      	movs	r3, #8
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e015      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <USB_SetTurnaroundTime+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d906      	bls.n	80054be <USB_SetTurnaroundTime+0xda>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <USB_SetTurnaroundTime+0x140>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d202      	bcs.n	80054be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054b8:	2307      	movs	r3, #7
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e00a      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054be:	2306      	movs	r3, #6
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e007      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054ca:	2309      	movs	r3, #9
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e001      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054d0:	2309      	movs	r3, #9
 80054d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	00d8acbf 	.word	0x00d8acbf
 8005504:	00e4e1c0 	.word	0x00e4e1c0
 8005508:	00f42400 	.word	0x00f42400
 800550c:	01067380 	.word	0x01067380
 8005510:	011a499f 	.word	0x011a499f
 8005514:	01312cff 	.word	0x01312cff
 8005518:	014ca43f 	.word	0x014ca43f
 800551c:	016e3600 	.word	0x016e3600
 8005520:	01a6ab1f 	.word	0x01a6ab1f
 8005524:	01e84800 	.word	0x01e84800

08005528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f043 0201 	orr.w	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 0201 	bic.w	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d115      	bne.n	80055ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800559a:	2001      	movs	r0, #1
 800559c:	f7fc f92e 	bl	80017fc <HAL_Delay>
      ms++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fa45 	bl	8006a36 <USB_GetMode>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d01e      	beq.n	80055f0 <USB_SetCurrentMode+0x84>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b31      	cmp	r3, #49	; 0x31
 80055b6:	d9f0      	bls.n	800559a <USB_SetCurrentMode+0x2e>
 80055b8:	e01a      	b.n	80055f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d115      	bne.n	80055ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7fc f915 	bl	80017fc <HAL_Delay>
      ms++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 fa2c 	bl	8006a36 <USB_GetMode>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <USB_SetCurrentMode+0x84>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b31      	cmp	r3, #49	; 0x31
 80055e8:	d9f0      	bls.n	80055cc <USB_SetCurrentMode+0x60>
 80055ea:	e001      	b.n	80055f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e005      	b.n	80055fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b32      	cmp	r3, #50	; 0x32
 80055f4:	d101      	bne.n	80055fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e009      	b.n	8005638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3340      	adds	r3, #64	; 0x40
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	2200      	movs	r2, #0
 8005630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3301      	adds	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0e      	cmp	r3, #14
 800563c:	d9f2      	bls.n	8005624 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11c      	bne.n	800567e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
 800567c:	e00b      	b.n	8005696 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800569c:	461a      	mov	r2, r3
 800569e:	2300      	movs	r3, #0
 80056a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a8:	4619      	mov	r1, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	461a      	mov	r2, r3
 80056b2:	680b      	ldr	r3, [r1, #0]
 80056b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10c      	bne.n	80056d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056c2:	2100      	movs	r1, #0
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f965 	bl	8005994 <USB_SetDevSpeed>
 80056ca:	e008      	b.n	80056de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056cc:	2101      	movs	r1, #1
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f960 	bl	8005994 <USB_SetDevSpeed>
 80056d4:	e003      	b.n	80056de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056d6:	2103      	movs	r1, #3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f95b 	bl	8005994 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056de:	2110      	movs	r1, #16
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8f3 	bl	80058cc <USB_FlushTxFifo>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f91f 	bl	8005934 <USB_FlushRxFifo>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	461a      	mov	r2, r3
 8005708:	2300      	movs	r3, #0
 800570a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	461a      	mov	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e043      	b.n	80057b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005740:	d118      	bne.n	8005774 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e013      	b.n	8005786 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	461a      	mov	r2, r3
 800576c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e008      	b.n	8005786 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	3301      	adds	r3, #1
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3b7      	bcc.n	800572a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e043      	b.n	8005848 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d6:	d118      	bne.n	800580a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	461a      	mov	r2, r3
 80057ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e013      	b.n	800581c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e008      	b.n	800581c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583a:	461a      	mov	r2, r3
 800583c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005840:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3301      	adds	r3, #1
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	429a      	cmp	r2, r3
 800584e:	d3b7      	bcc.n	80057c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005862:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005870:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	2b00      	cmp	r3, #0
 8005876:	d105      	bne.n	8005884 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f043 0210 	orr.w	r2, r3, #16
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <USB_DevInit+0x2c4>)
 800588a:	4313      	orrs	r3, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f043 0208 	orr.w	r2, r3, #8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c4:	b004      	add	sp, #16
 80058c6:	4770      	bx	lr
 80058c8:	803c3800 	.word	0x803c3800

080058cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a13      	ldr	r2, [pc, #76]	; (8005930 <USB_FlushTxFifo+0x64>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d901      	bls.n	80058ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e01b      	b.n	8005924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	daf2      	bge.n	80058da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	019b      	lsls	r3, r3, #6
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a08      	ldr	r2, [pc, #32]	; (8005930 <USB_FlushTxFifo+0x64>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e006      	b.n	8005924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b20      	cmp	r3, #32
 8005920:	d0f0      	beq.n	8005904 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	00030d40 	.word	0x00030d40

08005934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a11      	ldr	r2, [pc, #68]	; (8005990 <USB_FlushRxFifo+0x5c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e018      	b.n	8005984 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	daf2      	bge.n	8005940 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2210      	movs	r2, #16
 8005962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <USB_FlushRxFifo+0x5c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e006      	b.n	8005984 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b10      	cmp	r3, #16
 8005980:	d0f0      	beq.n	8005964 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	00030d40 	.word	0x00030d40

08005994 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b087      	sub	sp, #28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0306 	and.w	r3, r3, #6
 80059de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d102      	bne.n	80059ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
 80059ea:	e00a      	b.n	8005a02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d002      	beq.n	80059f8 <USB_GetDevSpeed+0x32>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b06      	cmp	r3, #6
 80059f6:	d102      	bne.n	80059fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059f8:	2302      	movs	r3, #2
 80059fa:	75fb      	strb	r3, [r7, #23]
 80059fc:	e001      	b.n	8005a02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059fe:	230f      	movs	r3, #15
 8005a00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d13a      	bne.n	8005aa2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d155      	bne.n	8005b10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	791b      	ldrb	r3, [r3, #4]
 8005a7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e036      	b.n	8005b10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11a      	bne.n	8005b10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005af6:	430b      	orrs	r3, r1
 8005af8:	4313      	orrs	r3, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d161      	bne.n	8005c00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b52:	d11f      	bne.n	8005b94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4013      	ands	r3, r2
 8005bda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	0159      	lsls	r1, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <USB_DeactivateEndpoint+0x1b0>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]
 8005bfe:	e060      	b.n	8005cc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c16:	d11f      	bne.n	8005c58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	43db      	mvns	r3, r3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c78:	4013      	ands	r3, r2
 8005c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	43db      	mvns	r3, r3
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0159      	lsls	r1, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <USB_DeactivateEndpoint+0x1b4>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	ec337800 	.word	0xec337800
 8005cd4:	eff37800 	.word	0xeff37800

08005cd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	f040 815c 	bne.w	8005fb2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d132      	bne.n	8005d68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d60:	0cdb      	lsrs	r3, r3, #19
 8005d62:	04db      	lsls	r3, r3, #19
 8005d64:	6113      	str	r3, [r2, #16]
 8005d66:	e074      	b.n	8005e52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d82:	0cdb      	lsrs	r3, r3, #19
 8005d84:	04db      	lsls	r3, r3, #19
 8005d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	440b      	add	r3, r1
 8005dc4:	1e59      	subs	r1, r3, #1
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dd0:	4b9d      	ldr	r3, [pc, #628]	; (8006048 <USB_EPStartXfer+0x370>)
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	0148      	lsls	r0, r1, #5
 8005dd8:	69f9      	ldr	r1, [r7, #28]
 8005dda:	4401      	add	r1, r0
 8005ddc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005de0:	4313      	orrs	r3, r2
 8005de2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfa:	69b9      	ldr	r1, [r7, #24]
 8005dfc:	0148      	lsls	r0, r1, #5
 8005dfe:	69f9      	ldr	r1, [r7, #28]
 8005e00:	4401      	add	r1, r0
 8005e02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e06:	4313      	orrs	r3, r2
 8005e08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d11f      	bne.n	8005e52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d14b      	bne.n	8005ef0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	791b      	ldrb	r3, [r3, #4]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d128      	bne.n	8005ece <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d110      	bne.n	8005eae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e00f      	b.n	8005ece <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e133      	b.n	8006158 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	791b      	ldrb	r3, [r3, #4]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d015      	beq.n	8005f44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 811b 	beq.w	8006158 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	634b      	str	r3, [r1, #52]	; 0x34
 8005f42:	e109      	b.n	8006158 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d110      	bne.n	8005f76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e00f      	b.n	8005f96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6919      	ldr	r1, [r3, #16]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	b298      	uxth	r0, r3
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4603      	mov	r3, r0
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fade 	bl	800656c <USB_WritePacket>
 8005fb0:	e0d2      	b.n	8006158 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	0cdb      	lsrs	r3, r3, #19
 8005fce:	04db      	lsls	r3, r3, #19
 8005fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ff4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d126      	bne.n	800604c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	0148      	lsls	r0, r1, #5
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	4401      	add	r1, r0
 800601c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	440a      	add	r2, r1
 800603a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006042:	6113      	str	r3, [r2, #16]
 8006044:	e03a      	b.n	80060bc <USB_EPStartXfer+0x3e4>
 8006046:	bf00      	nop
 8006048:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4413      	add	r3, r2
 8006056:	1e5a      	subs	r2, r3, #1
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	8afa      	ldrh	r2, [r7, #22]
 8006068:	fb03 f202 	mul.w	r2, r3, r2
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	8afb      	ldrh	r3, [r7, #22]
 8006080:	04d9      	lsls	r1, r3, #19
 8006082:	4b38      	ldr	r3, [pc, #224]	; (8006164 <USB_EPStartXfer+0x48c>)
 8006084:	400b      	ands	r3, r1
 8006086:	69b9      	ldr	r1, [r7, #24]
 8006088:	0148      	lsls	r0, r1, #5
 800608a:	69f9      	ldr	r1, [r7, #28]
 800608c:	4401      	add	r1, r0
 800608e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006092:	4313      	orrs	r3, r2
 8006094:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ac:	69b9      	ldr	r1, [r7, #24]
 80060ae:	0148      	lsls	r0, r1, #5
 80060b0:	69f9      	ldr	r1, [r7, #28]
 80060b2:	4401      	add	r1, r0
 80060b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060b8:	4313      	orrs	r3, r2
 80060ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d10d      	bne.n	80060de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6919      	ldr	r1, [r3, #16]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	460a      	mov	r2, r1
 80060dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d128      	bne.n	8006138 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d110      	bne.n	8006118 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e00f      	b.n	8006138 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006136:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006152:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	1ff80000 	.word	0x1ff80000

08006168 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b01      	cmp	r3, #1
 8006186:	f040 80ce 	bne.w	8006326 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d132      	bne.n	80061f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	0cdb      	lsrs	r3, r3, #19
 80061f2:	04db      	lsls	r3, r3, #19
 80061f4:	6113      	str	r3, [r2, #16]
 80061f6:	e04e      	b.n	8006296 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006212:	0cdb      	lsrs	r3, r3, #19
 8006214:	04db      	lsls	r3, r3, #19
 8006216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006236:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800623a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d903      	bls.n	8006250 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800626e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006286:	6939      	ldr	r1, [r7, #16]
 8006288:	0148      	lsls	r0, r1, #5
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	4401      	add	r1, r0
 800628e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006292:	4313      	orrs	r3, r2
 8006294:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d11e      	bne.n	80062da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	e097      	b.n	800640a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8083 	beq.w	800640a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006320:	4313      	orrs	r3, r2
 8006322:	634b      	str	r3, [r1, #52]	; 0x34
 8006324:	e071      	b.n	800640a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006340:	0cdb      	lsrs	r3, r3, #19
 8006342:	04db      	lsls	r3, r3, #19
 8006344:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006368:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b8:	6939      	ldr	r1, [r7, #16]
 80063ba:	0148      	lsls	r0, r1, #5
 80063bc:	6979      	ldr	r1, [r7, #20]
 80063be:	4401      	add	r1, r0
 80063c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063c4:	4313      	orrs	r3, r2
 80063c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d10d      	bne.n	80063ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6919      	ldr	r1, [r3, #16]
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	460a      	mov	r2, r1
 80063e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d14a      	bne.n	80064cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644e:	f040 8086 	bne.w	800655e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	7812      	ldrb	r2, [r2, #0]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	440a      	add	r2, r1
 800646c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006470:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006474:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006498:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d902      	bls.n	80064b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
          break;
 80064ae:	e056      	b.n	800655e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c8:	d0e7      	beq.n	800649a <USB_EPStopXfer+0x82>
 80064ca:	e048      	b.n	800655e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e4:	d13b      	bne.n	800655e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	7812      	ldrb	r2, [r2, #0]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006508:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f242 7210 	movw	r2, #10000	; 0x2710
 800653a:	4293      	cmp	r3, r2
 800653c:	d902      	bls.n	8006544 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
          break;
 8006542:	e00c      	b.n	800655e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655c:	d0e7      	beq.n	800652e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800655e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4611      	mov	r1, r2
 8006578:	461a      	mov	r2, r3
 800657a:	460b      	mov	r3, r1
 800657c:	71fb      	strb	r3, [r7, #7]
 800657e:	4613      	mov	r3, r2
 8006580:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800658a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d123      	bne.n	80065da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	3303      	adds	r3, #3
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e018      	b.n	80065d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	031a      	lsls	r2, r3, #12
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ac:	461a      	mov	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	3301      	adds	r3, #1
 80065b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3301      	adds	r3, #1
 80065be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	3301      	adds	r3, #1
 80065ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d3e2      	bcc.n	80065a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3724      	adds	r7, #36	; 0x24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b08b      	sub	sp, #44	; 0x2c
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	089b      	lsrs	r3, r3, #2
 8006602:	b29b      	uxth	r3, r3
 8006604:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800660e:	2300      	movs	r3, #0
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	e014      	b.n	800663e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	3301      	adds	r3, #1
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	3301      	adds	r3, #1
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	3301      	adds	r3, #1
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	3301      	adds	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	3301      	adds	r3, #1
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	6a3a      	ldr	r2, [r7, #32]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	429a      	cmp	r2, r3
 8006644:	d3e6      	bcc.n	8006614 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006646:	8bfb      	ldrh	r3, [r7, #30]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01e      	beq.n	800668a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006656:	461a      	mov	r2, r3
 8006658:	f107 0310 	add.w	r3, r7, #16
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
 800666c:	b2da      	uxtb	r2, r3
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	701a      	strb	r2, [r3, #0]
      i++;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	3301      	adds	r3, #1
 8006676:	623b      	str	r3, [r7, #32]
      pDest++;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	3301      	adds	r3, #1
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800667e:	8bfb      	ldrh	r3, [r7, #30]
 8006680:	3b01      	subs	r3, #1
 8006682:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006684:	8bfb      	ldrh	r3, [r7, #30]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1ea      	bne.n	8006660 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800668c:	4618      	mov	r0, r3
 800668e:	372c      	adds	r7, #44	; 0x2c
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d12c      	bne.n	800670e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	db12      	blt.n	80066ec <USB_EPSetStall+0x54>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00f      	beq.n	80066ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	e02b      	b.n	8006766 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	db12      	blt.n	8006746 <USB_EPSetStall+0xae>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00f      	beq.n	8006746 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006744:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006764:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d128      	bne.n	80067e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	791b      	ldrb	r3, [r3, #4]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d003      	beq.n	80067c0 <USB_EPClearStall+0x4c>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	791b      	ldrb	r3, [r3, #4]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d138      	bne.n	8006832 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e027      	b.n	8006832 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006800:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	791b      	ldrb	r3, [r3, #4]
 8006806:	2b03      	cmp	r3, #3
 8006808:	d003      	beq.n	8006812 <USB_EPClearStall+0x9e>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	791b      	ldrb	r3, [r3, #4]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d10f      	bne.n	8006832 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006830:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006862:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006874:	68f9      	ldr	r1, [r7, #12]
 8006876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800687a:	4313      	orrs	r3, r2
 800687c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ba:	f023 0302 	bic.w	r3, r3, #2
 80068be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fc:	f043 0302 	orr.w	r3, r3, #2
 8006900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006928:	68fb      	ldr	r3, [r7, #12]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4013      	ands	r3, r2
 8006958:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	0c1b      	lsrs	r3, r3, #16
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4013      	ands	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	b29b      	uxth	r3, r3
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069cc:	68bb      	ldr	r3, [r7, #8]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069da:	b480      	push	{r7}
 80069dc:	b087      	sub	sp, #28
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4013      	ands	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a28:	68bb      	ldr	r3, [r7, #8]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f003 0301 	and.w	r3, r3, #1
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a70:	f023 0307 	bic.w	r3, r3, #7
 8006a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	333c      	adds	r3, #60	; 0x3c
 8006aae:	3304      	adds	r3, #4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <USB_EP0_OutStart+0xb8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d90a      	bls.n	8006ad2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006acc:	d101      	bne.n	8006ad2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e037      	b.n	8006b42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	461a      	mov	r2, r3
 8006ada:	2300      	movs	r3, #0
 8006adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b00:	f043 0318 	orr.w	r3, r3, #24
 8006b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10f      	bne.n	8006b40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b26:	461a      	mov	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	4f54300a 	.word	0x4f54300a

08006b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <USB_CoreReset+0x64>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e01b      	b.n	8006baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	daf2      	bge.n	8006b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f043 0201 	orr.w	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <USB_CoreReset+0x64>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e006      	b.n	8006baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d0f0      	beq.n	8006b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	00030d40 	.word	0x00030d40

08006bbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bcc:	f002 fc94 	bl	80094f8 <USBD_static_malloc>
 8006bd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32b0      	adds	r2, #176	; 0xb0
 8006be2:	2100      	movs	r1, #0
 8006be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006be8:	2302      	movs	r3, #2
 8006bea:	e0d4      	b.n	8006d96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f002 fcee 	bl	80095d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32b0      	adds	r2, #176	; 0xb0
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32b0      	adds	r2, #176	; 0xb0
 8006c12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7c1b      	ldrb	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d138      	bne.n	8006c96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c24:	4b5e      	ldr	r3, [pc, #376]	; (8006da0 <USBD_CDC_Init+0x1e4>)
 8006c26:	7819      	ldrb	r1, [r3, #0]
 8006c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f002 fb3f 	bl	80092b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c34:	4b5a      	ldr	r3, [pc, #360]	; (8006da0 <USBD_CDC_Init+0x1e4>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c4e:	4b55      	ldr	r3, [pc, #340]	; (8006da4 <USBD_CDC_Init+0x1e8>)
 8006c50:	7819      	ldrb	r1, [r3, #0]
 8006c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c56:	2202      	movs	r2, #2
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f002 fb2a 	bl	80092b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c5e:	4b51      	ldr	r3, [pc, #324]	; (8006da4 <USBD_CDC_Init+0x1e8>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	f003 020f 	and.w	r2, r3, #15
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c76:	2201      	movs	r2, #1
 8006c78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c7a:	4b4b      	ldr	r3, [pc, #300]	; (8006da8 <USBD_CDC_Init+0x1ec>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 020f 	and.w	r2, r3, #15
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3326      	adds	r3, #38	; 0x26
 8006c90:	2210      	movs	r2, #16
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	e035      	b.n	8006d02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c96:	4b42      	ldr	r3, [pc, #264]	; (8006da0 <USBD_CDC_Init+0x1e4>)
 8006c98:	7819      	ldrb	r1, [r3, #0]
 8006c9a:	2340      	movs	r3, #64	; 0x40
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f002 fb07 	bl	80092b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ca4:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <USBD_CDC_Init+0x1e4>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3324      	adds	r3, #36	; 0x24
 8006cba:	2201      	movs	r2, #1
 8006cbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cbe:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <USBD_CDC_Init+0x1e8>)
 8006cc0:	7819      	ldrb	r1, [r3, #0]
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 faf3 	bl	80092b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <USBD_CDC_Init+0x1e8>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ce8:	4b2f      	ldr	r3, [pc, #188]	; (8006da8 <USBD_CDC_Init+0x1ec>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3326      	adds	r3, #38	; 0x26
 8006cfe:	2210      	movs	r2, #16
 8006d00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d02:	4b29      	ldr	r3, [pc, #164]	; (8006da8 <USBD_CDC_Init+0x1ec>)
 8006d04:	7819      	ldrb	r1, [r3, #0]
 8006d06:	2308      	movs	r3, #8
 8006d08:	2203      	movs	r2, #3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f002 fad1 	bl	80092b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <USBD_CDC_Init+0x1ec>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f003 020f 	and.w	r2, r3, #15
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	3324      	adds	r3, #36	; 0x24
 8006d26:	2201      	movs	r2, #1
 8006d28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	33b0      	adds	r3, #176	; 0xb0
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d60:	2302      	movs	r3, #2
 8006d62:	e018      	b.n	8006d96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7c1b      	ldrb	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <USBD_CDC_Init+0x1e8>)
 8006d6e:	7819      	ldrb	r1, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f002 fb88 	bl	8009490 <USBD_LL_PrepareReceive>
 8006d80:	e008      	b.n	8006d94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <USBD_CDC_Init+0x1e8>)
 8006d84:	7819      	ldrb	r1, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f002 fb7e 	bl	8009490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000093 	.word	0x20000093
 8006da4:	20000094 	.word	0x20000094
 8006da8:	20000095 	.word	0x20000095

08006dac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006db8:	4b3a      	ldr	r3, [pc, #232]	; (8006ea4 <USBD_CDC_DeInit+0xf8>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f002 fa9d 	bl	80092fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006dc4:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <USBD_CDC_DeInit+0xf8>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	2200      	movs	r2, #0
 8006ddc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006dde:	4b32      	ldr	r3, [pc, #200]	; (8006ea8 <USBD_CDC_DeInit+0xfc>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f002 fa8a 	bl	80092fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006dea:	4b2f      	ldr	r3, [pc, #188]	; (8006ea8 <USBD_CDC_DeInit+0xfc>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e02:	2200      	movs	r2, #0
 8006e04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <USBD_CDC_DeInit+0x100>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 fa76 	bl	80092fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <USBD_CDC_DeInit+0x100>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	3324      	adds	r3, #36	; 0x24
 8006e28:	2200      	movs	r2, #0
 8006e2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e2c:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <USBD_CDC_DeInit+0x100>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	3326      	adds	r3, #38	; 0x26
 8006e42:	2200      	movs	r2, #0
 8006e44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	32b0      	adds	r2, #176	; 0xb0
 8006e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01f      	beq.n	8006e98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	33b0      	adds	r3, #176	; 0xb0
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32b0      	adds	r2, #176	; 0xb0
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 fb4a 	bl	8009514 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	; 0xb0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000093 	.word	0x20000093
 8006ea8:	20000094 	.word	0x20000094
 8006eac:	20000095 	.word	0x20000095

08006eb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	32b0      	adds	r2, #176	; 0xb0
 8006ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e0bf      	b.n	8007060 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d050      	beq.n	8006f8e <USBD_CDC_Setup+0xde>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	f040 80af 	bne.w	8007050 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	88db      	ldrh	r3, [r3, #6]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d03a      	beq.n	8006f70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da1b      	bge.n	8006f3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	33b0      	adds	r3, #176	; 0xb0
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	88d2      	ldrh	r2, [r2, #6]
 8006f20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	88db      	ldrh	r3, [r3, #6]
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	bf28      	it	cs
 8006f2a:	2307      	movcs	r3, #7
 8006f2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	89fa      	ldrh	r2, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fd89 	bl	8008a4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f3a:	e090      	b.n	800705e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	785a      	ldrb	r2, [r3, #1]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8006f4c:	d803      	bhi.n	8006f56 <USBD_CDC_Setup+0xa6>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	e000      	b.n	8006f58 <USBD_CDC_Setup+0xa8>
 8006f56:	2240      	movs	r2, #64	; 0x40
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f5e:	6939      	ldr	r1, [r7, #16]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f66:	461a      	mov	r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fd9b 	bl	8008aa4 <USBD_CtlPrepareRx>
      break;
 8006f6e:	e076      	b.n	800705e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	33b0      	adds	r3, #176	; 0xb0
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	7850      	ldrb	r0, [r2, #1]
 8006f86:	2200      	movs	r2, #0
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	4798      	blx	r3
      break;
 8006f8c:	e067      	b.n	800705e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b0b      	cmp	r3, #11
 8006f94:	d851      	bhi.n	800703a <USBD_CDC_Setup+0x18a>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_CDC_Setup+0xec>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fcd 	.word	0x08006fcd
 8006fa0:	08007049 	.word	0x08007049
 8006fa4:	0800703b 	.word	0x0800703b
 8006fa8:	0800703b 	.word	0x0800703b
 8006fac:	0800703b 	.word	0x0800703b
 8006fb0:	0800703b 	.word	0x0800703b
 8006fb4:	0800703b 	.word	0x0800703b
 8006fb8:	0800703b 	.word	0x0800703b
 8006fbc:	0800703b 	.word	0x0800703b
 8006fc0:	0800703b 	.word	0x0800703b
 8006fc4:	08006ff7 	.word	0x08006ff7
 8006fc8:	08007021 	.word	0x08007021
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d107      	bne.n	8006fe8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fd8:	f107 030a 	add.w	r3, r7, #10
 8006fdc:	2202      	movs	r2, #2
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fd33 	bl	8008a4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fe6:	e032      	b.n	800704e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fcbd 	bl	800896a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff4:	e02b      	b.n	800704e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007002:	f107 030d 	add.w	r3, r7, #13
 8007006:	2201      	movs	r2, #1
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fd1e 	bl	8008a4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007010:	e01d      	b.n	800704e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fca8 	bl	800896a <USBD_CtlError>
            ret = USBD_FAIL;
 800701a:	2303      	movs	r3, #3
 800701c:	75fb      	strb	r3, [r7, #23]
          break;
 800701e:	e016      	b.n	800704e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d00f      	beq.n	800704c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 fc9b 	bl	800896a <USBD_CtlError>
            ret = USBD_FAIL;
 8007034:	2303      	movs	r3, #3
 8007036:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007038:	e008      	b.n	800704c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fc94 	bl	800896a <USBD_CtlError>
          ret = USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	75fb      	strb	r3, [r7, #23]
          break;
 8007046:	e002      	b.n	800704e <USBD_CDC_Setup+0x19e>
          break;
 8007048:	bf00      	nop
 800704a:	e008      	b.n	800705e <USBD_CDC_Setup+0x1ae>
          break;
 800704c:	bf00      	nop
      }
      break;
 800704e:	e006      	b.n	800705e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fc89 	bl	800896a <USBD_CtlError>
      ret = USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	75fb      	strb	r3, [r7, #23]
      break;
 800705c:	bf00      	nop
  }

  return (uint8_t)ret;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800707a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	; 0xb0
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	e065      	b.n	800715e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	32b0      	adds	r2, #176	; 0xb0
 800709c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	f003 020f 	and.w	r2, r3, #15
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	3318      	adds	r3, #24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d02f      	beq.n	800711c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	f003 020f 	and.w	r2, r3, #15
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	3318      	adds	r3, #24
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	f003 010f 	and.w	r1, r3, #15
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	460b      	mov	r3, r1
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	440b      	add	r3, r1
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4403      	add	r3, r0
 80070e4:	3348      	adds	r3, #72	; 0x48
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
 80070f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d112      	bne.n	800711c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f003 020f 	and.w	r2, r3, #15
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	3318      	adds	r3, #24
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800710e:	78f9      	ldrb	r1, [r7, #3]
 8007110:	2300      	movs	r3, #0
 8007112:	2200      	movs	r2, #0
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f002 f99a 	bl	800944e <USBD_LL_Transmit>
 800711a:	e01f      	b.n	800715c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	33b0      	adds	r3, #176	; 0xb0
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d010      	beq.n	800715c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	33b0      	adds	r3, #176	; 0xb0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	32b0      	adds	r2, #176	; 0xb0
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	32b0      	adds	r2, #176	; 0xb0
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	e01a      	b.n	80071ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f002 f998 	bl	80094d2 <USBD_LL_GetRxDataSize>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	33b0      	adds	r3, #176	; 0xb0
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071c8:	4611      	mov	r1, r2
 80071ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	32b0      	adds	r2, #176	; 0xb0
 80071e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e025      	b.n	8007244 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	33b0      	adds	r3, #176	; 0xb0
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01a      	beq.n	8007242 <USBD_CDC_EP0_RxReady+0x6c>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007212:	2bff      	cmp	r3, #255	; 0xff
 8007214:	d015      	beq.n	8007242 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	33b0      	adds	r3, #176	; 0xb0
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800722e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007236:	b292      	uxth	r2, r2
 8007238:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	22ff      	movs	r2, #255	; 0xff
 800723e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007254:	2182      	movs	r1, #130	; 0x82
 8007256:	4818      	ldr	r0, [pc, #96]	; (80072b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007258:	f000 fd4f 	bl	8007cfa <USBD_GetEpDesc>
 800725c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800725e:	2101      	movs	r1, #1
 8007260:	4815      	ldr	r0, [pc, #84]	; (80072b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007262:	f000 fd4a 	bl	8007cfa <USBD_GetEpDesc>
 8007266:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007268:	2181      	movs	r1, #129	; 0x81
 800726a:	4813      	ldr	r0, [pc, #76]	; (80072b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800726c:	f000 fd45 	bl	8007cfa <USBD_GetEpDesc>
 8007270:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2210      	movs	r2, #16
 800727c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2200      	movs	r2, #0
 8007288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800728c:	711a      	strb	r2, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a0:	711a      	strb	r2, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2243      	movs	r2, #67	; 0x43
 80072aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000050 	.word	0x20000050

080072bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072c4:	2182      	movs	r1, #130	; 0x82
 80072c6:	4818      	ldr	r0, [pc, #96]	; (8007328 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072c8:	f000 fd17 	bl	8007cfa <USBD_GetEpDesc>
 80072cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072ce:	2101      	movs	r1, #1
 80072d0:	4815      	ldr	r0, [pc, #84]	; (8007328 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072d2:	f000 fd12 	bl	8007cfa <USBD_GetEpDesc>
 80072d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072d8:	2181      	movs	r1, #129	; 0x81
 80072da:	4813      	ldr	r0, [pc, #76]	; (8007328 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072dc:	f000 fd0d 	bl	8007cfa <USBD_GetEpDesc>
 80072e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2210      	movs	r2, #16
 80072ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2200      	movs	r2, #0
 80072f8:	711a      	strb	r2, [r3, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f042 0202 	orr.w	r2, r2, #2
 8007300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	711a      	strb	r2, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f042 0202 	orr.w	r2, r2, #2
 8007314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2243      	movs	r2, #67	; 0x43
 800731a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000050 	.word	0x20000050

0800732c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007334:	2182      	movs	r1, #130	; 0x82
 8007336:	4818      	ldr	r0, [pc, #96]	; (8007398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007338:	f000 fcdf 	bl	8007cfa <USBD_GetEpDesc>
 800733c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800733e:	2101      	movs	r1, #1
 8007340:	4815      	ldr	r0, [pc, #84]	; (8007398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007342:	f000 fcda 	bl	8007cfa <USBD_GetEpDesc>
 8007346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007348:	2181      	movs	r1, #129	; 0x81
 800734a:	4813      	ldr	r0, [pc, #76]	; (8007398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800734c:	f000 fcd5 	bl	8007cfa <USBD_GetEpDesc>
 8007350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2210      	movs	r2, #16
 800735c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d006      	beq.n	8007372 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2200      	movs	r2, #0
 8007368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736c:	711a      	strb	r2, [r3, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d006      	beq.n	8007386 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007380:	711a      	strb	r2, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2243      	movs	r2, #67	; 0x43
 800738a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000050 	.word	0x20000050

0800739c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	220a      	movs	r2, #10
 80073a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073aa:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	2000000c 	.word	0x2000000c

080073bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e009      	b.n	80073e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	33b0      	adds	r3, #176	; 0xb0
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	32b0      	adds	r2, #176	; 0xb0
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007412:	2303      	movs	r3, #3
 8007414:	e008      	b.n	8007428 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	32b0      	adds	r2, #176	; 0xb0
 8007448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e004      	b.n	8007462 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	32b0      	adds	r2, #176	; 0xb0
 8007482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007486:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32b0      	adds	r2, #176	; 0xb0
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	e025      	b.n	80074ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11f      	bne.n	80074ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80074b4:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <USBD_CDC_TransmitPacket+0x88>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 020f 	and.w	r2, r3, #15
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4403      	add	r3, r0
 80074ce:	3318      	adds	r3, #24
 80074d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <USBD_CDC_TransmitPacket+0x88>)
 80074d4:	7819      	ldrb	r1, [r3, #0]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 ffb3 	bl	800944e <USBD_LL_Transmit>

    ret = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000093 	.word	0x20000093

080074fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	32b0      	adds	r2, #176	; 0xb0
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32b0      	adds	r2, #176	; 0xb0
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007526:	2303      	movs	r3, #3
 8007528:	e018      	b.n	800755c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7c1b      	ldrb	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <USBD_CDC_ReceivePacket+0x68>)
 8007534:	7819      	ldrb	r1, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800753c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 ffa5 	bl	8009490 <USBD_LL_PrepareReceive>
 8007546:	e008      	b.n	800755a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <USBD_CDC_ReceivePacket+0x68>)
 800754a:	7819      	ldrb	r1, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007552:	2340      	movs	r3, #64	; 0x40
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 ff9b 	bl	8009490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000094 	.word	0x20000094

08007568 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	e01f      	b.n	80075c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	79fa      	ldrb	r2, [r7, #7]
 80075b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f001 fe15 	bl	80091e4 <USBD_LL_Init>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	e025      	b.n	800762c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	; 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00f      	beq.n	800761c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32ae      	adds	r2, #174	; 0xae
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	f107 020e 	add.w	r2, r7, #14
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	4602      	mov	r2, r0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fe1d 	bl	800927c <USBD_LL_Start>
 8007642:	4603      	mov	r3, r0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d009      	beq.n	8007690 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	4611      	mov	r1, r2
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	4611      	mov	r1, r2
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 f908 	bl	80088f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2b02      	cmp	r3, #2
 8007708:	d01a      	beq.n	8007740 <USBD_LL_SetupStage+0x72>
 800770a:	2b02      	cmp	r3, #2
 800770c:	d822      	bhi.n	8007754 <USBD_LL_SetupStage+0x86>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <USBD_LL_SetupStage+0x4a>
 8007712:	2b01      	cmp	r3, #1
 8007714:	d00a      	beq.n	800772c <USBD_LL_SetupStage+0x5e>
 8007716:	e01d      	b.n	8007754 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb5f 	bl	8007de4 <USBD_StdDevReq>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]
      break;
 800772a:	e020      	b.n	800776e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fbc7 	bl	8007ec8 <USBD_StdItfReq>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
      break;
 800773e:	e016      	b.n	800776e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc29 	bl	8007fa0 <USBD_StdEPReq>
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]
      break;
 8007752:	e00c      	b.n	800776e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800775a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800775e:	b2db      	uxtb	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 fdea 	bl	800933c <USBD_LL_StallEP>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	bf00      	nop
  }

  return ret;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	460b      	mov	r3, r1
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800778a:	7afb      	ldrb	r3, [r7, #11]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d16e      	bne.n	800786e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f040 8098 	bne.w	80078d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d913      	bls.n	80077d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	1ad2      	subs	r2, r2, r3
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	4293      	cmp	r3, r2
 80077c8:	bf28      	it	cs
 80077ca:	4613      	movcs	r3, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 f984 	bl	8008ade <USBD_CtlContinueRx>
 80077d6:	e07d      	b.n	80078d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d014      	beq.n	8007810 <USBD_LL_DataOutStage+0x98>
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d81d      	bhi.n	8007826 <USBD_LL_DataOutStage+0xae>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <USBD_LL_DataOutStage+0x7c>
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d003      	beq.n	80077fa <USBD_LL_DataOutStage+0x82>
 80077f2:	e018      	b.n	8007826 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	75bb      	strb	r3, [r7, #22]
            break;
 80077f8:	e018      	b.n	800782c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4619      	mov	r1, r3
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa5e 	bl	8007cc6 <USBD_CoreFindIF>
 800780a:	4603      	mov	r3, r0
 800780c:	75bb      	strb	r3, [r7, #22]
            break;
 800780e:	e00d      	b.n	800782c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007816:	b2db      	uxtb	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fa60 	bl	8007ce0 <USBD_CoreFindEP>
 8007820:	4603      	mov	r3, r0
 8007822:	75bb      	strb	r3, [r7, #22]
            break;
 8007824:	e002      	b.n	800782c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	75bb      	strb	r3, [r7, #22]
            break;
 800782a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800782c:	7dbb      	ldrb	r3, [r7, #22]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d119      	bne.n	8007866 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b03      	cmp	r3, #3
 800783c:	d113      	bne.n	8007866 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800783e:	7dba      	ldrb	r2, [r7, #22]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	32ae      	adds	r2, #174	; 0xae
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800784e:	7dba      	ldrb	r2, [r7, #22]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007856:	7dba      	ldrb	r2, [r7, #22]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	32ae      	adds	r2, #174	; 0xae
 800785c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f001 f94a 	bl	8008b00 <USBD_CtlSendStatus>
 800786c:	e032      	b.n	80078d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4619      	mov	r1, r3
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fa31 	bl	8007ce0 <USBD_CoreFindEP>
 800787e:	4603      	mov	r3, r0
 8007880:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007882:	7dbb      	ldrb	r3, [r7, #22]
 8007884:	2bff      	cmp	r3, #255	; 0xff
 8007886:	d025      	beq.n	80078d4 <USBD_LL_DataOutStage+0x15c>
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d122      	bne.n	80078d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b03      	cmp	r3, #3
 8007898:	d117      	bne.n	80078ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800789a:	7dba      	ldrb	r2, [r7, #22]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	32ae      	adds	r2, #174	; 0xae
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00f      	beq.n	80078ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078aa:	7dba      	ldrb	r2, [r7, #22]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078b2:	7dba      	ldrb	r2, [r7, #22]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	32ae      	adds	r2, #174	; 0xae
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	7afa      	ldrb	r2, [r7, #11]
 80078c0:	4611      	mov	r1, r2
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	4798      	blx	r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	e000      	b.n	80078d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	460b      	mov	r3, r1
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d16f      	bne.n	80079d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3314      	adds	r3, #20
 80078f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d15a      	bne.n	80079b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	429a      	cmp	r2, r3
 800790c:	d914      	bls.n	8007938 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	461a      	mov	r2, r3
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f001 f8ac 	bl	8008a82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800792a:	2300      	movs	r3, #0
 800792c:	2200      	movs	r2, #0
 800792e:	2100      	movs	r1, #0
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f001 fdad 	bl	8009490 <USBD_LL_PrepareReceive>
 8007936:	e03f      	b.n	80079b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	d11c      	bne.n	800797e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800794c:	429a      	cmp	r2, r3
 800794e:	d316      	bcc.n	800797e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800795a:	429a      	cmp	r2, r3
 800795c:	d20f      	bcs.n	800797e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800795e:	2200      	movs	r2, #0
 8007960:	2100      	movs	r1, #0
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f001 f88d 	bl	8008a82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f001 fd8a 	bl	8009490 <USBD_LL_PrepareReceive>
 800797c:	e01c      	b.n	80079b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b03      	cmp	r3, #3
 8007988:	d10f      	bne.n	80079aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079aa:	2180      	movs	r1, #128	; 0x80
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f001 fcc5 	bl	800933c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f001 f8b7 	bl	8008b26 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d03a      	beq.n	8007a38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff fe42 	bl	800764c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079d0:	e032      	b.n	8007a38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f97f 	bl	8007ce0 <USBD_CoreFindEP>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	2bff      	cmp	r3, #255	; 0xff
 80079ea:	d025      	beq.n	8007a38 <USBD_LL_DataInStage+0x15a>
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d122      	bne.n	8007a38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d11c      	bne.n	8007a38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079fe:	7dfa      	ldrb	r2, [r7, #23]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	32ae      	adds	r2, #174	; 0xae
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d014      	beq.n	8007a38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a0e:	7dfa      	ldrb	r2, [r7, #23]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a16:	7dfa      	ldrb	r2, [r7, #23]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	32ae      	adds	r2, #174	; 0xae
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	7afa      	ldrb	r2, [r7, #11]
 8007a24:	4611      	mov	r1, r2
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a2e:	7dbb      	ldrb	r3, [r7, #22]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
 8007a36:	e000      	b.n	8007a3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d014      	beq.n	8007aa8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00e      	beq.n	8007aa8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6852      	ldr	r2, [r2, #4]
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	4611      	mov	r1, r2
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fbff 	bl	80092b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2240      	movs	r2, #64	; 0x40
 8007ac0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 fbf1 	bl	80092b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2240      	movs	r2, #64	; 0x40
 8007ada:	621a      	str	r2, [r3, #32]

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d106      	bne.n	8007b54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d110      	bne.n	8007b98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	32ae      	adds	r2, #174	; 0xae
 8007bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e01c      	b.n	8007bfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d115      	bne.n	8007bfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32ae      	adds	r2, #174	; 0xae
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	32ae      	adds	r2, #174	; 0xae
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	32ae      	adds	r2, #174	; 0xae
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e01c      	b.n	8007c62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d115      	bne.n	8007c60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	32ae      	adds	r2, #174	; 0xae
 8007c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	32ae      	adds	r2, #174	; 0xae
 8007c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00e      	beq.n	8007cbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6852      	ldr	r2, [r2, #4]
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	4611      	mov	r1, r2
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d920      	bls.n	8007d64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d2a:	e013      	b.n	8007d54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d2c:	f107 030a 	add.w	r3, r7, #10
 8007d30:	4619      	mov	r1, r3
 8007d32:	6978      	ldr	r0, [r7, #20]
 8007d34:	f000 f81b 	bl	8007d6e <USBD_GetNextDesc>
 8007d38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d108      	bne.n	8007d54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	789b      	ldrb	r3, [r3, #2]
 8007d4a:	78fa      	ldrb	r2, [r7, #3]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d008      	beq.n	8007d62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	885b      	ldrh	r3, [r3, #2]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	897b      	ldrh	r3, [r7, #10]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d8e5      	bhi.n	8007d2c <USBD_GetEpDesc+0x32>
 8007d60:	e000      	b.n	8007d64 <USBD_GetEpDesc+0x6a>
          break;
 8007d62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d64:	693b      	ldr	r3, [r7, #16]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	881a      	ldrh	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4413      	add	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dc6:	8a3b      	ldrh	r3, [r7, #16]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b21a      	sxth	r2, r3
 8007dcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	b21b      	sxth	r3, r3
 8007dd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dd6:	89fb      	ldrh	r3, [r7, #14]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d005      	beq.n	8007e0a <USBD_StdDevReq+0x26>
 8007dfe:	2b40      	cmp	r3, #64	; 0x40
 8007e00:	d857      	bhi.n	8007eb2 <USBD_StdDevReq+0xce>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00f      	beq.n	8007e26 <USBD_StdDevReq+0x42>
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d153      	bne.n	8007eb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	32ae      	adds	r2, #174	; 0xae
 8007e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
      break;
 8007e24:	e04a      	b.n	8007ebc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d83b      	bhi.n	8007ea6 <USBD_StdDevReq+0xc2>
 8007e2e:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <USBD_StdDevReq+0x50>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007e9d 	.word	0x08007e9d
 8007e3c:	08007ea7 	.word	0x08007ea7
 8007e40:	08007e93 	.word	0x08007e93
 8007e44:	08007ea7 	.word	0x08007ea7
 8007e48:	08007e67 	.word	0x08007e67
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007ea7 	.word	0x08007ea7
 8007e54:	08007e7f 	.word	0x08007e7f
 8007e58:	08007e71 	.word	0x08007e71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa3c 	bl	80082dc <USBD_GetDescriptor>
          break;
 8007e64:	e024      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fba1 	bl	80085b0 <USBD_SetAddress>
          break;
 8007e6e:	e01f      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fbe0 	bl	8008638 <USBD_SetConfig>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8007e7c:	e018      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc83 	bl	800878c <USBD_GetConfig>
          break;
 8007e86:	e013      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fcb4 	bl	80087f8 <USBD_GetStatus>
          break;
 8007e90:	e00e      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fce3 	bl	8008860 <USBD_SetFeature>
          break;
 8007e9a:	e009      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fd07 	bl	80088b2 <USBD_ClrFeature>
          break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fd5e 	bl	800896a <USBD_CtlError>
          break;
 8007eae:	bf00      	nop
      }
      break;
 8007eb0:	e004      	b.n	8007ebc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fd58 	bl	800896a <USBD_CtlError>
      break;
 8007eba:	bf00      	nop
  }

  return ret;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d005      	beq.n	8007eee <USBD_StdItfReq+0x26>
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d852      	bhi.n	8007f8c <USBD_StdItfReq+0xc4>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <USBD_StdItfReq+0x26>
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d14e      	bne.n	8007f8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d840      	bhi.n	8007f7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	889b      	ldrh	r3, [r3, #4]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d836      	bhi.n	8007f74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	889b      	ldrh	r3, [r3, #4]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fed9 	bl	8007cc6 <USBD_CoreFindIF>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2bff      	cmp	r3, #255	; 0xff
 8007f1c:	d01d      	beq.n	8007f5a <USBD_StdItfReq+0x92>
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11a      	bne.n	8007f5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f24:	7bba      	ldrb	r2, [r7, #14]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32ae      	adds	r2, #174	; 0xae
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00f      	beq.n	8007f54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f34:	7bba      	ldrb	r2, [r7, #14]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f3c:	7bba      	ldrb	r2, [r7, #14]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	32ae      	adds	r2, #174	; 0xae
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f52:	e004      	b.n	8007f5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f58:	e001      	b.n	8007f5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	88db      	ldrh	r3, [r3, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d110      	bne.n	8007f88 <USBD_StdItfReq+0xc0>
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10d      	bne.n	8007f88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fdc7 	bl	8008b00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f72:	e009      	b.n	8007f88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fcf7 	bl	800896a <USBD_CtlError>
          break;
 8007f7c:	e004      	b.n	8007f88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fcf2 	bl	800896a <USBD_CtlError>
          break;
 8007f86:	e000      	b.n	8007f8a <USBD_StdItfReq+0xc2>
          break;
 8007f88:	bf00      	nop
      }
      break;
 8007f8a:	e004      	b.n	8007f96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fceb 	bl	800896a <USBD_CtlError>
      break;
 8007f94:	bf00      	nop
  }

  return ret;
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	889b      	ldrh	r3, [r3, #4]
 8007fb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d007      	beq.n	8007fd0 <USBD_StdEPReq+0x30>
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	f200 817f 	bhi.w	80082c4 <USBD_StdEPReq+0x324>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d02a      	beq.n	8008020 <USBD_StdEPReq+0x80>
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	f040 817a 	bne.w	80082c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff fe83 	bl	8007ce0 <USBD_CoreFindEP>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fde:	7b7b      	ldrb	r3, [r7, #13]
 8007fe0:	2bff      	cmp	r3, #255	; 0xff
 8007fe2:	f000 8174 	beq.w	80082ce <USBD_StdEPReq+0x32e>
 8007fe6:	7b7b      	ldrb	r3, [r7, #13]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 8170 	bne.w	80082ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fee:	7b7a      	ldrb	r2, [r7, #13]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ff6:	7b7a      	ldrb	r2, [r7, #13]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	32ae      	adds	r2, #174	; 0xae
 8007ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 8163 	beq.w	80082ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008008:	7b7a      	ldrb	r2, [r7, #13]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	32ae      	adds	r2, #174	; 0xae
 800800e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800801e:	e156      	b.n	80082ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d008      	beq.n	800803a <USBD_StdEPReq+0x9a>
 8008028:	2b03      	cmp	r3, #3
 800802a:	f300 8145 	bgt.w	80082b8 <USBD_StdEPReq+0x318>
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 809b 	beq.w	800816a <USBD_StdEPReq+0x1ca>
 8008034:	2b01      	cmp	r3, #1
 8008036:	d03c      	beq.n	80080b2 <USBD_StdEPReq+0x112>
 8008038:	e13e      	b.n	80082b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d002      	beq.n	800804c <USBD_StdEPReq+0xac>
 8008046:	2b03      	cmp	r3, #3
 8008048:	d016      	beq.n	8008078 <USBD_StdEPReq+0xd8>
 800804a:	e02c      	b.n	80080a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <USBD_StdEPReq+0xce>
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b80      	cmp	r3, #128	; 0x80
 8008056:	d00a      	beq.n	800806e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f96d 	bl	800933c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008062:	2180      	movs	r1, #128	; 0x80
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f969 	bl	800933c <USBD_LL_StallEP>
 800806a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800806c:	e020      	b.n	80080b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc7a 	bl	800896a <USBD_CtlError>
              break;
 8008076:	e01b      	b.n	80080b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	885b      	ldrh	r3, [r3, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10e      	bne.n	800809e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <USBD_StdEPReq+0xfe>
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b80      	cmp	r3, #128	; 0x80
 800808a:	d008      	beq.n	800809e <USBD_StdEPReq+0xfe>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	88db      	ldrh	r3, [r3, #6]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f94f 	bl	800933c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fd2e 	bl	8008b00 <USBD_CtlSendStatus>

              break;
 80080a4:	e004      	b.n	80080b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fc5e 	bl	800896a <USBD_CtlError>
              break;
 80080ae:	bf00      	nop
          }
          break;
 80080b0:	e107      	b.n	80082c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d002      	beq.n	80080c4 <USBD_StdEPReq+0x124>
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d016      	beq.n	80080f0 <USBD_StdEPReq+0x150>
 80080c2:	e04b      	b.n	800815c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00d      	beq.n	80080e6 <USBD_StdEPReq+0x146>
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b80      	cmp	r3, #128	; 0x80
 80080ce:	d00a      	beq.n	80080e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 f931 	bl	800933c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080da:	2180      	movs	r1, #128	; 0x80
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 f92d 	bl	800933c <USBD_LL_StallEP>
 80080e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080e4:	e040      	b.n	8008168 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fc3e 	bl	800896a <USBD_CtlError>
              break;
 80080ee:	e03b      	b.n	8008168 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	885b      	ldrh	r3, [r3, #2]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d136      	bne.n	8008166 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f937 	bl	800937a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fcf7 	bl	8008b00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fde2 	bl	8007ce0 <USBD_CoreFindEP>
 800811c:	4603      	mov	r3, r0
 800811e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008120:	7b7b      	ldrb	r3, [r7, #13]
 8008122:	2bff      	cmp	r3, #255	; 0xff
 8008124:	d01f      	beq.n	8008166 <USBD_StdEPReq+0x1c6>
 8008126:	7b7b      	ldrb	r3, [r7, #13]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11c      	bne.n	8008166 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800812c:	7b7a      	ldrb	r2, [r7, #13]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008134:	7b7a      	ldrb	r2, [r7, #13]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	; 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008144:	7b7a      	ldrb	r2, [r7, #13]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32ae      	adds	r2, #174	; 0xae
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800815a:	e004      	b.n	8008166 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc03 	bl	800896a <USBD_CtlError>
              break;
 8008164:	e000      	b.n	8008168 <USBD_StdEPReq+0x1c8>
              break;
 8008166:	bf00      	nop
          }
          break;
 8008168:	e0ab      	b.n	80082c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d002      	beq.n	800817c <USBD_StdEPReq+0x1dc>
 8008176:	2b03      	cmp	r3, #3
 8008178:	d032      	beq.n	80081e0 <USBD_StdEPReq+0x240>
 800817a:	e097      	b.n	80082ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d007      	beq.n	8008192 <USBD_StdEPReq+0x1f2>
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	2b80      	cmp	r3, #128	; 0x80
 8008186:	d004      	beq.n	8008192 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fbed 	bl	800896a <USBD_CtlError>
                break;
 8008190:	e091      	b.n	80082b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	da0b      	bge.n	80081b2 <USBD_StdEPReq+0x212>
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	3310      	adds	r3, #16
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	e00b      	b.n	80081ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	3304      	adds	r3, #4
 80081ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2202      	movs	r2, #2
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fc37 	bl	8008a4c <USBD_CtlSendData>
              break;
 80081de:	e06a      	b.n	80082b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da11      	bge.n	800820c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	f003 020f 	and.w	r2, r3, #15
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d117      	bne.n	8008232 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fbb0 	bl	800896a <USBD_CtlError>
                  break;
 800820a:	e054      	b.n	80082b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	f003 020f 	and.w	r2, r3, #15
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fb9d 	bl	800896a <USBD_CtlError>
                  break;
 8008230:	e041      	b.n	80082b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008236:	2b00      	cmp	r3, #0
 8008238:	da0b      	bge.n	8008252 <USBD_StdEPReq+0x2b2>
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	3310      	adds	r3, #16
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	3304      	adds	r3, #4
 8008250:	e00b      	b.n	800826a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	3304      	adds	r3, #4
 800826a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <USBD_StdEPReq+0x2d8>
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b80      	cmp	r3, #128	; 0x80
 8008276:	d103      	bne.n	8008280 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e00e      	b.n	800829e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f897 	bl	80093b8 <USBD_LL_IsStallEP>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2201      	movs	r2, #1
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	e002      	b.n	800829e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2202      	movs	r2, #2
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fbd1 	bl	8008a4c <USBD_CtlSendData>
              break;
 80082aa:	e004      	b.n	80082b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fb5b 	bl	800896a <USBD_CtlError>
              break;
 80082b4:	bf00      	nop
          }
          break;
 80082b6:	e004      	b.n	80082c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb55 	bl	800896a <USBD_CtlError>
          break;
 80082c0:	bf00      	nop
      }
      break;
 80082c2:	e005      	b.n	80082d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fb4f 	bl	800896a <USBD_CtlError>
      break;
 80082cc:	e000      	b.n	80082d0 <USBD_StdEPReq+0x330>
      break;
 80082ce:	bf00      	nop
  }

  return ret;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	2b06      	cmp	r3, #6
 80082fe:	f200 8128 	bhi.w	8008552 <USBD_GetDescriptor+0x276>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_GetDescriptor+0x2c>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008325 	.word	0x08008325
 800830c:	0800833d 	.word	0x0800833d
 8008310:	0800837d 	.word	0x0800837d
 8008314:	08008553 	.word	0x08008553
 8008318:	08008553 	.word	0x08008553
 800831c:	080084f3 	.word	0x080084f3
 8008320:	0800851f 	.word	0x0800851f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
      break;
 800833a:	e112      	b.n	8008562 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7c1b      	ldrb	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10d      	bne.n	8008360 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f107 0208 	add.w	r2, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	2202      	movs	r2, #2
 800835c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800835e:	e100      	b.n	8008562 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	f107 0208 	add.w	r2, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3301      	adds	r3, #1
 8008376:	2202      	movs	r2, #2
 8008378:	701a      	strb	r2, [r3, #0]
      break;
 800837a:	e0f2      	b.n	8008562 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b05      	cmp	r3, #5
 8008384:	f200 80ac 	bhi.w	80084e0 <USBD_GetDescriptor+0x204>
 8008388:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <USBD_GetDescriptor+0xb4>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	080083a9 	.word	0x080083a9
 8008394:	080083dd 	.word	0x080083dd
 8008398:	08008411 	.word	0x08008411
 800839c:	08008445 	.word	0x08008445
 80083a0:	08008479 	.word	0x08008479
 80083a4:	080084ad 	.word	0x080084ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e091      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 facb 	bl	800896a <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e089      	b.n	80084f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fe:	e077      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fab1 	bl	800896a <USBD_CtlError>
            err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
          break;
 800840e:	e06f      	b.n	80084f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008432:	e05d      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa97 	bl	800896a <USBD_CtlError>
            err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
          break;
 8008442:	e055      	b.n	80084f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	7c12      	ldrb	r2, [r2, #16]
 800845c:	f107 0108 	add.w	r1, r7, #8
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008466:	e043      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa7d 	bl	800896a <USBD_CtlError>
            err++;
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	3301      	adds	r3, #1
 8008474:	72fb      	strb	r3, [r7, #11]
          break;
 8008476:	e03b      	b.n	80084f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00b      	beq.n	800849c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	7c12      	ldrb	r2, [r2, #16]
 8008490:	f107 0108 	add.w	r1, r7, #8
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800849a:	e029      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa63 	bl	800896a <USBD_CtlError>
            err++;
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	3301      	adds	r3, #1
 80084a8:	72fb      	strb	r3, [r7, #11]
          break;
 80084aa:	e021      	b.n	80084f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	7c12      	ldrb	r2, [r2, #16]
 80084c4:	f107 0108 	add.w	r1, r7, #8
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
 80084cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ce:	e00f      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa49 	bl	800896a <USBD_CtlError>
            err++;
 80084d8:	7afb      	ldrb	r3, [r7, #11]
 80084da:	3301      	adds	r3, #1
 80084dc:	72fb      	strb	r3, [r7, #11]
          break;
 80084de:	e007      	b.n	80084f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa41 	bl	800896a <USBD_CtlError>
          err++;
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	3301      	adds	r3, #1
 80084ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80084ee:	bf00      	nop
      }
      break;
 80084f0:	e037      	b.n	8008562 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	7c1b      	ldrb	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	f107 0208 	add.w	r2, r7, #8
 8008506:	4610      	mov	r0, r2
 8008508:	4798      	blx	r3
 800850a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800850c:	e029      	b.n	8008562 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa2a 	bl	800896a <USBD_CtlError>
        err++;
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	3301      	adds	r3, #1
 800851a:	72fb      	strb	r3, [r7, #11]
      break;
 800851c:	e021      	b.n	8008562 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	7c1b      	ldrb	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10d      	bne.n	8008542 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f107 0208 	add.w	r2, r7, #8
 8008532:	4610      	mov	r0, r2
 8008534:	4798      	blx	r3
 8008536:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	2207      	movs	r2, #7
 800853e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008540:	e00f      	b.n	8008562 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa10 	bl	800896a <USBD_CtlError>
        err++;
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	3301      	adds	r3, #1
 800854e:	72fb      	strb	r3, [r7, #11]
      break;
 8008550:	e007      	b.n	8008562 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa08 	bl	800896a <USBD_CtlError>
      err++;
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	3301      	adds	r3, #1
 800855e:	72fb      	strb	r3, [r7, #11]
      break;
 8008560:	bf00      	nop
  }

  if (err != 0U)
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11e      	bne.n	80085a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	88db      	ldrh	r3, [r3, #6]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d016      	beq.n	800859e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008570:	893b      	ldrh	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00e      	beq.n	8008594 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	88da      	ldrh	r2, [r3, #6]
 800857a:	893b      	ldrh	r3, [r7, #8]
 800857c:	4293      	cmp	r3, r2
 800857e:	bf28      	it	cs
 8008580:	4613      	movcs	r3, r2
 8008582:	b29b      	uxth	r3, r3
 8008584:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008586:	893b      	ldrh	r3, [r7, #8]
 8008588:	461a      	mov	r2, r3
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa5d 	bl	8008a4c <USBD_CtlSendData>
 8008592:	e009      	b.n	80085a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9e7 	bl	800896a <USBD_CtlError>
 800859c:	e004      	b.n	80085a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 faae 	bl	8008b00 <USBD_CtlSendStatus>
 80085a4:	e000      	b.n	80085a8 <USBD_GetDescriptor+0x2cc>
    return;
 80085a6:	bf00      	nop
  }
}
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop

080085b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	889b      	ldrh	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d131      	bne.n	8008626 <USBD_SetAddress+0x76>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	88db      	ldrh	r3, [r3, #6]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12d      	bne.n	8008626 <USBD_SetAddress+0x76>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	2b7f      	cmp	r3, #127	; 0x7f
 80085d0:	d829      	bhi.n	8008626 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d104      	bne.n	80085f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f9bc 	bl	800896a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f2:	e01d      	b.n	8008630 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7bfa      	ldrb	r2, [r7, #15]
 80085f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 ff05 	bl	8009410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa7a 	bl	8008b00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861a:	e009      	b.n	8008630 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008624:	e004      	b.n	8008630 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f99e 	bl	800896a <USBD_CtlError>
  }
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	4b4e      	ldr	r3, [pc, #312]	; (8008788 <USBD_SetConfig+0x150>)
 800864e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008650:	4b4d      	ldr	r3, [pc, #308]	; (8008788 <USBD_SetConfig+0x150>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d905      	bls.n	8008664 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f985 	bl	800896a <USBD_CtlError>
    return USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	e08c      	b.n	800877e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d002      	beq.n	8008676 <USBD_SetConfig+0x3e>
 8008670:	2b03      	cmp	r3, #3
 8008672:	d029      	beq.n	80086c8 <USBD_SetConfig+0x90>
 8008674:	e075      	b.n	8008762 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008676:	4b44      	ldr	r3, [pc, #272]	; (8008788 <USBD_SetConfig+0x150>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800867e:	4b42      	ldr	r3, [pc, #264]	; (8008788 <USBD_SetConfig+0x150>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008688:	4b3f      	ldr	r3, [pc, #252]	; (8008788 <USBD_SetConfig+0x150>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fe ffe7 	bl	8007662 <USBD_SetClassConfig>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f962 	bl	800896a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2202      	movs	r2, #2
 80086aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086ae:	e065      	b.n	800877c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa25 	bl	8008b00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2203      	movs	r2, #3
 80086ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086be:	e05d      	b.n	800877c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fa1d 	bl	8008b00 <USBD_CtlSendStatus>
      break;
 80086c6:	e059      	b.n	800877c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086c8:	4b2f      	ldr	r3, [pc, #188]	; (8008788 <USBD_SetConfig+0x150>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d112      	bne.n	80086f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086d8:	4b2b      	ldr	r3, [pc, #172]	; (8008788 <USBD_SetConfig+0x150>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086e2:	4b29      	ldr	r3, [pc, #164]	; (8008788 <USBD_SetConfig+0x150>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fe ffd6 	bl	800769a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa06 	bl	8008b00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086f4:	e042      	b.n	800877c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80086f6:	4b24      	ldr	r3, [pc, #144]	; (8008788 <USBD_SetConfig+0x150>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d02a      	beq.n	800875a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7fe ffc4 	bl	800769a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <USBD_SetConfig+0x150>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800871c:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <USBD_SetConfig+0x150>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7fe ff9d 	bl	8007662 <USBD_SetClassConfig>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00f      	beq.n	8008752 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f918 	bl	800896a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fe ffa9 	bl	800769a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008750:	e014      	b.n	800877c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f9d4 	bl	8008b00 <USBD_CtlSendStatus>
      break;
 8008758:	e010      	b.n	800877c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9d0 	bl	8008b00 <USBD_CtlSendStatus>
      break;
 8008760:	e00c      	b.n	800877c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f900 	bl	800896a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800876a:	4b07      	ldr	r3, [pc, #28]	; (8008788 <USBD_SetConfig+0x150>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7fe ff92 	bl	800769a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008776:	2303      	movs	r3, #3
 8008778:	73fb      	strb	r3, [r7, #15]
      break;
 800877a:	bf00      	nop
  }

  return ret;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200003f8 	.word	0x200003f8

0800878c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	88db      	ldrh	r3, [r3, #6]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d004      	beq.n	80087a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8e2 	bl	800896a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087a6:	e023      	b.n	80087f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	dc02      	bgt.n	80087ba <USBD_GetConfig+0x2e>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dc03      	bgt.n	80087c0 <USBD_GetConfig+0x34>
 80087b8:	e015      	b.n	80087e6 <USBD_GetConfig+0x5a>
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d00b      	beq.n	80087d6 <USBD_GetConfig+0x4a>
 80087be:	e012      	b.n	80087e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3308      	adds	r3, #8
 80087ca:	2201      	movs	r2, #1
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f93c 	bl	8008a4c <USBD_CtlSendData>
        break;
 80087d4:	e00c      	b.n	80087f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3304      	adds	r3, #4
 80087da:	2201      	movs	r2, #1
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f934 	bl	8008a4c <USBD_CtlSendData>
        break;
 80087e4:	e004      	b.n	80087f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f8be 	bl	800896a <USBD_CtlError>
        break;
 80087ee:	bf00      	nop
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	b2db      	uxtb	r3, r3
 800880a:	3b01      	subs	r3, #1
 800880c:	2b02      	cmp	r3, #2
 800880e:	d81e      	bhi.n	800884e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	88db      	ldrh	r3, [r3, #6]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d004      	beq.n	8008822 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8a5 	bl	800896a <USBD_CtlError>
        break;
 8008820:	e01a      	b.n	8008858 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f043 0202 	orr.w	r2, r3, #2
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	330c      	adds	r3, #12
 8008842:	2202      	movs	r2, #2
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f900 	bl	8008a4c <USBD_CtlSendData>
      break;
 800884c:	e004      	b.n	8008858 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f88a 	bl	800896a <USBD_CtlError>
      break;
 8008856:	bf00      	nop
  }
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d107      	bne.n	8008882 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f940 	bl	8008b00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008880:	e013      	b.n	80088aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	885b      	ldrh	r3, [r3, #2]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d10b      	bne.n	80088a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	889b      	ldrh	r3, [r3, #4]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	b2da      	uxtb	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f930 	bl	8008b00 <USBD_CtlSendStatus>
}
 80088a0:	e003      	b.n	80088aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f860 	bl	800896a <USBD_CtlError>
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d80b      	bhi.n	80088e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	885b      	ldrh	r3, [r3, #2]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d10c      	bne.n	80088ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f910 	bl	8008b00 <USBD_CtlSendStatus>
      }
      break;
 80088e0:	e004      	b.n	80088ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f840 	bl	800896a <USBD_CtlError>
      break;
 80088ea:	e000      	b.n	80088ee <USBD_ClrFeature+0x3c>
      break;
 80088ec:	bf00      	nop
  }
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff fa41 	bl	8007da8 <SWAPBYTE>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fa34 	bl	8007da8 <SWAPBYTE>
 8008940:	4603      	mov	r3, r0
 8008942:	461a      	mov	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3301      	adds	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7ff fa27 	bl	8007da8 <SWAPBYTE>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	80da      	strh	r2, [r3, #6]
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008974:	2180      	movs	r1, #128	; 0x80
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fce0 	bl	800933c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800897c:	2100      	movs	r1, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fcdc 	bl	800933c <USBD_LL_StallEP>
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d036      	beq.n	8008a10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089a6:	6938      	ldr	r0, [r7, #16]
 80089a8:	f000 f836 	bl	8008a18 <USBD_GetLen>
 80089ac:	4603      	mov	r3, r0
 80089ae:	3301      	adds	r3, #1
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	4413      	add	r3, r2
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	7812      	ldrb	r2, [r2, #0]
 80089c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	3301      	adds	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	4413      	add	r3, r2
 80089d2:	2203      	movs	r2, #3
 80089d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	3301      	adds	r3, #1
 80089da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089dc:	e013      	b.n	8008a06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	7812      	ldrb	r2, [r2, #0]
 80089e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
    idx++;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	3301      	adds	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	4413      	add	r3, r2
 80089fc:	2200      	movs	r2, #0
 80089fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	3301      	adds	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e7      	bne.n	80089de <USBD_GetString+0x52>
 8008a0e:	e000      	b.n	8008a12 <USBD_GetString+0x86>
    return;
 8008a10:	bf00      	nop
  }
}
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a28:	e005      	b.n	8008a36 <USBD_GetLen+0x1e>
  {
    len++;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f5      	bne.n	8008a2a <USBD_GetLen+0x12>
  }

  return len;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	2100      	movs	r1, #0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fceb 	bl	800944e <USBD_LL_Transmit>

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fcda 	bl	800944e <USBD_LL_Transmit>

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	2100      	movs	r1, #0
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 fcde 	bl	8009490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b084      	sub	sp, #16
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	2100      	movs	r1, #0
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fccd 	bl	8009490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b10:	2300      	movs	r3, #0
 8008b12:	2200      	movs	r2, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fc99 	bl	800944e <USBD_LL_Transmit>

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2205      	movs	r2, #5
 8008b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b36:	2300      	movs	r3, #0
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fca7 	bl	8009490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b50:	2200      	movs	r2, #0
 8008b52:	4912      	ldr	r1, [pc, #72]	; (8008b9c <MX_USB_DEVICE_Init+0x50>)
 8008b54:	4812      	ldr	r0, [pc, #72]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b56:	f7fe fd07 	bl	8007568 <USBD_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b60:	f7f8 fb9a 	bl	8001298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b64:	490f      	ldr	r1, [pc, #60]	; (8008ba4 <MX_USB_DEVICE_Init+0x58>)
 8008b66:	480e      	ldr	r0, [pc, #56]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b68:	f7fe fd2e 	bl	80075c8 <USBD_RegisterClass>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b72:	f7f8 fb91 	bl	8001298 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b76:	490c      	ldr	r1, [pc, #48]	; (8008ba8 <MX_USB_DEVICE_Init+0x5c>)
 8008b78:	4809      	ldr	r0, [pc, #36]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b7a:	f7fe fc1f 	bl	80073bc <USBD_CDC_RegisterInterface>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b84:	f7f8 fb88 	bl	8001298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b88:	4805      	ldr	r0, [pc, #20]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b8a:	f7fe fd53 	bl	8007634 <USBD_Start>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b94:	f7f8 fb80 	bl	8001298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b98:	bf00      	nop
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	200000ac 	.word	0x200000ac
 8008ba0:	200003fc 	.word	0x200003fc
 8008ba4:	20000018 	.word	0x20000018
 8008ba8:	20000098 	.word	0x20000098

08008bac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4905      	ldr	r1, [pc, #20]	; (8008bc8 <CDC_Init_FS+0x1c>)
 8008bb4:	4805      	ldr	r0, [pc, #20]	; (8008bcc <CDC_Init_FS+0x20>)
 8008bb6:	f7fe fc1b 	bl	80073f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bba:	4905      	ldr	r1, [pc, #20]	; (8008bd0 <CDC_Init_FS+0x24>)
 8008bbc:	4803      	ldr	r0, [pc, #12]	; (8008bcc <CDC_Init_FS+0x20>)
 8008bbe:	f7fe fc39 	bl	8007434 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	20000ed8 	.word	0x20000ed8
 8008bcc:	200003fc 	.word	0x200003fc
 8008bd0:	200006d8 	.word	0x200006d8

08008bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b23      	cmp	r3, #35	; 0x23
 8008bf8:	d84a      	bhi.n	8008c90 <CDC_Control_FS+0xac>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <CDC_Control_FS+0x1c>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c91 	.word	0x08008c91
 8008c04:	08008c91 	.word	0x08008c91
 8008c08:	08008c91 	.word	0x08008c91
 8008c0c:	08008c91 	.word	0x08008c91
 8008c10:	08008c91 	.word	0x08008c91
 8008c14:	08008c91 	.word	0x08008c91
 8008c18:	08008c91 	.word	0x08008c91
 8008c1c:	08008c91 	.word	0x08008c91
 8008c20:	08008c91 	.word	0x08008c91
 8008c24:	08008c91 	.word	0x08008c91
 8008c28:	08008c91 	.word	0x08008c91
 8008c2c:	08008c91 	.word	0x08008c91
 8008c30:	08008c91 	.word	0x08008c91
 8008c34:	08008c91 	.word	0x08008c91
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008c91 	.word	0x08008c91
 8008c44:	08008c91 	.word	0x08008c91
 8008c48:	08008c91 	.word	0x08008c91
 8008c4c:	08008c91 	.word	0x08008c91
 8008c50:	08008c91 	.word	0x08008c91
 8008c54:	08008c91 	.word	0x08008c91
 8008c58:	08008c91 	.word	0x08008c91
 8008c5c:	08008c91 	.word	0x08008c91
 8008c60:	08008c91 	.word	0x08008c91
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	08008c91 	.word	0x08008c91
 8008c7c:	08008c91 	.word	0x08008c91
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008c91 	.word	0x08008c91
 8008c88:	08008c91 	.word	0x08008c91
 8008c8c:	08008c91 	.word	0x08008c91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c90:	bf00      	nop
  }

  return (USBD_OK);
 8008c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <CDC_Receive_FS+0x24>)
 8008cae:	f7fe fbc1 	bl	8007434 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cb2:	4804      	ldr	r0, [pc, #16]	; (8008cc4 <CDC_Receive_FS+0x24>)
 8008cb4:	f7fe fc22 	bl	80074fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	200003fc 	.word	0x200003fc

08008cc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008cd8:	4b0d      	ldr	r3, [pc, #52]	; (8008d10 <CDC_Transmit_FS+0x48>)
 8008cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e00b      	b.n	8008d06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008cee:	887b      	ldrh	r3, [r7, #2]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	4806      	ldr	r0, [pc, #24]	; (8008d10 <CDC_Transmit_FS+0x48>)
 8008cf6:	f7fe fb7b 	bl	80073f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <CDC_Transmit_FS+0x48>)
 8008cfc:	f7fe fbb8 	bl	8007470 <USBD_CDC_TransmitPacket>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	200003fc 	.word	0x200003fc

08008d14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
	...

08008d38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2212      	movs	r2, #18
 8008d48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d4a:	4b03      	ldr	r3, [pc, #12]	; (8008d58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	200000c8 	.word	0x200000c8

08008d5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2204      	movs	r2, #4
 8008d6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200000dc 	.word	0x200000dc

08008d80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4907      	ldr	r1, [pc, #28]	; (8008db4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d96:	4808      	ldr	r0, [pc, #32]	; (8008db8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d98:	f7ff fdf8 	bl	800898c <USBD_GetString>
 8008d9c:	e004      	b.n	8008da8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	4904      	ldr	r1, [pc, #16]	; (8008db4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008da2:	4805      	ldr	r0, [pc, #20]	; (8008db8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008da4:	f7ff fdf2 	bl	800898c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	200016d8 	.word	0x200016d8
 8008db8:	0800c168 	.word	0x0800c168

08008dbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6039      	str	r1, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	4904      	ldr	r1, [pc, #16]	; (8008ddc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dcc:	4804      	ldr	r0, [pc, #16]	; (8008de0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dce:	f7ff fddd 	bl	800898c <USBD_GetString>
  return USBD_StrDesc;
 8008dd2:	4b02      	ldr	r3, [pc, #8]	; (8008ddc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	200016d8 	.word	0x200016d8
 8008de0:	0800c170 	.word	0x0800c170

08008de4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	221a      	movs	r2, #26
 8008df4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008df6:	f000 f843 	bl	8008e80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dfa:	4b02      	ldr	r3, [pc, #8]	; (8008e04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	200000e0 	.word	0x200000e0

08008e08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	4907      	ldr	r1, [pc, #28]	; (8008e3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e1e:	4808      	ldr	r0, [pc, #32]	; (8008e40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e20:	f7ff fdb4 	bl	800898c <USBD_GetString>
 8008e24:	e004      	b.n	8008e30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	4904      	ldr	r1, [pc, #16]	; (8008e3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e2a:	4805      	ldr	r0, [pc, #20]	; (8008e40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e2c:	f7ff fdae 	bl	800898c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e30:	4b02      	ldr	r3, [pc, #8]	; (8008e3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	200016d8 	.word	0x200016d8
 8008e40:	0800c184 	.word	0x0800c184

08008e44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4907      	ldr	r1, [pc, #28]	; (8008e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e5a:	4808      	ldr	r0, [pc, #32]	; (8008e7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e5c:	f7ff fd96 	bl	800898c <USBD_GetString>
 8008e60:	e004      	b.n	8008e6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4904      	ldr	r1, [pc, #16]	; (8008e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e68:	f7ff fd90 	bl	800898c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	200016d8 	.word	0x200016d8
 8008e7c:	0800c190 	.word	0x0800c190

08008e80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <Get_SerialNum+0x44>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <Get_SerialNum+0x48>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e92:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <Get_SerialNum+0x4c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	4909      	ldr	r1, [pc, #36]	; (8008ed0 <Get_SerialNum+0x50>)
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 f814 	bl	8008ed8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	4908      	ldr	r1, [pc, #32]	; (8008ed4 <Get_SerialNum+0x54>)
 8008eb4:	68b8      	ldr	r0, [r7, #8]
 8008eb6:	f000 f80f 	bl	8008ed8 <IntToUnicode>
  }
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	1fff7a10 	.word	0x1fff7a10
 8008ec8:	1fff7a14 	.word	0x1fff7a14
 8008ecc:	1fff7a18 	.word	0x1fff7a18
 8008ed0:	200000e2 	.word	0x200000e2
 8008ed4:	200000f2 	.word	0x200000f2

08008ed8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]
 8008eee:	e027      	b.n	8008f40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	0f1b      	lsrs	r3, r3, #28
 8008ef4:	2b09      	cmp	r3, #9
 8008ef6:	d80b      	bhi.n	8008f10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	0f1b      	lsrs	r3, r3, #28
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	4619      	mov	r1, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	440b      	add	r3, r1
 8008f08:	3230      	adds	r2, #48	; 0x30
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	e00a      	b.n	8008f26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	0f1b      	lsrs	r3, r3, #28
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	440b      	add	r3, r1
 8008f20:	3237      	adds	r2, #55	; 0x37
 8008f22:	b2d2      	uxtb	r2, r2
 8008f24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	3301      	adds	r3, #1
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	4413      	add	r3, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
 8008f40:	7dfa      	ldrb	r2, [r7, #23]
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3d3      	bcc.n	8008ef0 <IntToUnicode+0x18>
  }
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
	...

08008f58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f60:	f107 0314 	add.w	r3, r7, #20
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
 8008f6c:	60da      	str	r2, [r3, #12]
 8008f6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f78:	d13a      	bne.n	8008ff0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	4b1e      	ldr	r3, [pc, #120]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	4a1d      	ldr	r2, [pc, #116]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008f84:	f043 0301 	orr.w	r3, r3, #1
 8008f88:	6313      	str	r3, [r2, #48]	; 0x30
 8008f8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	613b      	str	r3, [r7, #16]
 8008f94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fa8:	230a      	movs	r3, #10
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fac:	f107 0314 	add.w	r3, r7, #20
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4812      	ldr	r0, [pc, #72]	; (8008ffc <HAL_PCD_MspInit+0xa4>)
 8008fb4:	f7f9 fdf4 	bl	8002ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fb8:	4b0f      	ldr	r3, [pc, #60]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbc:	4a0e      	ldr	r2, [pc, #56]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc2:	6353      	str	r3, [r2, #52]	; 0x34
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fcc:	4a0a      	ldr	r2, [pc, #40]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8008fd4:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <HAL_PCD_MspInit+0xa0>)
 8008fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	2043      	movs	r0, #67	; 0x43
 8008fe6:	f7f9 fa34 	bl	8002452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fea:	2043      	movs	r0, #67	; 0x43
 8008fec:	f7f9 fa4d 	bl	800248a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40020000 	.word	0x40020000

08009000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f7fe fb59 	bl	80076ce <USBD_LL_SetupStage>
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4613      	mov	r3, r2
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	4619      	mov	r1, r3
 800904e:	f7fe fb93 	bl	8007778 <USBD_LL_DataOutStage>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	4613      	mov	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	334c      	adds	r3, #76	; 0x4c
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	4619      	mov	r1, r3
 8009082:	f7fe fc2c 	bl	80078de <USBD_LL_DataInStage>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fd60 	bl	8007b62 <USBD_LL_SOF>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090b2:	2301      	movs	r3, #1
 80090b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	e008      	b.n	80090d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d102      	bne.n	80090d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e001      	b.n	80090d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80090d2:	f7f8 f8e1 	bl	8001298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090dc:	7bfa      	ldrb	r2, [r7, #15]
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fd00 	bl	8007ae6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fca8 	bl	8007a42 <USBD_LL_Reset>
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fcfb 	bl	8007b06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6812      	ldr	r2, [r2, #0]
 800911e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <HAL_PCD_SuspendCallback+0x48>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	4a03      	ldr	r2, [pc, #12]	; (8009144 <HAL_PCD_SuspendCallback+0x48>)
 8009136:	f043 0306 	orr.w	r3, r3, #6
 800913a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	e000ed00 	.word	0xe000ed00

08009148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fceb 	bl	8007b32 <USBD_LL_Resume>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009176:	78fa      	ldrb	r2, [r7, #3]
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe fd43 	bl	8007c06 <USBD_LL_IsoOUTIncomplete>
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fcff 	bl	8007ba2 <USBD_LL_IsoINIncomplete>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe fd55 	bl	8007c6a <USBD_LL_DevConnected>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fd52 	bl	8007c80 <USBD_LL_DevDisconnected>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d13c      	bne.n	800926e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091f4:	4a20      	ldr	r2, [pc, #128]	; (8009278 <USBD_LL_Init+0x94>)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <USBD_LL_Init+0x94>)
 8009200:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009204:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <USBD_LL_Init+0x94>)
 8009206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800920a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800920c:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <USBD_LL_Init+0x94>)
 800920e:	2204      	movs	r2, #4
 8009210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009212:	4b19      	ldr	r3, [pc, #100]	; (8009278 <USBD_LL_Init+0x94>)
 8009214:	2202      	movs	r2, #2
 8009216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009218:	4b17      	ldr	r3, [pc, #92]	; (8009278 <USBD_LL_Init+0x94>)
 800921a:	2200      	movs	r2, #0
 800921c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800921e:	4b16      	ldr	r3, [pc, #88]	; (8009278 <USBD_LL_Init+0x94>)
 8009220:	2202      	movs	r2, #2
 8009222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009224:	4b14      	ldr	r3, [pc, #80]	; (8009278 <USBD_LL_Init+0x94>)
 8009226:	2200      	movs	r2, #0
 8009228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <USBD_LL_Init+0x94>)
 800922c:	2200      	movs	r2, #0
 800922e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009230:	4b11      	ldr	r3, [pc, #68]	; (8009278 <USBD_LL_Init+0x94>)
 8009232:	2200      	movs	r2, #0
 8009234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <USBD_LL_Init+0x94>)
 8009238:	2200      	movs	r2, #0
 800923a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800923c:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <USBD_LL_Init+0x94>)
 800923e:	2200      	movs	r2, #0
 8009240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009242:	480d      	ldr	r0, [pc, #52]	; (8009278 <USBD_LL_Init+0x94>)
 8009244:	f7f9 fe48 	bl	8002ed8 <HAL_PCD_Init>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800924e:	f7f8 f823 	bl	8001298 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	4808      	ldr	r0, [pc, #32]	; (8009278 <USBD_LL_Init+0x94>)
 8009256:	f7fb f8a0 	bl	800439a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800925a:	2240      	movs	r2, #64	; 0x40
 800925c:	2100      	movs	r1, #0
 800925e:	4806      	ldr	r0, [pc, #24]	; (8009278 <USBD_LL_Init+0x94>)
 8009260:	f7fb f854 	bl	800430c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009264:	2280      	movs	r2, #128	; 0x80
 8009266:	2101      	movs	r1, #1
 8009268:	4803      	ldr	r0, [pc, #12]	; (8009278 <USBD_LL_Init+0x94>)
 800926a:	f7fb f84f 	bl	800430c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	200018d8 	.word	0x200018d8

0800927c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009292:	4618      	mov	r0, r3
 8009294:	f7f9 ff3d 	bl	8003112 <HAL_PCD_Start>
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 f942 	bl	8009528 <USBD_Get_USB_Status>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	4608      	mov	r0, r1
 80092bc:	4611      	mov	r1, r2
 80092be:	461a      	mov	r2, r3
 80092c0:	4603      	mov	r3, r0
 80092c2:	70fb      	strb	r3, [r7, #3]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70bb      	strb	r3, [r7, #2]
 80092c8:	4613      	mov	r3, r2
 80092ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092da:	78bb      	ldrb	r3, [r7, #2]
 80092dc:	883a      	ldrh	r2, [r7, #0]
 80092de:	78f9      	ldrb	r1, [r7, #3]
 80092e0:	f7fa fc0e 	bl	8003b00 <HAL_PCD_EP_Open>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f91c 	bl	8009528 <USBD_Get_USB_Status>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7fa fc57 	bl	8003bd0 <HAL_PCD_EP_Close>
 8009322:	4603      	mov	r3, r0
 8009324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 f8fd 	bl	8009528 <USBD_Get_USB_Status>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009332:	7bbb      	ldrb	r3, [r7, #14]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	4611      	mov	r1, r2
 800935a:	4618      	mov	r0, r3
 800935c:	f7fa fd2f 	bl	8003dbe <HAL_PCD_EP_SetStall>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f8de 	bl	8009528 <USBD_Get_USB_Status>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009370:	7bbb      	ldrb	r3, [r7, #14]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f7fa fd74 	bl	8003e86 <HAL_PCD_EP_ClrStall>
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f8bf 	bl	8009528 <USBD_Get_USB_Status>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da0b      	bge.n	80093ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	4613      	mov	r3, r2
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	333e      	adds	r3, #62	; 0x3e
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	e00b      	b.n	8009404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	4613      	mov	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f7fa fb41 	bl	8003ab6 <HAL_PCD_SetAddress>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f874 	bl	8009528 <USBD_Get_USB_Status>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b086      	sub	sp, #24
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	460b      	mov	r3, r1
 800945c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800946c:	7af9      	ldrb	r1, [r7, #11]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	f7fa fc5a 	bl	8003d2a <HAL_PCD_EP_Transmit>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f853 	bl	8009528 <USBD_Get_USB_Status>
 8009482:	4603      	mov	r3, r0
 8009484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009486:	7dbb      	ldrb	r3, [r7, #22]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	460b      	mov	r3, r1
 800949e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094ae:	7af9      	ldrb	r1, [r7, #11]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	f7fa fbd6 	bl	8003c64 <HAL_PCD_EP_Receive>
 80094b8:	4603      	mov	r3, r0
 80094ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f832 	bl	8009528 <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fa fc06 	bl	8003cfa <HAL_PCD_EP_GetRxCount>
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009500:	4b03      	ldr	r3, [pc, #12]	; (8009510 <USBD_static_malloc+0x18>)
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20001de4 	.word	0x20001de4

08009514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]

}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d817      	bhi.n	800956c <USBD_Get_USB_Status+0x44>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <USBD_Get_USB_Status+0x1c>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009555 	.word	0x08009555
 8009548:	0800955b 	.word	0x0800955b
 800954c:	08009561 	.word	0x08009561
 8009550:	08009567 	.word	0x08009567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
    break;
 8009558:	e00b      	b.n	8009572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800955a:	2303      	movs	r3, #3
 800955c:	73fb      	strb	r3, [r7, #15]
    break;
 800955e:	e008      	b.n	8009572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009560:	2301      	movs	r3, #1
 8009562:	73fb      	strb	r3, [r7, #15]
    break;
 8009564:	e005      	b.n	8009572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	73fb      	strb	r3, [r7, #15]
    break;
 800956a:	e002      	b.n	8009572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	73fb      	strb	r3, [r7, #15]
    break;
 8009570:	bf00      	nop
  }
  return usb_status;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <__errno>:
 8009580:	4b01      	ldr	r3, [pc, #4]	; (8009588 <__errno+0x8>)
 8009582:	6818      	ldr	r0, [r3, #0]
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	200000fc 	.word	0x200000fc

0800958c <__libc_init_array>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	4d0d      	ldr	r5, [pc, #52]	; (80095c4 <__libc_init_array+0x38>)
 8009590:	4c0d      	ldr	r4, [pc, #52]	; (80095c8 <__libc_init_array+0x3c>)
 8009592:	1b64      	subs	r4, r4, r5
 8009594:	10a4      	asrs	r4, r4, #2
 8009596:	2600      	movs	r6, #0
 8009598:	42a6      	cmp	r6, r4
 800959a:	d109      	bne.n	80095b0 <__libc_init_array+0x24>
 800959c:	4d0b      	ldr	r5, [pc, #44]	; (80095cc <__libc_init_array+0x40>)
 800959e:	4c0c      	ldr	r4, [pc, #48]	; (80095d0 <__libc_init_array+0x44>)
 80095a0:	f002 fdc4 	bl	800c12c <_init>
 80095a4:	1b64      	subs	r4, r4, r5
 80095a6:	10a4      	asrs	r4, r4, #2
 80095a8:	2600      	movs	r6, #0
 80095aa:	42a6      	cmp	r6, r4
 80095ac:	d105      	bne.n	80095ba <__libc_init_array+0x2e>
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b4:	4798      	blx	r3
 80095b6:	3601      	adds	r6, #1
 80095b8:	e7ee      	b.n	8009598 <__libc_init_array+0xc>
 80095ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80095be:	4798      	blx	r3
 80095c0:	3601      	adds	r6, #1
 80095c2:	e7f2      	b.n	80095aa <__libc_init_array+0x1e>
 80095c4:	0800c59c 	.word	0x0800c59c
 80095c8:	0800c59c 	.word	0x0800c59c
 80095cc:	0800c59c 	.word	0x0800c59c
 80095d0:	0800c5a0 	.word	0x0800c5a0

080095d4 <memset>:
 80095d4:	4402      	add	r2, r0
 80095d6:	4603      	mov	r3, r0
 80095d8:	4293      	cmp	r3, r2
 80095da:	d100      	bne.n	80095de <memset+0xa>
 80095dc:	4770      	bx	lr
 80095de:	f803 1b01 	strb.w	r1, [r3], #1
 80095e2:	e7f9      	b.n	80095d8 <memset+0x4>

080095e4 <__cvt>:
 80095e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	ec55 4b10 	vmov	r4, r5, d0
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	460e      	mov	r6, r1
 80095f0:	4619      	mov	r1, r3
 80095f2:	462b      	mov	r3, r5
 80095f4:	bfbb      	ittet	lt
 80095f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095fa:	461d      	movlt	r5, r3
 80095fc:	2300      	movge	r3, #0
 80095fe:	232d      	movlt	r3, #45	; 0x2d
 8009600:	700b      	strb	r3, [r1, #0]
 8009602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009604:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009608:	4691      	mov	r9, r2
 800960a:	f023 0820 	bic.w	r8, r3, #32
 800960e:	bfbc      	itt	lt
 8009610:	4622      	movlt	r2, r4
 8009612:	4614      	movlt	r4, r2
 8009614:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009618:	d005      	beq.n	8009626 <__cvt+0x42>
 800961a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800961e:	d100      	bne.n	8009622 <__cvt+0x3e>
 8009620:	3601      	adds	r6, #1
 8009622:	2102      	movs	r1, #2
 8009624:	e000      	b.n	8009628 <__cvt+0x44>
 8009626:	2103      	movs	r1, #3
 8009628:	ab03      	add	r3, sp, #12
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	ab02      	add	r3, sp, #8
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	ec45 4b10 	vmov	d0, r4, r5
 8009634:	4653      	mov	r3, sl
 8009636:	4632      	mov	r2, r6
 8009638:	f000 fe1a 	bl	800a270 <_dtoa_r>
 800963c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009640:	4607      	mov	r7, r0
 8009642:	d102      	bne.n	800964a <__cvt+0x66>
 8009644:	f019 0f01 	tst.w	r9, #1
 8009648:	d022      	beq.n	8009690 <__cvt+0xac>
 800964a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800964e:	eb07 0906 	add.w	r9, r7, r6
 8009652:	d110      	bne.n	8009676 <__cvt+0x92>
 8009654:	783b      	ldrb	r3, [r7, #0]
 8009656:	2b30      	cmp	r3, #48	; 0x30
 8009658:	d10a      	bne.n	8009670 <__cvt+0x8c>
 800965a:	2200      	movs	r2, #0
 800965c:	2300      	movs	r3, #0
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f7f7 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009666:	b918      	cbnz	r0, 8009670 <__cvt+0x8c>
 8009668:	f1c6 0601 	rsb	r6, r6, #1
 800966c:	f8ca 6000 	str.w	r6, [sl]
 8009670:	f8da 3000 	ldr.w	r3, [sl]
 8009674:	4499      	add	r9, r3
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	f7f7 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8009682:	b108      	cbz	r0, 8009688 <__cvt+0xa4>
 8009684:	f8cd 900c 	str.w	r9, [sp, #12]
 8009688:	2230      	movs	r2, #48	; 0x30
 800968a:	9b03      	ldr	r3, [sp, #12]
 800968c:	454b      	cmp	r3, r9
 800968e:	d307      	bcc.n	80096a0 <__cvt+0xbc>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009694:	1bdb      	subs	r3, r3, r7
 8009696:	4638      	mov	r0, r7
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	b004      	add	sp, #16
 800969c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a0:	1c59      	adds	r1, r3, #1
 80096a2:	9103      	str	r1, [sp, #12]
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	e7f0      	b.n	800968a <__cvt+0xa6>

080096a8 <__exponent>:
 80096a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096aa:	4603      	mov	r3, r0
 80096ac:	2900      	cmp	r1, #0
 80096ae:	bfb8      	it	lt
 80096b0:	4249      	neglt	r1, r1
 80096b2:	f803 2b02 	strb.w	r2, [r3], #2
 80096b6:	bfb4      	ite	lt
 80096b8:	222d      	movlt	r2, #45	; 0x2d
 80096ba:	222b      	movge	r2, #43	; 0x2b
 80096bc:	2909      	cmp	r1, #9
 80096be:	7042      	strb	r2, [r0, #1]
 80096c0:	dd2a      	ble.n	8009718 <__exponent+0x70>
 80096c2:	f10d 0407 	add.w	r4, sp, #7
 80096c6:	46a4      	mov	ip, r4
 80096c8:	270a      	movs	r7, #10
 80096ca:	46a6      	mov	lr, r4
 80096cc:	460a      	mov	r2, r1
 80096ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80096d2:	fb07 1516 	mls	r5, r7, r6, r1
 80096d6:	3530      	adds	r5, #48	; 0x30
 80096d8:	2a63      	cmp	r2, #99	; 0x63
 80096da:	f104 34ff 	add.w	r4, r4, #4294967295
 80096de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096e2:	4631      	mov	r1, r6
 80096e4:	dcf1      	bgt.n	80096ca <__exponent+0x22>
 80096e6:	3130      	adds	r1, #48	; 0x30
 80096e8:	f1ae 0502 	sub.w	r5, lr, #2
 80096ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096f0:	1c44      	adds	r4, r0, #1
 80096f2:	4629      	mov	r1, r5
 80096f4:	4561      	cmp	r1, ip
 80096f6:	d30a      	bcc.n	800970e <__exponent+0x66>
 80096f8:	f10d 0209 	add.w	r2, sp, #9
 80096fc:	eba2 020e 	sub.w	r2, r2, lr
 8009700:	4565      	cmp	r5, ip
 8009702:	bf88      	it	hi
 8009704:	2200      	movhi	r2, #0
 8009706:	4413      	add	r3, r2
 8009708:	1a18      	subs	r0, r3, r0
 800970a:	b003      	add	sp, #12
 800970c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009712:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009716:	e7ed      	b.n	80096f4 <__exponent+0x4c>
 8009718:	2330      	movs	r3, #48	; 0x30
 800971a:	3130      	adds	r1, #48	; 0x30
 800971c:	7083      	strb	r3, [r0, #2]
 800971e:	70c1      	strb	r1, [r0, #3]
 8009720:	1d03      	adds	r3, r0, #4
 8009722:	e7f1      	b.n	8009708 <__exponent+0x60>

08009724 <_printf_float>:
 8009724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	ed2d 8b02 	vpush	{d8}
 800972c:	b08d      	sub	sp, #52	; 0x34
 800972e:	460c      	mov	r4, r1
 8009730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009734:	4616      	mov	r6, r2
 8009736:	461f      	mov	r7, r3
 8009738:	4605      	mov	r5, r0
 800973a:	f001 fd3f 	bl	800b1bc <_localeconv_r>
 800973e:	f8d0 a000 	ldr.w	sl, [r0]
 8009742:	4650      	mov	r0, sl
 8009744:	f7f6 fd44 	bl	80001d0 <strlen>
 8009748:	2300      	movs	r3, #0
 800974a:	930a      	str	r3, [sp, #40]	; 0x28
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	f8d8 3000 	ldr.w	r3, [r8]
 8009754:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009758:	3307      	adds	r3, #7
 800975a:	f023 0307 	bic.w	r3, r3, #7
 800975e:	f103 0208 	add.w	r2, r3, #8
 8009762:	f8c8 2000 	str.w	r2, [r8]
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800976e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	f8cd 8018 	str.w	r8, [sp, #24]
 800977c:	ee08 0a10 	vmov	s16, r0
 8009780:	4b9f      	ldr	r3, [pc, #636]	; (8009a00 <_printf_float+0x2dc>)
 8009782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009786:	f04f 32ff 	mov.w	r2, #4294967295
 800978a:	f7f7 f9cf 	bl	8000b2c <__aeabi_dcmpun>
 800978e:	bb88      	cbnz	r0, 80097f4 <_printf_float+0xd0>
 8009790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009794:	4b9a      	ldr	r3, [pc, #616]	; (8009a00 <_printf_float+0x2dc>)
 8009796:	f04f 32ff 	mov.w	r2, #4294967295
 800979a:	f7f7 f9a9 	bl	8000af0 <__aeabi_dcmple>
 800979e:	bb48      	cbnz	r0, 80097f4 <_printf_float+0xd0>
 80097a0:	2200      	movs	r2, #0
 80097a2:	2300      	movs	r3, #0
 80097a4:	4640      	mov	r0, r8
 80097a6:	4649      	mov	r1, r9
 80097a8:	f7f7 f998 	bl	8000adc <__aeabi_dcmplt>
 80097ac:	b110      	cbz	r0, 80097b4 <_printf_float+0x90>
 80097ae:	232d      	movs	r3, #45	; 0x2d
 80097b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b4:	4b93      	ldr	r3, [pc, #588]	; (8009a04 <_printf_float+0x2e0>)
 80097b6:	4894      	ldr	r0, [pc, #592]	; (8009a08 <_printf_float+0x2e4>)
 80097b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80097bc:	bf94      	ite	ls
 80097be:	4698      	movls	r8, r3
 80097c0:	4680      	movhi	r8, r0
 80097c2:	2303      	movs	r3, #3
 80097c4:	6123      	str	r3, [r4, #16]
 80097c6:	9b05      	ldr	r3, [sp, #20]
 80097c8:	f023 0204 	bic.w	r2, r3, #4
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	f04f 0900 	mov.w	r9, #0
 80097d2:	9700      	str	r7, [sp, #0]
 80097d4:	4633      	mov	r3, r6
 80097d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 f9d8 	bl	8009b90 <_printf_common>
 80097e0:	3001      	adds	r0, #1
 80097e2:	f040 8090 	bne.w	8009906 <_printf_float+0x1e2>
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ea:	b00d      	add	sp, #52	; 0x34
 80097ec:	ecbd 8b02 	vpop	{d8}
 80097f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f4:	4642      	mov	r2, r8
 80097f6:	464b      	mov	r3, r9
 80097f8:	4640      	mov	r0, r8
 80097fa:	4649      	mov	r1, r9
 80097fc:	f7f7 f996 	bl	8000b2c <__aeabi_dcmpun>
 8009800:	b140      	cbz	r0, 8009814 <_printf_float+0xf0>
 8009802:	464b      	mov	r3, r9
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfbc      	itt	lt
 8009808:	232d      	movlt	r3, #45	; 0x2d
 800980a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800980e:	487f      	ldr	r0, [pc, #508]	; (8009a0c <_printf_float+0x2e8>)
 8009810:	4b7f      	ldr	r3, [pc, #508]	; (8009a10 <_printf_float+0x2ec>)
 8009812:	e7d1      	b.n	80097b8 <_printf_float+0x94>
 8009814:	6863      	ldr	r3, [r4, #4]
 8009816:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800981a:	9206      	str	r2, [sp, #24]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	d13f      	bne.n	80098a0 <_printf_float+0x17c>
 8009820:	2306      	movs	r3, #6
 8009822:	6063      	str	r3, [r4, #4]
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	6861      	ldr	r1, [r4, #4]
 8009828:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800982c:	2300      	movs	r3, #0
 800982e:	9303      	str	r3, [sp, #12]
 8009830:	ab0a      	add	r3, sp, #40	; 0x28
 8009832:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009836:	ab09      	add	r3, sp, #36	; 0x24
 8009838:	ec49 8b10 	vmov	d0, r8, r9
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009844:	4628      	mov	r0, r5
 8009846:	f7ff fecd 	bl	80095e4 <__cvt>
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800984e:	2b47      	cmp	r3, #71	; 0x47
 8009850:	4680      	mov	r8, r0
 8009852:	d108      	bne.n	8009866 <_printf_float+0x142>
 8009854:	1cc8      	adds	r0, r1, #3
 8009856:	db02      	blt.n	800985e <_printf_float+0x13a>
 8009858:	6863      	ldr	r3, [r4, #4]
 800985a:	4299      	cmp	r1, r3
 800985c:	dd41      	ble.n	80098e2 <_printf_float+0x1be>
 800985e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009862:	fa5f fb8b 	uxtb.w	fp, fp
 8009866:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800986a:	d820      	bhi.n	80098ae <_printf_float+0x18a>
 800986c:	3901      	subs	r1, #1
 800986e:	465a      	mov	r2, fp
 8009870:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009874:	9109      	str	r1, [sp, #36]	; 0x24
 8009876:	f7ff ff17 	bl	80096a8 <__exponent>
 800987a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800987c:	1813      	adds	r3, r2, r0
 800987e:	2a01      	cmp	r2, #1
 8009880:	4681      	mov	r9, r0
 8009882:	6123      	str	r3, [r4, #16]
 8009884:	dc02      	bgt.n	800988c <_printf_float+0x168>
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	07d2      	lsls	r2, r2, #31
 800988a:	d501      	bpl.n	8009890 <_printf_float+0x16c>
 800988c:	3301      	adds	r3, #1
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009894:	2b00      	cmp	r3, #0
 8009896:	d09c      	beq.n	80097d2 <_printf_float+0xae>
 8009898:	232d      	movs	r3, #45	; 0x2d
 800989a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800989e:	e798      	b.n	80097d2 <_printf_float+0xae>
 80098a0:	9a06      	ldr	r2, [sp, #24]
 80098a2:	2a47      	cmp	r2, #71	; 0x47
 80098a4:	d1be      	bne.n	8009824 <_printf_float+0x100>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1bc      	bne.n	8009824 <_printf_float+0x100>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e7b9      	b.n	8009822 <_printf_float+0xfe>
 80098ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80098b2:	d118      	bne.n	80098e6 <_printf_float+0x1c2>
 80098b4:	2900      	cmp	r1, #0
 80098b6:	6863      	ldr	r3, [r4, #4]
 80098b8:	dd0b      	ble.n	80098d2 <_printf_float+0x1ae>
 80098ba:	6121      	str	r1, [r4, #16]
 80098bc:	b913      	cbnz	r3, 80098c4 <_printf_float+0x1a0>
 80098be:	6822      	ldr	r2, [r4, #0]
 80098c0:	07d0      	lsls	r0, r2, #31
 80098c2:	d502      	bpl.n	80098ca <_printf_float+0x1a6>
 80098c4:	3301      	adds	r3, #1
 80098c6:	440b      	add	r3, r1
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80098cc:	f04f 0900 	mov.w	r9, #0
 80098d0:	e7de      	b.n	8009890 <_printf_float+0x16c>
 80098d2:	b913      	cbnz	r3, 80098da <_printf_float+0x1b6>
 80098d4:	6822      	ldr	r2, [r4, #0]
 80098d6:	07d2      	lsls	r2, r2, #31
 80098d8:	d501      	bpl.n	80098de <_printf_float+0x1ba>
 80098da:	3302      	adds	r3, #2
 80098dc:	e7f4      	b.n	80098c8 <_printf_float+0x1a4>
 80098de:	2301      	movs	r3, #1
 80098e0:	e7f2      	b.n	80098c8 <_printf_float+0x1a4>
 80098e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80098e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e8:	4299      	cmp	r1, r3
 80098ea:	db05      	blt.n	80098f8 <_printf_float+0x1d4>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	6121      	str	r1, [r4, #16]
 80098f0:	07d8      	lsls	r0, r3, #31
 80098f2:	d5ea      	bpl.n	80098ca <_printf_float+0x1a6>
 80098f4:	1c4b      	adds	r3, r1, #1
 80098f6:	e7e7      	b.n	80098c8 <_printf_float+0x1a4>
 80098f8:	2900      	cmp	r1, #0
 80098fa:	bfd4      	ite	le
 80098fc:	f1c1 0202 	rsble	r2, r1, #2
 8009900:	2201      	movgt	r2, #1
 8009902:	4413      	add	r3, r2
 8009904:	e7e0      	b.n	80098c8 <_printf_float+0x1a4>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	055a      	lsls	r2, r3, #21
 800990a:	d407      	bmi.n	800991c <_printf_float+0x1f8>
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	4642      	mov	r2, r8
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	d12c      	bne.n	8009974 <_printf_float+0x250>
 800991a:	e764      	b.n	80097e6 <_printf_float+0xc2>
 800991c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009920:	f240 80e0 	bls.w	8009ae4 <_printf_float+0x3c0>
 8009924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009928:	2200      	movs	r2, #0
 800992a:	2300      	movs	r3, #0
 800992c:	f7f7 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009930:	2800      	cmp	r0, #0
 8009932:	d034      	beq.n	800999e <_printf_float+0x27a>
 8009934:	4a37      	ldr	r2, [pc, #220]	; (8009a14 <_printf_float+0x2f0>)
 8009936:	2301      	movs	r3, #1
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	f43f af51 	beq.w	80097e6 <_printf_float+0xc2>
 8009944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009948:	429a      	cmp	r2, r3
 800994a:	db02      	blt.n	8009952 <_printf_float+0x22e>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	07d8      	lsls	r0, r3, #31
 8009950:	d510      	bpl.n	8009974 <_printf_float+0x250>
 8009952:	ee18 3a10 	vmov	r3, s16
 8009956:	4652      	mov	r2, sl
 8009958:	4631      	mov	r1, r6
 800995a:	4628      	mov	r0, r5
 800995c:	47b8      	blx	r7
 800995e:	3001      	adds	r0, #1
 8009960:	f43f af41 	beq.w	80097e6 <_printf_float+0xc2>
 8009964:	f04f 0800 	mov.w	r8, #0
 8009968:	f104 091a 	add.w	r9, r4, #26
 800996c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800996e:	3b01      	subs	r3, #1
 8009970:	4543      	cmp	r3, r8
 8009972:	dc09      	bgt.n	8009988 <_printf_float+0x264>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	079b      	lsls	r3, r3, #30
 8009978:	f100 8105 	bmi.w	8009b86 <_printf_float+0x462>
 800997c:	68e0      	ldr	r0, [r4, #12]
 800997e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009980:	4298      	cmp	r0, r3
 8009982:	bfb8      	it	lt
 8009984:	4618      	movlt	r0, r3
 8009986:	e730      	b.n	80097ea <_printf_float+0xc6>
 8009988:	2301      	movs	r3, #1
 800998a:	464a      	mov	r2, r9
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f af27 	beq.w	80097e6 <_printf_float+0xc2>
 8009998:	f108 0801 	add.w	r8, r8, #1
 800999c:	e7e6      	b.n	800996c <_printf_float+0x248>
 800999e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc39      	bgt.n	8009a18 <_printf_float+0x2f4>
 80099a4:	4a1b      	ldr	r2, [pc, #108]	; (8009a14 <_printf_float+0x2f0>)
 80099a6:	2301      	movs	r3, #1
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f af19 	beq.w	80097e6 <_printf_float+0xc2>
 80099b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b8:	4313      	orrs	r3, r2
 80099ba:	d102      	bne.n	80099c2 <_printf_float+0x29e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	07d9      	lsls	r1, r3, #31
 80099c0:	d5d8      	bpl.n	8009974 <_printf_float+0x250>
 80099c2:	ee18 3a10 	vmov	r3, s16
 80099c6:	4652      	mov	r2, sl
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af09 	beq.w	80097e6 <_printf_float+0xc2>
 80099d4:	f04f 0900 	mov.w	r9, #0
 80099d8:	f104 0a1a 	add.w	sl, r4, #26
 80099dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099de:	425b      	negs	r3, r3
 80099e0:	454b      	cmp	r3, r9
 80099e2:	dc01      	bgt.n	80099e8 <_printf_float+0x2c4>
 80099e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e6:	e792      	b.n	800990e <_printf_float+0x1ea>
 80099e8:	2301      	movs	r3, #1
 80099ea:	4652      	mov	r2, sl
 80099ec:	4631      	mov	r1, r6
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b8      	blx	r7
 80099f2:	3001      	adds	r0, #1
 80099f4:	f43f aef7 	beq.w	80097e6 <_printf_float+0xc2>
 80099f8:	f109 0901 	add.w	r9, r9, #1
 80099fc:	e7ee      	b.n	80099dc <_printf_float+0x2b8>
 80099fe:	bf00      	nop
 8009a00:	7fefffff 	.word	0x7fefffff
 8009a04:	0800c1bc 	.word	0x0800c1bc
 8009a08:	0800c1c0 	.word	0x0800c1c0
 8009a0c:	0800c1c8 	.word	0x0800c1c8
 8009a10:	0800c1c4 	.word	0x0800c1c4
 8009a14:	0800c1cc 	.word	0x0800c1cc
 8009a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	bfa8      	it	ge
 8009a20:	461a      	movge	r2, r3
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	4691      	mov	r9, r2
 8009a26:	dc37      	bgt.n	8009a98 <_printf_float+0x374>
 8009a28:	f04f 0b00 	mov.w	fp, #0
 8009a2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a30:	f104 021a 	add.w	r2, r4, #26
 8009a34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a36:	9305      	str	r3, [sp, #20]
 8009a38:	eba3 0309 	sub.w	r3, r3, r9
 8009a3c:	455b      	cmp	r3, fp
 8009a3e:	dc33      	bgt.n	8009aa8 <_printf_float+0x384>
 8009a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a44:	429a      	cmp	r2, r3
 8009a46:	db3b      	blt.n	8009ac0 <_printf_float+0x39c>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	07da      	lsls	r2, r3, #31
 8009a4c:	d438      	bmi.n	8009ac0 <_printf_float+0x39c>
 8009a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a50:	9a05      	ldr	r2, [sp, #20]
 8009a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a54:	1a9a      	subs	r2, r3, r2
 8009a56:	eba3 0901 	sub.w	r9, r3, r1
 8009a5a:	4591      	cmp	r9, r2
 8009a5c:	bfa8      	it	ge
 8009a5e:	4691      	movge	r9, r2
 8009a60:	f1b9 0f00 	cmp.w	r9, #0
 8009a64:	dc35      	bgt.n	8009ad2 <_printf_float+0x3ae>
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a6e:	f104 0a1a 	add.w	sl, r4, #26
 8009a72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	eba3 0309 	sub.w	r3, r3, r9
 8009a7c:	4543      	cmp	r3, r8
 8009a7e:	f77f af79 	ble.w	8009974 <_printf_float+0x250>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4652      	mov	r2, sl
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f aeaa 	beq.w	80097e6 <_printf_float+0xc2>
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	e7ec      	b.n	8009a72 <_printf_float+0x34e>
 8009a98:	4613      	mov	r3, r2
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d1c0      	bne.n	8009a28 <_printf_float+0x304>
 8009aa6:	e69e      	b.n	80097e6 <_printf_float+0xc2>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	9205      	str	r2, [sp, #20]
 8009ab0:	47b8      	blx	r7
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	f43f ae97 	beq.w	80097e6 <_printf_float+0xc2>
 8009ab8:	9a05      	ldr	r2, [sp, #20]
 8009aba:	f10b 0b01 	add.w	fp, fp, #1
 8009abe:	e7b9      	b.n	8009a34 <_printf_float+0x310>
 8009ac0:	ee18 3a10 	vmov	r3, s16
 8009ac4:	4652      	mov	r2, sl
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	d1be      	bne.n	8009a4e <_printf_float+0x32a>
 8009ad0:	e689      	b.n	80097e6 <_printf_float+0xc2>
 8009ad2:	9a05      	ldr	r2, [sp, #20]
 8009ad4:	464b      	mov	r3, r9
 8009ad6:	4442      	add	r2, r8
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d1c1      	bne.n	8009a66 <_printf_float+0x342>
 8009ae2:	e680      	b.n	80097e6 <_printf_float+0xc2>
 8009ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae6:	2a01      	cmp	r2, #1
 8009ae8:	dc01      	bgt.n	8009aee <_printf_float+0x3ca>
 8009aea:	07db      	lsls	r3, r3, #31
 8009aec:	d538      	bpl.n	8009b60 <_printf_float+0x43c>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4642      	mov	r2, r8
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b8      	blx	r7
 8009af8:	3001      	adds	r0, #1
 8009afa:	f43f ae74 	beq.w	80097e6 <_printf_float+0xc2>
 8009afe:	ee18 3a10 	vmov	r3, s16
 8009b02:	4652      	mov	r2, sl
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f ae6b 	beq.w	80097e6 <_printf_float+0xc2>
 8009b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	f7f6 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b1c:	b9d8      	cbnz	r0, 8009b56 <_printf_float+0x432>
 8009b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b20:	f108 0201 	add.w	r2, r8, #1
 8009b24:	3b01      	subs	r3, #1
 8009b26:	4631      	mov	r1, r6
 8009b28:	4628      	mov	r0, r5
 8009b2a:	47b8      	blx	r7
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d10e      	bne.n	8009b4e <_printf_float+0x42a>
 8009b30:	e659      	b.n	80097e6 <_printf_float+0xc2>
 8009b32:	2301      	movs	r3, #1
 8009b34:	4652      	mov	r2, sl
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b8      	blx	r7
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	f43f ae52 	beq.w	80097e6 <_printf_float+0xc2>
 8009b42:	f108 0801 	add.w	r8, r8, #1
 8009b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	4543      	cmp	r3, r8
 8009b4c:	dcf1      	bgt.n	8009b32 <_printf_float+0x40e>
 8009b4e:	464b      	mov	r3, r9
 8009b50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b54:	e6dc      	b.n	8009910 <_printf_float+0x1ec>
 8009b56:	f04f 0800 	mov.w	r8, #0
 8009b5a:	f104 0a1a 	add.w	sl, r4, #26
 8009b5e:	e7f2      	b.n	8009b46 <_printf_float+0x422>
 8009b60:	2301      	movs	r3, #1
 8009b62:	4642      	mov	r2, r8
 8009b64:	e7df      	b.n	8009b26 <_printf_float+0x402>
 8009b66:	2301      	movs	r3, #1
 8009b68:	464a      	mov	r2, r9
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	47b8      	blx	r7
 8009b70:	3001      	adds	r0, #1
 8009b72:	f43f ae38 	beq.w	80097e6 <_printf_float+0xc2>
 8009b76:	f108 0801 	add.w	r8, r8, #1
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b7e:	1a5b      	subs	r3, r3, r1
 8009b80:	4543      	cmp	r3, r8
 8009b82:	dcf0      	bgt.n	8009b66 <_printf_float+0x442>
 8009b84:	e6fa      	b.n	800997c <_printf_float+0x258>
 8009b86:	f04f 0800 	mov.w	r8, #0
 8009b8a:	f104 0919 	add.w	r9, r4, #25
 8009b8e:	e7f4      	b.n	8009b7a <_printf_float+0x456>

08009b90 <_printf_common>:
 8009b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	4616      	mov	r6, r2
 8009b96:	4699      	mov	r9, r3
 8009b98:	688a      	ldr	r2, [r1, #8]
 8009b9a:	690b      	ldr	r3, [r1, #16]
 8009b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	bfb8      	it	lt
 8009ba4:	4613      	movlt	r3, r2
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bac:	4607      	mov	r7, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	b10a      	cbz	r2, 8009bb6 <_printf_common+0x26>
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	0699      	lsls	r1, r3, #26
 8009bba:	bf42      	ittt	mi
 8009bbc:	6833      	ldrmi	r3, [r6, #0]
 8009bbe:	3302      	addmi	r3, #2
 8009bc0:	6033      	strmi	r3, [r6, #0]
 8009bc2:	6825      	ldr	r5, [r4, #0]
 8009bc4:	f015 0506 	ands.w	r5, r5, #6
 8009bc8:	d106      	bne.n	8009bd8 <_printf_common+0x48>
 8009bca:	f104 0a19 	add.w	sl, r4, #25
 8009bce:	68e3      	ldr	r3, [r4, #12]
 8009bd0:	6832      	ldr	r2, [r6, #0]
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	42ab      	cmp	r3, r5
 8009bd6:	dc26      	bgt.n	8009c26 <_printf_common+0x96>
 8009bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bdc:	1e13      	subs	r3, r2, #0
 8009bde:	6822      	ldr	r2, [r4, #0]
 8009be0:	bf18      	it	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	0692      	lsls	r2, r2, #26
 8009be6:	d42b      	bmi.n	8009c40 <_printf_common+0xb0>
 8009be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bec:	4649      	mov	r1, r9
 8009bee:	4638      	mov	r0, r7
 8009bf0:	47c0      	blx	r8
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d01e      	beq.n	8009c34 <_printf_common+0xa4>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	68e5      	ldr	r5, [r4, #12]
 8009bfa:	6832      	ldr	r2, [r6, #0]
 8009bfc:	f003 0306 	and.w	r3, r3, #6
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	bf08      	it	eq
 8009c04:	1aad      	subeq	r5, r5, r2
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	bf0c      	ite	eq
 8009c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c10:	2500      	movne	r5, #0
 8009c12:	4293      	cmp	r3, r2
 8009c14:	bfc4      	itt	gt
 8009c16:	1a9b      	subgt	r3, r3, r2
 8009c18:	18ed      	addgt	r5, r5, r3
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	341a      	adds	r4, #26
 8009c1e:	42b5      	cmp	r5, r6
 8009c20:	d11a      	bne.n	8009c58 <_printf_common+0xc8>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e008      	b.n	8009c38 <_printf_common+0xa8>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4652      	mov	r2, sl
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	47c0      	blx	r8
 8009c30:	3001      	adds	r0, #1
 8009c32:	d103      	bne.n	8009c3c <_printf_common+0xac>
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	e7c6      	b.n	8009bce <_printf_common+0x3e>
 8009c40:	18e1      	adds	r1, r4, r3
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	2030      	movs	r0, #48	; 0x30
 8009c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c4a:	4422      	add	r2, r4
 8009c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c54:	3302      	adds	r3, #2
 8009c56:	e7c7      	b.n	8009be8 <_printf_common+0x58>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d0e6      	beq.n	8009c34 <_printf_common+0xa4>
 8009c66:	3601      	adds	r6, #1
 8009c68:	e7d9      	b.n	8009c1e <_printf_common+0x8e>
	...

08009c6c <_printf_i>:
 8009c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	7e0f      	ldrb	r7, [r1, #24]
 8009c72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c74:	2f78      	cmp	r7, #120	; 0x78
 8009c76:	4691      	mov	r9, r2
 8009c78:	4680      	mov	r8, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	469a      	mov	sl, r3
 8009c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c82:	d807      	bhi.n	8009c94 <_printf_i+0x28>
 8009c84:	2f62      	cmp	r7, #98	; 0x62
 8009c86:	d80a      	bhi.n	8009c9e <_printf_i+0x32>
 8009c88:	2f00      	cmp	r7, #0
 8009c8a:	f000 80d8 	beq.w	8009e3e <_printf_i+0x1d2>
 8009c8e:	2f58      	cmp	r7, #88	; 0x58
 8009c90:	f000 80a3 	beq.w	8009dda <_printf_i+0x16e>
 8009c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c9c:	e03a      	b.n	8009d14 <_printf_i+0xa8>
 8009c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ca2:	2b15      	cmp	r3, #21
 8009ca4:	d8f6      	bhi.n	8009c94 <_printf_i+0x28>
 8009ca6:	a101      	add	r1, pc, #4	; (adr r1, 8009cac <_printf_i+0x40>)
 8009ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cac:	08009d05 	.word	0x08009d05
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009c95 	.word	0x08009c95
 8009cb8:	08009c95 	.word	0x08009c95
 8009cbc:	08009c95 	.word	0x08009c95
 8009cc0:	08009c95 	.word	0x08009c95
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009c95 	.word	0x08009c95
 8009ccc:	08009c95 	.word	0x08009c95
 8009cd0:	08009c95 	.word	0x08009c95
 8009cd4:	08009c95 	.word	0x08009c95
 8009cd8:	08009e25 	.word	0x08009e25
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009e07 	.word	0x08009e07
 8009ce4:	08009c95 	.word	0x08009c95
 8009ce8:	08009c95 	.word	0x08009c95
 8009cec:	08009e47 	.word	0x08009e47
 8009cf0:	08009c95 	.word	0x08009c95
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009c95 	.word	0x08009c95
 8009cfc:	08009c95 	.word	0x08009c95
 8009d00:	08009e0f 	.word	0x08009e0f
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	1d1a      	adds	r2, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	602a      	str	r2, [r5, #0]
 8009d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d14:	2301      	movs	r3, #1
 8009d16:	e0a3      	b.n	8009e60 <_printf_i+0x1f4>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	6829      	ldr	r1, [r5, #0]
 8009d1c:	0606      	lsls	r6, r0, #24
 8009d1e:	f101 0304 	add.w	r3, r1, #4
 8009d22:	d50a      	bpl.n	8009d3a <_printf_i+0xce>
 8009d24:	680e      	ldr	r6, [r1, #0]
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	2e00      	cmp	r6, #0
 8009d2a:	da03      	bge.n	8009d34 <_printf_i+0xc8>
 8009d2c:	232d      	movs	r3, #45	; 0x2d
 8009d2e:	4276      	negs	r6, r6
 8009d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d34:	485e      	ldr	r0, [pc, #376]	; (8009eb0 <_printf_i+0x244>)
 8009d36:	230a      	movs	r3, #10
 8009d38:	e019      	b.n	8009d6e <_printf_i+0x102>
 8009d3a:	680e      	ldr	r6, [r1, #0]
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d42:	bf18      	it	ne
 8009d44:	b236      	sxthne	r6, r6
 8009d46:	e7ef      	b.n	8009d28 <_printf_i+0xbc>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	6820      	ldr	r0, [r4, #0]
 8009d4c:	1d19      	adds	r1, r3, #4
 8009d4e:	6029      	str	r1, [r5, #0]
 8009d50:	0601      	lsls	r1, r0, #24
 8009d52:	d501      	bpl.n	8009d58 <_printf_i+0xec>
 8009d54:	681e      	ldr	r6, [r3, #0]
 8009d56:	e002      	b.n	8009d5e <_printf_i+0xf2>
 8009d58:	0646      	lsls	r6, r0, #25
 8009d5a:	d5fb      	bpl.n	8009d54 <_printf_i+0xe8>
 8009d5c:	881e      	ldrh	r6, [r3, #0]
 8009d5e:	4854      	ldr	r0, [pc, #336]	; (8009eb0 <_printf_i+0x244>)
 8009d60:	2f6f      	cmp	r7, #111	; 0x6f
 8009d62:	bf0c      	ite	eq
 8009d64:	2308      	moveq	r3, #8
 8009d66:	230a      	movne	r3, #10
 8009d68:	2100      	movs	r1, #0
 8009d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d6e:	6865      	ldr	r5, [r4, #4]
 8009d70:	60a5      	str	r5, [r4, #8]
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	bfa2      	ittt	ge
 8009d76:	6821      	ldrge	r1, [r4, #0]
 8009d78:	f021 0104 	bicge.w	r1, r1, #4
 8009d7c:	6021      	strge	r1, [r4, #0]
 8009d7e:	b90e      	cbnz	r6, 8009d84 <_printf_i+0x118>
 8009d80:	2d00      	cmp	r5, #0
 8009d82:	d04d      	beq.n	8009e20 <_printf_i+0x1b4>
 8009d84:	4615      	mov	r5, r2
 8009d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d8e:	5dc7      	ldrb	r7, [r0, r7]
 8009d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d94:	4637      	mov	r7, r6
 8009d96:	42bb      	cmp	r3, r7
 8009d98:	460e      	mov	r6, r1
 8009d9a:	d9f4      	bls.n	8009d86 <_printf_i+0x11a>
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d10b      	bne.n	8009db8 <_printf_i+0x14c>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	07de      	lsls	r6, r3, #31
 8009da4:	d508      	bpl.n	8009db8 <_printf_i+0x14c>
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	6861      	ldr	r1, [r4, #4]
 8009daa:	4299      	cmp	r1, r3
 8009dac:	bfde      	ittt	le
 8009dae:	2330      	movle	r3, #48	; 0x30
 8009db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009db8:	1b52      	subs	r2, r2, r5
 8009dba:	6122      	str	r2, [r4, #16]
 8009dbc:	f8cd a000 	str.w	sl, [sp]
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	aa03      	add	r2, sp, #12
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7ff fee2 	bl	8009b90 <_printf_common>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d14c      	bne.n	8009e6a <_printf_i+0x1fe>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	b004      	add	sp, #16
 8009dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dda:	4835      	ldr	r0, [pc, #212]	; (8009eb0 <_printf_i+0x244>)
 8009ddc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009de0:	6829      	ldr	r1, [r5, #0]
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009de8:	6029      	str	r1, [r5, #0]
 8009dea:	061d      	lsls	r5, r3, #24
 8009dec:	d514      	bpl.n	8009e18 <_printf_i+0x1ac>
 8009dee:	07df      	lsls	r7, r3, #31
 8009df0:	bf44      	itt	mi
 8009df2:	f043 0320 	orrmi.w	r3, r3, #32
 8009df6:	6023      	strmi	r3, [r4, #0]
 8009df8:	b91e      	cbnz	r6, 8009e02 <_printf_i+0x196>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f023 0320 	bic.w	r3, r3, #32
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	2310      	movs	r3, #16
 8009e04:	e7b0      	b.n	8009d68 <_printf_i+0xfc>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	f043 0320 	orr.w	r3, r3, #32
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	2378      	movs	r3, #120	; 0x78
 8009e10:	4828      	ldr	r0, [pc, #160]	; (8009eb4 <_printf_i+0x248>)
 8009e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e16:	e7e3      	b.n	8009de0 <_printf_i+0x174>
 8009e18:	0659      	lsls	r1, r3, #25
 8009e1a:	bf48      	it	mi
 8009e1c:	b2b6      	uxthmi	r6, r6
 8009e1e:	e7e6      	b.n	8009dee <_printf_i+0x182>
 8009e20:	4615      	mov	r5, r2
 8009e22:	e7bb      	b.n	8009d9c <_printf_i+0x130>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	6826      	ldr	r6, [r4, #0]
 8009e28:	6961      	ldr	r1, [r4, #20]
 8009e2a:	1d18      	adds	r0, r3, #4
 8009e2c:	6028      	str	r0, [r5, #0]
 8009e2e:	0635      	lsls	r5, r6, #24
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0x1cc>
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <_printf_i+0x1d2>
 8009e38:	0670      	lsls	r0, r6, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0x1c8>
 8009e3c:	8019      	strh	r1, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	4615      	mov	r5, r2
 8009e44:	e7ba      	b.n	8009dbc <_printf_i+0x150>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	1d1a      	adds	r2, r3, #4
 8009e4a:	602a      	str	r2, [r5, #0]
 8009e4c:	681d      	ldr	r5, [r3, #0]
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7f6 f9c4 	bl	80001e0 <memchr>
 8009e58:	b108      	cbz	r0, 8009e5e <_printf_i+0x1f2>
 8009e5a:	1b40      	subs	r0, r0, r5
 8009e5c:	6060      	str	r0, [r4, #4]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	2300      	movs	r3, #0
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e68:	e7a8      	b.n	8009dbc <_printf_i+0x150>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4640      	mov	r0, r8
 8009e72:	47d0      	blx	sl
 8009e74:	3001      	adds	r0, #1
 8009e76:	d0ab      	beq.n	8009dd0 <_printf_i+0x164>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	d413      	bmi.n	8009ea6 <_printf_i+0x23a>
 8009e7e:	68e0      	ldr	r0, [r4, #12]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	4298      	cmp	r0, r3
 8009e84:	bfb8      	it	lt
 8009e86:	4618      	movlt	r0, r3
 8009e88:	e7a4      	b.n	8009dd4 <_printf_i+0x168>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	47d0      	blx	sl
 8009e94:	3001      	adds	r0, #1
 8009e96:	d09b      	beq.n	8009dd0 <_printf_i+0x164>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	9903      	ldr	r1, [sp, #12]
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dcf2      	bgt.n	8009e8a <_printf_i+0x21e>
 8009ea4:	e7eb      	b.n	8009e7e <_printf_i+0x212>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	f104 0619 	add.w	r6, r4, #25
 8009eac:	e7f5      	b.n	8009e9a <_printf_i+0x22e>
 8009eae:	bf00      	nop
 8009eb0:	0800c1ce 	.word	0x0800c1ce
 8009eb4:	0800c1df 	.word	0x0800c1df

08009eb8 <iprintf>:
 8009eb8:	b40f      	push	{r0, r1, r2, r3}
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <iprintf+0x2c>)
 8009ebc:	b513      	push	{r0, r1, r4, lr}
 8009ebe:	681c      	ldr	r4, [r3, #0]
 8009ec0:	b124      	cbz	r4, 8009ecc <iprintf+0x14>
 8009ec2:	69a3      	ldr	r3, [r4, #24]
 8009ec4:	b913      	cbnz	r3, 8009ecc <iprintf+0x14>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f001 f8da 	bl	800b080 <__sinit>
 8009ecc:	ab05      	add	r3, sp, #20
 8009ece:	9a04      	ldr	r2, [sp, #16]
 8009ed0:	68a1      	ldr	r1, [r4, #8]
 8009ed2:	9301      	str	r3, [sp, #4]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f001 fe97 	bl	800bc08 <_vfiprintf_r>
 8009eda:	b002      	add	sp, #8
 8009edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee0:	b004      	add	sp, #16
 8009ee2:	4770      	bx	lr
 8009ee4:	200000fc 	.word	0x200000fc

08009ee8 <_puts_r>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	460e      	mov	r6, r1
 8009eec:	4605      	mov	r5, r0
 8009eee:	b118      	cbz	r0, 8009ef8 <_puts_r+0x10>
 8009ef0:	6983      	ldr	r3, [r0, #24]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <_puts_r+0x10>
 8009ef4:	f001 f8c4 	bl	800b080 <__sinit>
 8009ef8:	69ab      	ldr	r3, [r5, #24]
 8009efa:	68ac      	ldr	r4, [r5, #8]
 8009efc:	b913      	cbnz	r3, 8009f04 <_puts_r+0x1c>
 8009efe:	4628      	mov	r0, r5
 8009f00:	f001 f8be 	bl	800b080 <__sinit>
 8009f04:	4b2c      	ldr	r3, [pc, #176]	; (8009fb8 <_puts_r+0xd0>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	d120      	bne.n	8009f4c <_puts_r+0x64>
 8009f0a:	686c      	ldr	r4, [r5, #4]
 8009f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f0e:	07db      	lsls	r3, r3, #31
 8009f10:	d405      	bmi.n	8009f1e <_puts_r+0x36>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	0598      	lsls	r0, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_puts_r+0x36>
 8009f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1a:	f001 f954 	bl	800b1c6 <__retarget_lock_acquire_recursive>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	0719      	lsls	r1, r3, #28
 8009f22:	d51d      	bpl.n	8009f60 <_puts_r+0x78>
 8009f24:	6923      	ldr	r3, [r4, #16]
 8009f26:	b1db      	cbz	r3, 8009f60 <_puts_r+0x78>
 8009f28:	3e01      	subs	r6, #1
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f30:	3b01      	subs	r3, #1
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	bb39      	cbnz	r1, 8009f86 <_puts_r+0x9e>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da38      	bge.n	8009fac <_puts_r+0xc4>
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	210a      	movs	r1, #10
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 f848 	bl	8009fd4 <__swbuf_r>
 8009f44:	3001      	adds	r0, #1
 8009f46:	d011      	beq.n	8009f6c <_puts_r+0x84>
 8009f48:	250a      	movs	r5, #10
 8009f4a:	e011      	b.n	8009f70 <_puts_r+0x88>
 8009f4c:	4b1b      	ldr	r3, [pc, #108]	; (8009fbc <_puts_r+0xd4>)
 8009f4e:	429c      	cmp	r4, r3
 8009f50:	d101      	bne.n	8009f56 <_puts_r+0x6e>
 8009f52:	68ac      	ldr	r4, [r5, #8]
 8009f54:	e7da      	b.n	8009f0c <_puts_r+0x24>
 8009f56:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <_puts_r+0xd8>)
 8009f58:	429c      	cmp	r4, r3
 8009f5a:	bf08      	it	eq
 8009f5c:	68ec      	ldreq	r4, [r5, #12]
 8009f5e:	e7d5      	b.n	8009f0c <_puts_r+0x24>
 8009f60:	4621      	mov	r1, r4
 8009f62:	4628      	mov	r0, r5
 8009f64:	f000 f888 	bl	800a078 <__swsetup_r>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d0dd      	beq.n	8009f28 <_puts_r+0x40>
 8009f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f72:	07da      	lsls	r2, r3, #31
 8009f74:	d405      	bmi.n	8009f82 <_puts_r+0x9a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	059b      	lsls	r3, r3, #22
 8009f7a:	d402      	bmi.n	8009f82 <_puts_r+0x9a>
 8009f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7e:	f001 f923 	bl	800b1c8 <__retarget_lock_release_recursive>
 8009f82:	4628      	mov	r0, r5
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da04      	bge.n	8009f94 <_puts_r+0xac>
 8009f8a:	69a2      	ldr	r2, [r4, #24]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	dc06      	bgt.n	8009f9e <_puts_r+0xb6>
 8009f90:	290a      	cmp	r1, #10
 8009f92:	d004      	beq.n	8009f9e <_puts_r+0xb6>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	6022      	str	r2, [r4, #0]
 8009f9a:	7019      	strb	r1, [r3, #0]
 8009f9c:	e7c5      	b.n	8009f2a <_puts_r+0x42>
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 f817 	bl	8009fd4 <__swbuf_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d1bf      	bne.n	8009f2a <_puts_r+0x42>
 8009faa:	e7df      	b.n	8009f6c <_puts_r+0x84>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	250a      	movs	r5, #10
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	701d      	strb	r5, [r3, #0]
 8009fb6:	e7db      	b.n	8009f70 <_puts_r+0x88>
 8009fb8:	0800c2a0 	.word	0x0800c2a0
 8009fbc:	0800c2c0 	.word	0x0800c2c0
 8009fc0:	0800c280 	.word	0x0800c280

08009fc4 <puts>:
 8009fc4:	4b02      	ldr	r3, [pc, #8]	; (8009fd0 <puts+0xc>)
 8009fc6:	4601      	mov	r1, r0
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	f7ff bf8d 	b.w	8009ee8 <_puts_r>
 8009fce:	bf00      	nop
 8009fd0:	200000fc 	.word	0x200000fc

08009fd4 <__swbuf_r>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	460e      	mov	r6, r1
 8009fd8:	4614      	mov	r4, r2
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b118      	cbz	r0, 8009fe6 <__swbuf_r+0x12>
 8009fde:	6983      	ldr	r3, [r0, #24]
 8009fe0:	b90b      	cbnz	r3, 8009fe6 <__swbuf_r+0x12>
 8009fe2:	f001 f84d 	bl	800b080 <__sinit>
 8009fe6:	4b21      	ldr	r3, [pc, #132]	; (800a06c <__swbuf_r+0x98>)
 8009fe8:	429c      	cmp	r4, r3
 8009fea:	d12b      	bne.n	800a044 <__swbuf_r+0x70>
 8009fec:	686c      	ldr	r4, [r5, #4]
 8009fee:	69a3      	ldr	r3, [r4, #24]
 8009ff0:	60a3      	str	r3, [r4, #8]
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	071a      	lsls	r2, r3, #28
 8009ff6:	d52f      	bpl.n	800a058 <__swbuf_r+0x84>
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	b36b      	cbz	r3, 800a058 <__swbuf_r+0x84>
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	6820      	ldr	r0, [r4, #0]
 800a000:	1ac0      	subs	r0, r0, r3
 800a002:	6963      	ldr	r3, [r4, #20]
 800a004:	b2f6      	uxtb	r6, r6
 800a006:	4283      	cmp	r3, r0
 800a008:	4637      	mov	r7, r6
 800a00a:	dc04      	bgt.n	800a016 <__swbuf_r+0x42>
 800a00c:	4621      	mov	r1, r4
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 ffa2 	bl	800af58 <_fflush_r>
 800a014:	bb30      	cbnz	r0, 800a064 <__swbuf_r+0x90>
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	3b01      	subs	r3, #1
 800a01a:	60a3      	str	r3, [r4, #8]
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	6022      	str	r2, [r4, #0]
 800a022:	701e      	strb	r6, [r3, #0]
 800a024:	6963      	ldr	r3, [r4, #20]
 800a026:	3001      	adds	r0, #1
 800a028:	4283      	cmp	r3, r0
 800a02a:	d004      	beq.n	800a036 <__swbuf_r+0x62>
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	07db      	lsls	r3, r3, #31
 800a030:	d506      	bpl.n	800a040 <__swbuf_r+0x6c>
 800a032:	2e0a      	cmp	r6, #10
 800a034:	d104      	bne.n	800a040 <__swbuf_r+0x6c>
 800a036:	4621      	mov	r1, r4
 800a038:	4628      	mov	r0, r5
 800a03a:	f000 ff8d 	bl	800af58 <_fflush_r>
 800a03e:	b988      	cbnz	r0, 800a064 <__swbuf_r+0x90>
 800a040:	4638      	mov	r0, r7
 800a042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a044:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <__swbuf_r+0x9c>)
 800a046:	429c      	cmp	r4, r3
 800a048:	d101      	bne.n	800a04e <__swbuf_r+0x7a>
 800a04a:	68ac      	ldr	r4, [r5, #8]
 800a04c:	e7cf      	b.n	8009fee <__swbuf_r+0x1a>
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <__swbuf_r+0xa0>)
 800a050:	429c      	cmp	r4, r3
 800a052:	bf08      	it	eq
 800a054:	68ec      	ldreq	r4, [r5, #12]
 800a056:	e7ca      	b.n	8009fee <__swbuf_r+0x1a>
 800a058:	4621      	mov	r1, r4
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 f80c 	bl	800a078 <__swsetup_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	d0cb      	beq.n	8009ffc <__swbuf_r+0x28>
 800a064:	f04f 37ff 	mov.w	r7, #4294967295
 800a068:	e7ea      	b.n	800a040 <__swbuf_r+0x6c>
 800a06a:	bf00      	nop
 800a06c:	0800c2a0 	.word	0x0800c2a0
 800a070:	0800c2c0 	.word	0x0800c2c0
 800a074:	0800c280 	.word	0x0800c280

0800a078 <__swsetup_r>:
 800a078:	4b32      	ldr	r3, [pc, #200]	; (800a144 <__swsetup_r+0xcc>)
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	681d      	ldr	r5, [r3, #0]
 800a07e:	4606      	mov	r6, r0
 800a080:	460c      	mov	r4, r1
 800a082:	b125      	cbz	r5, 800a08e <__swsetup_r+0x16>
 800a084:	69ab      	ldr	r3, [r5, #24]
 800a086:	b913      	cbnz	r3, 800a08e <__swsetup_r+0x16>
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 fff9 	bl	800b080 <__sinit>
 800a08e:	4b2e      	ldr	r3, [pc, #184]	; (800a148 <__swsetup_r+0xd0>)
 800a090:	429c      	cmp	r4, r3
 800a092:	d10f      	bne.n	800a0b4 <__swsetup_r+0x3c>
 800a094:	686c      	ldr	r4, [r5, #4]
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a09c:	0719      	lsls	r1, r3, #28
 800a09e:	d42c      	bmi.n	800a0fa <__swsetup_r+0x82>
 800a0a0:	06dd      	lsls	r5, r3, #27
 800a0a2:	d411      	bmi.n	800a0c8 <__swsetup_r+0x50>
 800a0a4:	2309      	movs	r3, #9
 800a0a6:	6033      	str	r3, [r6, #0]
 800a0a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	e03e      	b.n	800a132 <__swsetup_r+0xba>
 800a0b4:	4b25      	ldr	r3, [pc, #148]	; (800a14c <__swsetup_r+0xd4>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	d101      	bne.n	800a0be <__swsetup_r+0x46>
 800a0ba:	68ac      	ldr	r4, [r5, #8]
 800a0bc:	e7eb      	b.n	800a096 <__swsetup_r+0x1e>
 800a0be:	4b24      	ldr	r3, [pc, #144]	; (800a150 <__swsetup_r+0xd8>)
 800a0c0:	429c      	cmp	r4, r3
 800a0c2:	bf08      	it	eq
 800a0c4:	68ec      	ldreq	r4, [r5, #12]
 800a0c6:	e7e6      	b.n	800a096 <__swsetup_r+0x1e>
 800a0c8:	0758      	lsls	r0, r3, #29
 800a0ca:	d512      	bpl.n	800a0f2 <__swsetup_r+0x7a>
 800a0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ce:	b141      	cbz	r1, 800a0e2 <__swsetup_r+0x6a>
 800a0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	d002      	beq.n	800a0de <__swsetup_r+0x66>
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f001 fc8b 	bl	800b9f4 <_free_r>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6063      	str	r3, [r4, #4]
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f043 0308 	orr.w	r3, r3, #8
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	b94b      	cbnz	r3, 800a112 <__swsetup_r+0x9a>
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a108:	d003      	beq.n	800a112 <__swsetup_r+0x9a>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4630      	mov	r0, r6
 800a10e:	f001 f881 	bl	800b214 <__smakebuf_r>
 800a112:	89a0      	ldrh	r0, [r4, #12]
 800a114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a118:	f010 0301 	ands.w	r3, r0, #1
 800a11c:	d00a      	beq.n	800a134 <__swsetup_r+0xbc>
 800a11e:	2300      	movs	r3, #0
 800a120:	60a3      	str	r3, [r4, #8]
 800a122:	6963      	ldr	r3, [r4, #20]
 800a124:	425b      	negs	r3, r3
 800a126:	61a3      	str	r3, [r4, #24]
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	b943      	cbnz	r3, 800a13e <__swsetup_r+0xc6>
 800a12c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a130:	d1ba      	bne.n	800a0a8 <__swsetup_r+0x30>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	0781      	lsls	r1, r0, #30
 800a136:	bf58      	it	pl
 800a138:	6963      	ldrpl	r3, [r4, #20]
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	e7f4      	b.n	800a128 <__swsetup_r+0xb0>
 800a13e:	2000      	movs	r0, #0
 800a140:	e7f7      	b.n	800a132 <__swsetup_r+0xba>
 800a142:	bf00      	nop
 800a144:	200000fc 	.word	0x200000fc
 800a148:	0800c2a0 	.word	0x0800c2a0
 800a14c:	0800c2c0 	.word	0x0800c2c0
 800a150:	0800c280 	.word	0x0800c280

0800a154 <quorem>:
 800a154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	6903      	ldr	r3, [r0, #16]
 800a15a:	690c      	ldr	r4, [r1, #16]
 800a15c:	42a3      	cmp	r3, r4
 800a15e:	4607      	mov	r7, r0
 800a160:	f2c0 8081 	blt.w	800a266 <quorem+0x112>
 800a164:	3c01      	subs	r4, #1
 800a166:	f101 0814 	add.w	r8, r1, #20
 800a16a:	f100 0514 	add.w	r5, r0, #20
 800a16e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a17c:	3301      	adds	r3, #1
 800a17e:	429a      	cmp	r2, r3
 800a180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a188:	fbb2 f6f3 	udiv	r6, r2, r3
 800a18c:	d331      	bcc.n	800a1f2 <quorem+0x9e>
 800a18e:	f04f 0e00 	mov.w	lr, #0
 800a192:	4640      	mov	r0, r8
 800a194:	46ac      	mov	ip, r5
 800a196:	46f2      	mov	sl, lr
 800a198:	f850 2b04 	ldr.w	r2, [r0], #4
 800a19c:	b293      	uxth	r3, r2
 800a19e:	fb06 e303 	mla	r3, r6, r3, lr
 800a1a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a1ac:	f8dc a000 	ldr.w	sl, [ip]
 800a1b0:	0c12      	lsrs	r2, r2, #16
 800a1b2:	fa13 f38a 	uxtah	r3, r3, sl
 800a1b6:	fb06 e202 	mla	r2, r6, r2, lr
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1cc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1d0:	4581      	cmp	r9, r0
 800a1d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d6:	f84c 3b04 	str.w	r3, [ip], #4
 800a1da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1de:	d2db      	bcs.n	800a198 <quorem+0x44>
 800a1e0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1e4:	b92b      	cbnz	r3, 800a1f2 <quorem+0x9e>
 800a1e6:	9b01      	ldr	r3, [sp, #4]
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	429d      	cmp	r5, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	d32e      	bcc.n	800a24e <quorem+0xfa>
 800a1f0:	613c      	str	r4, [r7, #16]
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f001 fae6 	bl	800b7c4 <__mcmp>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	db24      	blt.n	800a246 <quorem+0xf2>
 800a1fc:	3601      	adds	r6, #1
 800a1fe:	4628      	mov	r0, r5
 800a200:	f04f 0c00 	mov.w	ip, #0
 800a204:	f858 2b04 	ldr.w	r2, [r8], #4
 800a208:	f8d0 e000 	ldr.w	lr, [r0]
 800a20c:	b293      	uxth	r3, r2
 800a20e:	ebac 0303 	sub.w	r3, ip, r3
 800a212:	0c12      	lsrs	r2, r2, #16
 800a214:	fa13 f38e 	uxtah	r3, r3, lr
 800a218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a21c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a220:	b29b      	uxth	r3, r3
 800a222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a226:	45c1      	cmp	r9, r8
 800a228:	f840 3b04 	str.w	r3, [r0], #4
 800a22c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a230:	d2e8      	bcs.n	800a204 <quorem+0xb0>
 800a232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a23a:	b922      	cbnz	r2, 800a246 <quorem+0xf2>
 800a23c:	3b04      	subs	r3, #4
 800a23e:	429d      	cmp	r5, r3
 800a240:	461a      	mov	r2, r3
 800a242:	d30a      	bcc.n	800a25a <quorem+0x106>
 800a244:	613c      	str	r4, [r7, #16]
 800a246:	4630      	mov	r0, r6
 800a248:	b003      	add	sp, #12
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	3b04      	subs	r3, #4
 800a252:	2a00      	cmp	r2, #0
 800a254:	d1cc      	bne.n	800a1f0 <quorem+0x9c>
 800a256:	3c01      	subs	r4, #1
 800a258:	e7c7      	b.n	800a1ea <quorem+0x96>
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	3b04      	subs	r3, #4
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d1f0      	bne.n	800a244 <quorem+0xf0>
 800a262:	3c01      	subs	r4, #1
 800a264:	e7eb      	b.n	800a23e <quorem+0xea>
 800a266:	2000      	movs	r0, #0
 800a268:	e7ee      	b.n	800a248 <quorem+0xf4>
 800a26a:	0000      	movs	r0, r0
 800a26c:	0000      	movs	r0, r0
	...

0800a270 <_dtoa_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	ed2d 8b04 	vpush	{d8-d9}
 800a278:	ec57 6b10 	vmov	r6, r7, d0
 800a27c:	b093      	sub	sp, #76	; 0x4c
 800a27e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a284:	9106      	str	r1, [sp, #24]
 800a286:	ee10 aa10 	vmov	sl, s0
 800a28a:	4604      	mov	r4, r0
 800a28c:	9209      	str	r2, [sp, #36]	; 0x24
 800a28e:	930c      	str	r3, [sp, #48]	; 0x30
 800a290:	46bb      	mov	fp, r7
 800a292:	b975      	cbnz	r5, 800a2b2 <_dtoa_r+0x42>
 800a294:	2010      	movs	r0, #16
 800a296:	f000 fffd 	bl	800b294 <malloc>
 800a29a:	4602      	mov	r2, r0
 800a29c:	6260      	str	r0, [r4, #36]	; 0x24
 800a29e:	b920      	cbnz	r0, 800a2aa <_dtoa_r+0x3a>
 800a2a0:	4ba7      	ldr	r3, [pc, #668]	; (800a540 <_dtoa_r+0x2d0>)
 800a2a2:	21ea      	movs	r1, #234	; 0xea
 800a2a4:	48a7      	ldr	r0, [pc, #668]	; (800a544 <_dtoa_r+0x2d4>)
 800a2a6:	f001 fe45 	bl	800bf34 <__assert_func>
 800a2aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2ae:	6005      	str	r5, [r0, #0]
 800a2b0:	60c5      	str	r5, [r0, #12]
 800a2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b4:	6819      	ldr	r1, [r3, #0]
 800a2b6:	b151      	cbz	r1, 800a2ce <_dtoa_r+0x5e>
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	604a      	str	r2, [r1, #4]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4093      	lsls	r3, r2
 800a2c0:	608b      	str	r3, [r1, #8]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f001 f83c 	bl	800b340 <_Bfree>
 800a2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	1e3b      	subs	r3, r7, #0
 800a2d0:	bfaa      	itet	ge
 800a2d2:	2300      	movge	r3, #0
 800a2d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2d8:	f8c8 3000 	strge.w	r3, [r8]
 800a2dc:	4b9a      	ldr	r3, [pc, #616]	; (800a548 <_dtoa_r+0x2d8>)
 800a2de:	bfbc      	itt	lt
 800a2e0:	2201      	movlt	r2, #1
 800a2e2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2e6:	ea33 030b 	bics.w	r3, r3, fp
 800a2ea:	d11b      	bne.n	800a324 <_dtoa_r+0xb4>
 800a2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2f8:	4333      	orrs	r3, r6
 800a2fa:	f000 8592 	beq.w	800ae22 <_dtoa_r+0xbb2>
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	b963      	cbnz	r3, 800a31c <_dtoa_r+0xac>
 800a302:	4b92      	ldr	r3, [pc, #584]	; (800a54c <_dtoa_r+0x2dc>)
 800a304:	e022      	b.n	800a34c <_dtoa_r+0xdc>
 800a306:	4b92      	ldr	r3, [pc, #584]	; (800a550 <_dtoa_r+0x2e0>)
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	3308      	adds	r3, #8
 800a30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	9801      	ldr	r0, [sp, #4]
 800a312:	b013      	add	sp, #76	; 0x4c
 800a314:	ecbd 8b04 	vpop	{d8-d9}
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	4b8b      	ldr	r3, [pc, #556]	; (800a54c <_dtoa_r+0x2dc>)
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	3303      	adds	r3, #3
 800a322:	e7f3      	b.n	800a30c <_dtoa_r+0x9c>
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	4650      	mov	r0, sl
 800a32a:	4659      	mov	r1, fp
 800a32c:	f7f6 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a330:	ec4b ab19 	vmov	d9, sl, fp
 800a334:	4680      	mov	r8, r0
 800a336:	b158      	cbz	r0, 800a350 <_dtoa_r+0xe0>
 800a338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a33a:	2301      	movs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 856b 	beq.w	800ae1c <_dtoa_r+0xbac>
 800a346:	4883      	ldr	r0, [pc, #524]	; (800a554 <_dtoa_r+0x2e4>)
 800a348:	6018      	str	r0, [r3, #0]
 800a34a:	1e43      	subs	r3, r0, #1
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	e7df      	b.n	800a310 <_dtoa_r+0xa0>
 800a350:	ec4b ab10 	vmov	d0, sl, fp
 800a354:	aa10      	add	r2, sp, #64	; 0x40
 800a356:	a911      	add	r1, sp, #68	; 0x44
 800a358:	4620      	mov	r0, r4
 800a35a:	f001 fad9 	bl	800b910 <__d2b>
 800a35e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a362:	ee08 0a10 	vmov	s16, r0
 800a366:	2d00      	cmp	r5, #0
 800a368:	f000 8084 	beq.w	800a474 <_dtoa_r+0x204>
 800a36c:	ee19 3a90 	vmov	r3, s19
 800a370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a378:	4656      	mov	r6, sl
 800a37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a386:	4b74      	ldr	r3, [pc, #464]	; (800a558 <_dtoa_r+0x2e8>)
 800a388:	2200      	movs	r2, #0
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f5 ff7b 	bl	8000288 <__aeabi_dsub>
 800a392:	a365      	add	r3, pc, #404	; (adr r3, 800a528 <_dtoa_r+0x2b8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 f92e 	bl	80005f8 <__aeabi_dmul>
 800a39c:	a364      	add	r3, pc, #400	; (adr r3, 800a530 <_dtoa_r+0x2c0>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff73 	bl	800028c <__adddf3>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	f7f6 f8ba 	bl	8000524 <__aeabi_i2d>
 800a3b0:	a361      	add	r3, pc, #388	; (adr r3, 800a538 <_dtoa_r+0x2c8>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f6 f91f 	bl	80005f8 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f5 ff63 	bl	800028c <__adddf3>
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	f7f6 fbc5 	bl	8000b58 <__aeabi_d2iz>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	9000      	str	r0, [sp, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f6 fb80 	bl	8000adc <__aeabi_dcmplt>
 800a3dc:	b150      	cbz	r0, 800a3f4 <_dtoa_r+0x184>
 800a3de:	9800      	ldr	r0, [sp, #0]
 800a3e0:	f7f6 f8a0 	bl	8000524 <__aeabi_i2d>
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	f7f6 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ec:	b910      	cbnz	r0, 800a3f4 <_dtoa_r+0x184>
 800a3ee:	9b00      	ldr	r3, [sp, #0]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	2b16      	cmp	r3, #22
 800a3f8:	d85a      	bhi.n	800a4b0 <_dtoa_r+0x240>
 800a3fa:	9a00      	ldr	r2, [sp, #0]
 800a3fc:	4b57      	ldr	r3, [pc, #348]	; (800a55c <_dtoa_r+0x2ec>)
 800a3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	ec51 0b19 	vmov	r0, r1, d9
 800a40a:	f7f6 fb67 	bl	8000adc <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d050      	beq.n	800a4b4 <_dtoa_r+0x244>
 800a412:	9b00      	ldr	r3, [sp, #0]
 800a414:	3b01      	subs	r3, #1
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	2300      	movs	r3, #0
 800a41a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a41e:	1b5d      	subs	r5, r3, r5
 800a420:	1e6b      	subs	r3, r5, #1
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	bf45      	ittet	mi
 800a426:	f1c5 0301 	rsbmi	r3, r5, #1
 800a42a:	9304      	strmi	r3, [sp, #16]
 800a42c:	2300      	movpl	r3, #0
 800a42e:	2300      	movmi	r3, #0
 800a430:	bf4c      	ite	mi
 800a432:	9305      	strmi	r3, [sp, #20]
 800a434:	9304      	strpl	r3, [sp, #16]
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	db3d      	blt.n	800a4b8 <_dtoa_r+0x248>
 800a43c:	9b05      	ldr	r3, [sp, #20]
 800a43e:	9a00      	ldr	r2, [sp, #0]
 800a440:	920a      	str	r2, [sp, #40]	; 0x28
 800a442:	4413      	add	r3, r2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	2300      	movs	r3, #0
 800a448:	9307      	str	r3, [sp, #28]
 800a44a:	9b06      	ldr	r3, [sp, #24]
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	f200 8089 	bhi.w	800a564 <_dtoa_r+0x2f4>
 800a452:	2b05      	cmp	r3, #5
 800a454:	bfc4      	itt	gt
 800a456:	3b04      	subgt	r3, #4
 800a458:	9306      	strgt	r3, [sp, #24]
 800a45a:	9b06      	ldr	r3, [sp, #24]
 800a45c:	f1a3 0302 	sub.w	r3, r3, #2
 800a460:	bfcc      	ite	gt
 800a462:	2500      	movgt	r5, #0
 800a464:	2501      	movle	r5, #1
 800a466:	2b03      	cmp	r3, #3
 800a468:	f200 8087 	bhi.w	800a57a <_dtoa_r+0x30a>
 800a46c:	e8df f003 	tbb	[pc, r3]
 800a470:	59383a2d 	.word	0x59383a2d
 800a474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a478:	441d      	add	r5, r3
 800a47a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a47e:	2b20      	cmp	r3, #32
 800a480:	bfc1      	itttt	gt
 800a482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a48a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a48e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a492:	bfda      	itte	le
 800a494:	f1c3 0320 	rsble	r3, r3, #32
 800a498:	fa06 f003 	lslle.w	r0, r6, r3
 800a49c:	4318      	orrgt	r0, r3
 800a49e:	f7f6 f831 	bl	8000504 <__aeabi_ui2d>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4aa:	3d01      	subs	r5, #1
 800a4ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ae:	e76a      	b.n	800a386 <_dtoa_r+0x116>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7b2      	b.n	800a41a <_dtoa_r+0x1aa>
 800a4b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4b6:	e7b1      	b.n	800a41c <_dtoa_r+0x1ac>
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	9a00      	ldr	r2, [sp, #0]
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	4253      	negs	r3, r2
 800a4c2:	9307      	str	r3, [sp, #28]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c8:	e7bf      	b.n	800a44a <_dtoa_r+0x1da>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc55      	bgt.n	800a580 <_dtoa_r+0x310>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4de:	e00c      	b.n	800a4fa <_dtoa_r+0x28a>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e7f3      	b.n	800a4cc <_dtoa_r+0x25c>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e8:	9308      	str	r3, [sp, #32]
 800a4ea:	9b00      	ldr	r3, [sp, #0]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	9302      	str	r3, [sp, #8]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	9303      	str	r3, [sp, #12]
 800a4f6:	bfb8      	it	lt
 800a4f8:	2301      	movlt	r3, #1
 800a4fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	6042      	str	r2, [r0, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	f102 0614 	add.w	r6, r2, #20
 800a506:	429e      	cmp	r6, r3
 800a508:	6841      	ldr	r1, [r0, #4]
 800a50a:	d93d      	bls.n	800a588 <_dtoa_r+0x318>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fed7 	bl	800b2c0 <_Balloc>
 800a512:	9001      	str	r0, [sp, #4]
 800a514:	2800      	cmp	r0, #0
 800a516:	d13b      	bne.n	800a590 <_dtoa_r+0x320>
 800a518:	4b11      	ldr	r3, [pc, #68]	; (800a560 <_dtoa_r+0x2f0>)
 800a51a:	4602      	mov	r2, r0
 800a51c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a520:	e6c0      	b.n	800a2a4 <_dtoa_r+0x34>
 800a522:	2301      	movs	r3, #1
 800a524:	e7df      	b.n	800a4e6 <_dtoa_r+0x276>
 800a526:	bf00      	nop
 800a528:	636f4361 	.word	0x636f4361
 800a52c:	3fd287a7 	.word	0x3fd287a7
 800a530:	8b60c8b3 	.word	0x8b60c8b3
 800a534:	3fc68a28 	.word	0x3fc68a28
 800a538:	509f79fb 	.word	0x509f79fb
 800a53c:	3fd34413 	.word	0x3fd34413
 800a540:	0800c1fd 	.word	0x0800c1fd
 800a544:	0800c214 	.word	0x0800c214
 800a548:	7ff00000 	.word	0x7ff00000
 800a54c:	0800c1f9 	.word	0x0800c1f9
 800a550:	0800c1f0 	.word	0x0800c1f0
 800a554:	0800c1cd 	.word	0x0800c1cd
 800a558:	3ff80000 	.word	0x3ff80000
 800a55c:	0800c368 	.word	0x0800c368
 800a560:	0800c26f 	.word	0x0800c26f
 800a564:	2501      	movs	r5, #1
 800a566:	2300      	movs	r3, #0
 800a568:	9306      	str	r3, [sp, #24]
 800a56a:	9508      	str	r5, [sp, #32]
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
 800a570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	2312      	movs	r3, #18
 800a578:	e7b0      	b.n	800a4dc <_dtoa_r+0x26c>
 800a57a:	2301      	movs	r3, #1
 800a57c:	9308      	str	r3, [sp, #32]
 800a57e:	e7f5      	b.n	800a56c <_dtoa_r+0x2fc>
 800a580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a586:	e7b8      	b.n	800a4fa <_dtoa_r+0x28a>
 800a588:	3101      	adds	r1, #1
 800a58a:	6041      	str	r1, [r0, #4]
 800a58c:	0052      	lsls	r2, r2, #1
 800a58e:	e7b8      	b.n	800a502 <_dtoa_r+0x292>
 800a590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a592:	9a01      	ldr	r2, [sp, #4]
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	2b0e      	cmp	r3, #14
 800a59a:	f200 809d 	bhi.w	800a6d8 <_dtoa_r+0x468>
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	f000 809a 	beq.w	800a6d8 <_dtoa_r+0x468>
 800a5a4:	9b00      	ldr	r3, [sp, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dd32      	ble.n	800a610 <_dtoa_r+0x3a0>
 800a5aa:	4ab7      	ldr	r2, [pc, #732]	; (800a888 <_dtoa_r+0x618>)
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5b8:	9b00      	ldr	r3, [sp, #0]
 800a5ba:	05d8      	lsls	r0, r3, #23
 800a5bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5c0:	d516      	bpl.n	800a5f0 <_dtoa_r+0x380>
 800a5c2:	4bb2      	ldr	r3, [pc, #712]	; (800a88c <_dtoa_r+0x61c>)
 800a5c4:	ec51 0b19 	vmov	r0, r1, d9
 800a5c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5cc:	f7f6 f93e 	bl	800084c <__aeabi_ddiv>
 800a5d0:	f007 070f 	and.w	r7, r7, #15
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	2503      	movs	r5, #3
 800a5da:	4eac      	ldr	r6, [pc, #688]	; (800a88c <_dtoa_r+0x61c>)
 800a5dc:	b957      	cbnz	r7, 800a5f4 <_dtoa_r+0x384>
 800a5de:	4642      	mov	r2, r8
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	f7f6 f931 	bl	800084c <__aeabi_ddiv>
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	468b      	mov	fp, r1
 800a5ee:	e028      	b.n	800a642 <_dtoa_r+0x3d2>
 800a5f0:	2502      	movs	r5, #2
 800a5f2:	e7f2      	b.n	800a5da <_dtoa_r+0x36a>
 800a5f4:	07f9      	lsls	r1, r7, #31
 800a5f6:	d508      	bpl.n	800a60a <_dtoa_r+0x39a>
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a600:	f7f5 fffa 	bl	80005f8 <__aeabi_dmul>
 800a604:	3501      	adds	r5, #1
 800a606:	4680      	mov	r8, r0
 800a608:	4689      	mov	r9, r1
 800a60a:	107f      	asrs	r7, r7, #1
 800a60c:	3608      	adds	r6, #8
 800a60e:	e7e5      	b.n	800a5dc <_dtoa_r+0x36c>
 800a610:	f000 809b 	beq.w	800a74a <_dtoa_r+0x4da>
 800a614:	9b00      	ldr	r3, [sp, #0]
 800a616:	4f9d      	ldr	r7, [pc, #628]	; (800a88c <_dtoa_r+0x61c>)
 800a618:	425e      	negs	r6, r3
 800a61a:	4b9b      	ldr	r3, [pc, #620]	; (800a888 <_dtoa_r+0x618>)
 800a61c:	f006 020f 	and.w	r2, r6, #15
 800a620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	ec51 0b19 	vmov	r0, r1, d9
 800a62c:	f7f5 ffe4 	bl	80005f8 <__aeabi_dmul>
 800a630:	1136      	asrs	r6, r6, #4
 800a632:	4682      	mov	sl, r0
 800a634:	468b      	mov	fp, r1
 800a636:	2300      	movs	r3, #0
 800a638:	2502      	movs	r5, #2
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d17a      	bne.n	800a734 <_dtoa_r+0x4c4>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1d3      	bne.n	800a5ea <_dtoa_r+0x37a>
 800a642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 8082 	beq.w	800a74e <_dtoa_r+0x4de>
 800a64a:	4b91      	ldr	r3, [pc, #580]	; (800a890 <_dtoa_r+0x620>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4650      	mov	r0, sl
 800a650:	4659      	mov	r1, fp
 800a652:	f7f6 fa43 	bl	8000adc <__aeabi_dcmplt>
 800a656:	2800      	cmp	r0, #0
 800a658:	d079      	beq.n	800a74e <_dtoa_r+0x4de>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d076      	beq.n	800a74e <_dtoa_r+0x4de>
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	dd36      	ble.n	800a6d4 <_dtoa_r+0x464>
 800a666:	9b00      	ldr	r3, [sp, #0]
 800a668:	4650      	mov	r0, sl
 800a66a:	4659      	mov	r1, fp
 800a66c:	1e5f      	subs	r7, r3, #1
 800a66e:	2200      	movs	r2, #0
 800a670:	4b88      	ldr	r3, [pc, #544]	; (800a894 <_dtoa_r+0x624>)
 800a672:	f7f5 ffc1 	bl	80005f8 <__aeabi_dmul>
 800a676:	9e02      	ldr	r6, [sp, #8]
 800a678:	4682      	mov	sl, r0
 800a67a:	468b      	mov	fp, r1
 800a67c:	3501      	adds	r5, #1
 800a67e:	4628      	mov	r0, r5
 800a680:	f7f5 ff50 	bl	8000524 <__aeabi_i2d>
 800a684:	4652      	mov	r2, sl
 800a686:	465b      	mov	r3, fp
 800a688:	f7f5 ffb6 	bl	80005f8 <__aeabi_dmul>
 800a68c:	4b82      	ldr	r3, [pc, #520]	; (800a898 <_dtoa_r+0x628>)
 800a68e:	2200      	movs	r2, #0
 800a690:	f7f5 fdfc 	bl	800028c <__adddf3>
 800a694:	46d0      	mov	r8, sl
 800a696:	46d9      	mov	r9, fp
 800a698:	4682      	mov	sl, r0
 800a69a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a69e:	2e00      	cmp	r6, #0
 800a6a0:	d158      	bne.n	800a754 <_dtoa_r+0x4e4>
 800a6a2:	4b7e      	ldr	r3, [pc, #504]	; (800a89c <_dtoa_r+0x62c>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f5 fded 	bl	8000288 <__aeabi_dsub>
 800a6ae:	4652      	mov	r2, sl
 800a6b0:	465b      	mov	r3, fp
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4689      	mov	r9, r1
 800a6b6:	f7f6 fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f040 8295 	bne.w	800abea <_dtoa_r+0x97a>
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	f7f6 fa07 	bl	8000adc <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8289 	bne.w	800abe6 <_dtoa_r+0x976>
 800a6d4:	ec5b ab19 	vmov	sl, fp, d9
 800a6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f2c0 8148 	blt.w	800a970 <_dtoa_r+0x700>
 800a6e0:	9a00      	ldr	r2, [sp, #0]
 800a6e2:	2a0e      	cmp	r2, #14
 800a6e4:	f300 8144 	bgt.w	800a970 <_dtoa_r+0x700>
 800a6e8:	4b67      	ldr	r3, [pc, #412]	; (800a888 <_dtoa_r+0x618>)
 800a6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f280 80d5 	bge.w	800a8a4 <_dtoa_r+0x634>
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f300 80d1 	bgt.w	800a8a4 <_dtoa_r+0x634>
 800a702:	f040 826f 	bne.w	800abe4 <_dtoa_r+0x974>
 800a706:	4b65      	ldr	r3, [pc, #404]	; (800a89c <_dtoa_r+0x62c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	4640      	mov	r0, r8
 800a70c:	4649      	mov	r1, r9
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	4652      	mov	r2, sl
 800a714:	465b      	mov	r3, fp
 800a716:	f7f6 f9f5 	bl	8000b04 <__aeabi_dcmpge>
 800a71a:	9e03      	ldr	r6, [sp, #12]
 800a71c:	4637      	mov	r7, r6
 800a71e:	2800      	cmp	r0, #0
 800a720:	f040 8245 	bne.w	800abae <_dtoa_r+0x93e>
 800a724:	9d01      	ldr	r5, [sp, #4]
 800a726:	2331      	movs	r3, #49	; 0x31
 800a728:	f805 3b01 	strb.w	r3, [r5], #1
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	3301      	adds	r3, #1
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	e240      	b.n	800abb6 <_dtoa_r+0x946>
 800a734:	07f2      	lsls	r2, r6, #31
 800a736:	d505      	bpl.n	800a744 <_dtoa_r+0x4d4>
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	f7f5 ff5c 	bl	80005f8 <__aeabi_dmul>
 800a740:	3501      	adds	r5, #1
 800a742:	2301      	movs	r3, #1
 800a744:	1076      	asrs	r6, r6, #1
 800a746:	3708      	adds	r7, #8
 800a748:	e777      	b.n	800a63a <_dtoa_r+0x3ca>
 800a74a:	2502      	movs	r5, #2
 800a74c:	e779      	b.n	800a642 <_dtoa_r+0x3d2>
 800a74e:	9f00      	ldr	r7, [sp, #0]
 800a750:	9e03      	ldr	r6, [sp, #12]
 800a752:	e794      	b.n	800a67e <_dtoa_r+0x40e>
 800a754:	9901      	ldr	r1, [sp, #4]
 800a756:	4b4c      	ldr	r3, [pc, #304]	; (800a888 <_dtoa_r+0x618>)
 800a758:	4431      	add	r1, r6
 800a75a:	910d      	str	r1, [sp, #52]	; 0x34
 800a75c:	9908      	ldr	r1, [sp, #32]
 800a75e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a766:	2900      	cmp	r1, #0
 800a768:	d043      	beq.n	800a7f2 <_dtoa_r+0x582>
 800a76a:	494d      	ldr	r1, [pc, #308]	; (800a8a0 <_dtoa_r+0x630>)
 800a76c:	2000      	movs	r0, #0
 800a76e:	f7f6 f86d 	bl	800084c <__aeabi_ddiv>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	f7f5 fd87 	bl	8000288 <__aeabi_dsub>
 800a77a:	9d01      	ldr	r5, [sp, #4]
 800a77c:	4682      	mov	sl, r0
 800a77e:	468b      	mov	fp, r1
 800a780:	4649      	mov	r1, r9
 800a782:	4640      	mov	r0, r8
 800a784:	f7f6 f9e8 	bl	8000b58 <__aeabi_d2iz>
 800a788:	4606      	mov	r6, r0
 800a78a:	f7f5 fecb 	bl	8000524 <__aeabi_i2d>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	3630      	adds	r6, #48	; 0x30
 800a79c:	f805 6b01 	strb.w	r6, [r5], #1
 800a7a0:	4652      	mov	r2, sl
 800a7a2:	465b      	mov	r3, fp
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	f7f6 f998 	bl	8000adc <__aeabi_dcmplt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d163      	bne.n	800a878 <_dtoa_r+0x608>
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	4936      	ldr	r1, [pc, #216]	; (800a890 <_dtoa_r+0x620>)
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	f7f5 fd66 	bl	8000288 <__aeabi_dsub>
 800a7bc:	4652      	mov	r2, sl
 800a7be:	465b      	mov	r3, fp
 800a7c0:	f7f6 f98c 	bl	8000adc <__aeabi_dcmplt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f040 80b5 	bne.w	800a934 <_dtoa_r+0x6c4>
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7cc:	429d      	cmp	r5, r3
 800a7ce:	d081      	beq.n	800a6d4 <_dtoa_r+0x464>
 800a7d0:	4b30      	ldr	r3, [pc, #192]	; (800a894 <_dtoa_r+0x624>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4650      	mov	r0, sl
 800a7d6:	4659      	mov	r1, fp
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	4b2d      	ldr	r3, [pc, #180]	; (800a894 <_dtoa_r+0x624>)
 800a7de:	4682      	mov	sl, r0
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f7f5 ff06 	bl	80005f8 <__aeabi_dmul>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	e7c6      	b.n	800a780 <_dtoa_r+0x510>
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	f7f5 feff 	bl	80005f8 <__aeabi_dmul>
 800a7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7fc:	9d01      	ldr	r5, [sp, #4]
 800a7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a800:	4682      	mov	sl, r0
 800a802:	468b      	mov	fp, r1
 800a804:	4649      	mov	r1, r9
 800a806:	4640      	mov	r0, r8
 800a808:	f7f6 f9a6 	bl	8000b58 <__aeabi_d2iz>
 800a80c:	4606      	mov	r6, r0
 800a80e:	f7f5 fe89 	bl	8000524 <__aeabi_i2d>
 800a812:	3630      	adds	r6, #48	; 0x30
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	4640      	mov	r0, r8
 800a81a:	4649      	mov	r1, r9
 800a81c:	f7f5 fd34 	bl	8000288 <__aeabi_dsub>
 800a820:	f805 6b01 	strb.w	r6, [r5], #1
 800a824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a826:	429d      	cmp	r5, r3
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	d124      	bne.n	800a87c <_dtoa_r+0x60c>
 800a832:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <_dtoa_r+0x630>)
 800a834:	4650      	mov	r0, sl
 800a836:	4659      	mov	r1, fp
 800a838:	f7f5 fd28 	bl	800028c <__adddf3>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4640      	mov	r0, r8
 800a842:	4649      	mov	r1, r9
 800a844:	f7f6 f968 	bl	8000b18 <__aeabi_dcmpgt>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d173      	bne.n	800a934 <_dtoa_r+0x6c4>
 800a84c:	4652      	mov	r2, sl
 800a84e:	465b      	mov	r3, fp
 800a850:	4913      	ldr	r1, [pc, #76]	; (800a8a0 <_dtoa_r+0x630>)
 800a852:	2000      	movs	r0, #0
 800a854:	f7f5 fd18 	bl	8000288 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4640      	mov	r0, r8
 800a85e:	4649      	mov	r1, r9
 800a860:	f7f6 f93c 	bl	8000adc <__aeabi_dcmplt>
 800a864:	2800      	cmp	r0, #0
 800a866:	f43f af35 	beq.w	800a6d4 <_dtoa_r+0x464>
 800a86a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a86c:	1e6b      	subs	r3, r5, #1
 800a86e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a874:	2b30      	cmp	r3, #48	; 0x30
 800a876:	d0f8      	beq.n	800a86a <_dtoa_r+0x5fa>
 800a878:	9700      	str	r7, [sp, #0]
 800a87a:	e049      	b.n	800a910 <_dtoa_r+0x6a0>
 800a87c:	4b05      	ldr	r3, [pc, #20]	; (800a894 <_dtoa_r+0x624>)
 800a87e:	f7f5 febb 	bl	80005f8 <__aeabi_dmul>
 800a882:	4680      	mov	r8, r0
 800a884:	4689      	mov	r9, r1
 800a886:	e7bd      	b.n	800a804 <_dtoa_r+0x594>
 800a888:	0800c368 	.word	0x0800c368
 800a88c:	0800c340 	.word	0x0800c340
 800a890:	3ff00000 	.word	0x3ff00000
 800a894:	40240000 	.word	0x40240000
 800a898:	401c0000 	.word	0x401c0000
 800a89c:	40140000 	.word	0x40140000
 800a8a0:	3fe00000 	.word	0x3fe00000
 800a8a4:	9d01      	ldr	r5, [sp, #4]
 800a8a6:	4656      	mov	r6, sl
 800a8a8:	465f      	mov	r7, fp
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 ffcb 	bl	800084c <__aeabi_ddiv>
 800a8b6:	f7f6 f94f 	bl	8000b58 <__aeabi_d2iz>
 800a8ba:	4682      	mov	sl, r0
 800a8bc:	f7f5 fe32 	bl	8000524 <__aeabi_i2d>
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f7f5 fe98 	bl	80005f8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8d4:	f7f5 fcd8 	bl	8000288 <__aeabi_dsub>
 800a8d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8dc:	9e01      	ldr	r6, [sp, #4]
 800a8de:	9f03      	ldr	r7, [sp, #12]
 800a8e0:	1bae      	subs	r6, r5, r6
 800a8e2:	42b7      	cmp	r7, r6
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	d135      	bne.n	800a956 <_dtoa_r+0x6e6>
 800a8ea:	f7f5 fccf 	bl	800028c <__adddf3>
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	f7f6 f90f 	bl	8000b18 <__aeabi_dcmpgt>
 800a8fa:	b9d0      	cbnz	r0, 800a932 <_dtoa_r+0x6c2>
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a908:	b110      	cbz	r0, 800a910 <_dtoa_r+0x6a0>
 800a90a:	f01a 0f01 	tst.w	sl, #1
 800a90e:	d110      	bne.n	800a932 <_dtoa_r+0x6c2>
 800a910:	4620      	mov	r0, r4
 800a912:	ee18 1a10 	vmov	r1, s16
 800a916:	f000 fd13 	bl	800b340 <_Bfree>
 800a91a:	2300      	movs	r3, #0
 800a91c:	9800      	ldr	r0, [sp, #0]
 800a91e:	702b      	strb	r3, [r5, #0]
 800a920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a922:	3001      	adds	r0, #1
 800a924:	6018      	str	r0, [r3, #0]
 800a926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f43f acf1 	beq.w	800a310 <_dtoa_r+0xa0>
 800a92e:	601d      	str	r5, [r3, #0]
 800a930:	e4ee      	b.n	800a310 <_dtoa_r+0xa0>
 800a932:	9f00      	ldr	r7, [sp, #0]
 800a934:	462b      	mov	r3, r5
 800a936:	461d      	mov	r5, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d106      	bne.n	800a94e <_dtoa_r+0x6de>
 800a940:	9a01      	ldr	r2, [sp, #4]
 800a942:	429a      	cmp	r2, r3
 800a944:	d1f7      	bne.n	800a936 <_dtoa_r+0x6c6>
 800a946:	9901      	ldr	r1, [sp, #4]
 800a948:	2230      	movs	r2, #48	; 0x30
 800a94a:	3701      	adds	r7, #1
 800a94c:	700a      	strb	r2, [r1, #0]
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	3201      	adds	r2, #1
 800a952:	701a      	strb	r2, [r3, #0]
 800a954:	e790      	b.n	800a878 <_dtoa_r+0x608>
 800a956:	4ba6      	ldr	r3, [pc, #664]	; (800abf0 <_dtoa_r+0x980>)
 800a958:	2200      	movs	r2, #0
 800a95a:	f7f5 fe4d 	bl	80005f8 <__aeabi_dmul>
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	f7f6 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d09d      	beq.n	800a8aa <_dtoa_r+0x63a>
 800a96e:	e7cf      	b.n	800a910 <_dtoa_r+0x6a0>
 800a970:	9a08      	ldr	r2, [sp, #32]
 800a972:	2a00      	cmp	r2, #0
 800a974:	f000 80d7 	beq.w	800ab26 <_dtoa_r+0x8b6>
 800a978:	9a06      	ldr	r2, [sp, #24]
 800a97a:	2a01      	cmp	r2, #1
 800a97c:	f300 80ba 	bgt.w	800aaf4 <_dtoa_r+0x884>
 800a980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a982:	2a00      	cmp	r2, #0
 800a984:	f000 80b2 	beq.w	800aaec <_dtoa_r+0x87c>
 800a988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a98c:	9e07      	ldr	r6, [sp, #28]
 800a98e:	9d04      	ldr	r5, [sp, #16]
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	441a      	add	r2, r3
 800a994:	9204      	str	r2, [sp, #16]
 800a996:	9a05      	ldr	r2, [sp, #20]
 800a998:	2101      	movs	r1, #1
 800a99a:	441a      	add	r2, r3
 800a99c:	4620      	mov	r0, r4
 800a99e:	9205      	str	r2, [sp, #20]
 800a9a0:	f000 fd86 	bl	800b4b0 <__i2b>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	dd0c      	ble.n	800a9c4 <_dtoa_r+0x754>
 800a9aa:	9b05      	ldr	r3, [sp, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd09      	ble.n	800a9c4 <_dtoa_r+0x754>
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	bfa8      	it	ge
 800a9b6:	462b      	movge	r3, r5
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	9204      	str	r2, [sp, #16]
 800a9bc:	9a05      	ldr	r2, [sp, #20]
 800a9be:	1aed      	subs	r5, r5, r3
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	9305      	str	r3, [sp, #20]
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	b31b      	cbz	r3, 800aa10 <_dtoa_r+0x7a0>
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80af 	beq.w	800ab2e <_dtoa_r+0x8be>
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	dd13      	ble.n	800a9fc <_dtoa_r+0x78c>
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 fe29 	bl	800b630 <__pow5mult>
 800a9de:	ee18 2a10 	vmov	r2, s16
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 fd78 	bl	800b4dc <__multiply>
 800a9ec:	ee18 1a10 	vmov	r1, s16
 800a9f0:	4680      	mov	r8, r0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 fca4 	bl	800b340 <_Bfree>
 800a9f8:	ee08 8a10 	vmov	s16, r8
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	1b9a      	subs	r2, r3, r6
 800aa00:	d006      	beq.n	800aa10 <_dtoa_r+0x7a0>
 800aa02:	ee18 1a10 	vmov	r1, s16
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 fe12 	bl	800b630 <__pow5mult>
 800aa0c:	ee08 0a10 	vmov	s16, r0
 800aa10:	2101      	movs	r1, #1
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fd4c 	bl	800b4b0 <__i2b>
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	f340 8088 	ble.w	800ab32 <_dtoa_r+0x8c2>
 800aa22:	461a      	mov	r2, r3
 800aa24:	4601      	mov	r1, r0
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fe02 	bl	800b630 <__pow5mult>
 800aa2c:	9b06      	ldr	r3, [sp, #24]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	4606      	mov	r6, r0
 800aa32:	f340 8081 	ble.w	800ab38 <_dtoa_r+0x8c8>
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	6933      	ldr	r3, [r6, #16]
 800aa3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa40:	6918      	ldr	r0, [r3, #16]
 800aa42:	f000 fce5 	bl	800b410 <__hi0bits>
 800aa46:	f1c0 0020 	rsb	r0, r0, #32
 800aa4a:	9b05      	ldr	r3, [sp, #20]
 800aa4c:	4418      	add	r0, r3
 800aa4e:	f010 001f 	ands.w	r0, r0, #31
 800aa52:	f000 8092 	beq.w	800ab7a <_dtoa_r+0x90a>
 800aa56:	f1c0 0320 	rsb	r3, r0, #32
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	f340 808a 	ble.w	800ab74 <_dtoa_r+0x904>
 800aa60:	f1c0 001c 	rsb	r0, r0, #28
 800aa64:	9b04      	ldr	r3, [sp, #16]
 800aa66:	4403      	add	r3, r0
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	4403      	add	r3, r0
 800aa6e:	4405      	add	r5, r0
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	9b04      	ldr	r3, [sp, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd07      	ble.n	800aa88 <_dtoa_r+0x818>
 800aa78:	ee18 1a10 	vmov	r1, s16
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 fe30 	bl	800b6e4 <__lshift>
 800aa84:	ee08 0a10 	vmov	s16, r0
 800aa88:	9b05      	ldr	r3, [sp, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd05      	ble.n	800aa9a <_dtoa_r+0x82a>
 800aa8e:	4631      	mov	r1, r6
 800aa90:	461a      	mov	r2, r3
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fe26 	bl	800b6e4 <__lshift>
 800aa98:	4606      	mov	r6, r0
 800aa9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d06e      	beq.n	800ab7e <_dtoa_r+0x90e>
 800aaa0:	ee18 0a10 	vmov	r0, s16
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	f000 fe8d 	bl	800b7c4 <__mcmp>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	da67      	bge.n	800ab7e <_dtoa_r+0x90e>
 800aaae:	9b00      	ldr	r3, [sp, #0]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	ee18 1a10 	vmov	r1, s16
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	220a      	movs	r2, #10
 800aaba:	2300      	movs	r3, #0
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 fc61 	bl	800b384 <__multadd>
 800aac2:	9b08      	ldr	r3, [sp, #32]
 800aac4:	ee08 0a10 	vmov	s16, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 81b1 	beq.w	800ae30 <_dtoa_r+0xbc0>
 800aace:	2300      	movs	r3, #0
 800aad0:	4639      	mov	r1, r7
 800aad2:	220a      	movs	r2, #10
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 fc55 	bl	800b384 <__multadd>
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	4607      	mov	r7, r0
 800aae0:	f300 808e 	bgt.w	800ac00 <_dtoa_r+0x990>
 800aae4:	9b06      	ldr	r3, [sp, #24]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	dc51      	bgt.n	800ab8e <_dtoa_r+0x91e>
 800aaea:	e089      	b.n	800ac00 <_dtoa_r+0x990>
 800aaec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaf2:	e74b      	b.n	800a98c <_dtoa_r+0x71c>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	1e5e      	subs	r6, r3, #1
 800aaf8:	9b07      	ldr	r3, [sp, #28]
 800aafa:	42b3      	cmp	r3, r6
 800aafc:	bfbf      	itttt	lt
 800aafe:	9b07      	ldrlt	r3, [sp, #28]
 800ab00:	9607      	strlt	r6, [sp, #28]
 800ab02:	1af2      	sublt	r2, r6, r3
 800ab04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab06:	bfb6      	itet	lt
 800ab08:	189b      	addlt	r3, r3, r2
 800ab0a:	1b9e      	subge	r6, r3, r6
 800ab0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	bfb8      	it	lt
 800ab12:	2600      	movlt	r6, #0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfb7      	itett	lt
 800ab18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab20:	1a9d      	sublt	r5, r3, r2
 800ab22:	2300      	movlt	r3, #0
 800ab24:	e734      	b.n	800a990 <_dtoa_r+0x720>
 800ab26:	9e07      	ldr	r6, [sp, #28]
 800ab28:	9d04      	ldr	r5, [sp, #16]
 800ab2a:	9f08      	ldr	r7, [sp, #32]
 800ab2c:	e73b      	b.n	800a9a6 <_dtoa_r+0x736>
 800ab2e:	9a07      	ldr	r2, [sp, #28]
 800ab30:	e767      	b.n	800aa02 <_dtoa_r+0x792>
 800ab32:	9b06      	ldr	r3, [sp, #24]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	dc18      	bgt.n	800ab6a <_dtoa_r+0x8fa>
 800ab38:	f1ba 0f00 	cmp.w	sl, #0
 800ab3c:	d115      	bne.n	800ab6a <_dtoa_r+0x8fa>
 800ab3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab42:	b993      	cbnz	r3, 800ab6a <_dtoa_r+0x8fa>
 800ab44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab48:	0d1b      	lsrs	r3, r3, #20
 800ab4a:	051b      	lsls	r3, r3, #20
 800ab4c:	b183      	cbz	r3, 800ab70 <_dtoa_r+0x900>
 800ab4e:	9b04      	ldr	r3, [sp, #16]
 800ab50:	3301      	adds	r3, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	9b05      	ldr	r3, [sp, #20]
 800ab56:	3301      	adds	r3, #1
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	f04f 0801 	mov.w	r8, #1
 800ab5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f af6a 	bne.w	800aa3a <_dtoa_r+0x7ca>
 800ab66:	2001      	movs	r0, #1
 800ab68:	e76f      	b.n	800aa4a <_dtoa_r+0x7da>
 800ab6a:	f04f 0800 	mov.w	r8, #0
 800ab6e:	e7f6      	b.n	800ab5e <_dtoa_r+0x8ee>
 800ab70:	4698      	mov	r8, r3
 800ab72:	e7f4      	b.n	800ab5e <_dtoa_r+0x8ee>
 800ab74:	f43f af7d 	beq.w	800aa72 <_dtoa_r+0x802>
 800ab78:	4618      	mov	r0, r3
 800ab7a:	301c      	adds	r0, #28
 800ab7c:	e772      	b.n	800aa64 <_dtoa_r+0x7f4>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc37      	bgt.n	800abf4 <_dtoa_r+0x984>
 800ab84:	9b06      	ldr	r3, [sp, #24]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	dd34      	ble.n	800abf4 <_dtoa_r+0x984>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	9b02      	ldr	r3, [sp, #8]
 800ab90:	b96b      	cbnz	r3, 800abae <_dtoa_r+0x93e>
 800ab92:	4631      	mov	r1, r6
 800ab94:	2205      	movs	r2, #5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fbf4 	bl	800b384 <__multadd>
 800ab9c:	4601      	mov	r1, r0
 800ab9e:	4606      	mov	r6, r0
 800aba0:	ee18 0a10 	vmov	r0, s16
 800aba4:	f000 fe0e 	bl	800b7c4 <__mcmp>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f73f adbb 	bgt.w	800a724 <_dtoa_r+0x4b4>
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	9d01      	ldr	r5, [sp, #4]
 800abb2:	43db      	mvns	r3, r3
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	4631      	mov	r1, r6
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fbbf 	bl	800b340 <_Bfree>
 800abc2:	2f00      	cmp	r7, #0
 800abc4:	f43f aea4 	beq.w	800a910 <_dtoa_r+0x6a0>
 800abc8:	f1b8 0f00 	cmp.w	r8, #0
 800abcc:	d005      	beq.n	800abda <_dtoa_r+0x96a>
 800abce:	45b8      	cmp	r8, r7
 800abd0:	d003      	beq.n	800abda <_dtoa_r+0x96a>
 800abd2:	4641      	mov	r1, r8
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fbb3 	bl	800b340 <_Bfree>
 800abda:	4639      	mov	r1, r7
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 fbaf 	bl	800b340 <_Bfree>
 800abe2:	e695      	b.n	800a910 <_dtoa_r+0x6a0>
 800abe4:	2600      	movs	r6, #0
 800abe6:	4637      	mov	r7, r6
 800abe8:	e7e1      	b.n	800abae <_dtoa_r+0x93e>
 800abea:	9700      	str	r7, [sp, #0]
 800abec:	4637      	mov	r7, r6
 800abee:	e599      	b.n	800a724 <_dtoa_r+0x4b4>
 800abf0:	40240000 	.word	0x40240000
 800abf4:	9b08      	ldr	r3, [sp, #32]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 80ca 	beq.w	800ad90 <_dtoa_r+0xb20>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	9302      	str	r3, [sp, #8]
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	dd05      	ble.n	800ac10 <_dtoa_r+0x9a0>
 800ac04:	4639      	mov	r1, r7
 800ac06:	462a      	mov	r2, r5
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fd6b 	bl	800b6e4 <__lshift>
 800ac0e:	4607      	mov	r7, r0
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	d05b      	beq.n	800acce <_dtoa_r+0xa5e>
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 fb51 	bl	800b2c0 <_Balloc>
 800ac1e:	4605      	mov	r5, r0
 800ac20:	b928      	cbnz	r0, 800ac2e <_dtoa_r+0x9be>
 800ac22:	4b87      	ldr	r3, [pc, #540]	; (800ae40 <_dtoa_r+0xbd0>)
 800ac24:	4602      	mov	r2, r0
 800ac26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac2a:	f7ff bb3b 	b.w	800a2a4 <_dtoa_r+0x34>
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	3202      	adds	r2, #2
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	f107 010c 	add.w	r1, r7, #12
 800ac38:	300c      	adds	r0, #12
 800ac3a:	f000 fb33 	bl	800b2a4 <memcpy>
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4629      	mov	r1, r5
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 fd4e 	bl	800b6e4 <__lshift>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	f103 0901 	add.w	r9, r3, #1
 800ac4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac52:	4413      	add	r3, r2
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	f00a 0301 	and.w	r3, sl, #1
 800ac5a:	46b8      	mov	r8, r7
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	4607      	mov	r7, r0
 800ac60:	4631      	mov	r1, r6
 800ac62:	ee18 0a10 	vmov	r0, s16
 800ac66:	f7ff fa75 	bl	800a154 <quorem>
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	9002      	str	r0, [sp, #8]
 800ac6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac72:	ee18 0a10 	vmov	r0, s16
 800ac76:	f000 fda5 	bl	800b7c4 <__mcmp>
 800ac7a:	463a      	mov	r2, r7
 800ac7c:	9003      	str	r0, [sp, #12]
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fdbb 	bl	800b7fc <__mdiff>
 800ac86:	68c2      	ldr	r2, [r0, #12]
 800ac88:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	bb02      	cbnz	r2, 800acd2 <_dtoa_r+0xa62>
 800ac90:	4601      	mov	r1, r0
 800ac92:	ee18 0a10 	vmov	r0, s16
 800ac96:	f000 fd95 	bl	800b7c4 <__mcmp>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4620      	mov	r0, r4
 800aca0:	9207      	str	r2, [sp, #28]
 800aca2:	f000 fb4d 	bl	800b340 <_Bfree>
 800aca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800acaa:	ea43 0102 	orr.w	r1, r3, r2
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	430b      	orrs	r3, r1
 800acb2:	464d      	mov	r5, r9
 800acb4:	d10f      	bne.n	800acd6 <_dtoa_r+0xa66>
 800acb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acba:	d02a      	beq.n	800ad12 <_dtoa_r+0xaa2>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dd02      	ble.n	800acc8 <_dtoa_r+0xa58>
 800acc2:	9b02      	ldr	r3, [sp, #8]
 800acc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acc8:	f88b a000 	strb.w	sl, [fp]
 800accc:	e775      	b.n	800abba <_dtoa_r+0x94a>
 800acce:	4638      	mov	r0, r7
 800acd0:	e7ba      	b.n	800ac48 <_dtoa_r+0x9d8>
 800acd2:	2201      	movs	r2, #1
 800acd4:	e7e2      	b.n	800ac9c <_dtoa_r+0xa2c>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	db04      	blt.n	800ace6 <_dtoa_r+0xa76>
 800acdc:	9906      	ldr	r1, [sp, #24]
 800acde:	430b      	orrs	r3, r1
 800ace0:	9904      	ldr	r1, [sp, #16]
 800ace2:	430b      	orrs	r3, r1
 800ace4:	d122      	bne.n	800ad2c <_dtoa_r+0xabc>
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	ddee      	ble.n	800acc8 <_dtoa_r+0xa58>
 800acea:	ee18 1a10 	vmov	r1, s16
 800acee:	2201      	movs	r2, #1
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 fcf7 	bl	800b6e4 <__lshift>
 800acf6:	4631      	mov	r1, r6
 800acf8:	ee08 0a10 	vmov	s16, r0
 800acfc:	f000 fd62 	bl	800b7c4 <__mcmp>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dc03      	bgt.n	800ad0c <_dtoa_r+0xa9c>
 800ad04:	d1e0      	bne.n	800acc8 <_dtoa_r+0xa58>
 800ad06:	f01a 0f01 	tst.w	sl, #1
 800ad0a:	d0dd      	beq.n	800acc8 <_dtoa_r+0xa58>
 800ad0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad10:	d1d7      	bne.n	800acc2 <_dtoa_r+0xa52>
 800ad12:	2339      	movs	r3, #57	; 0x39
 800ad14:	f88b 3000 	strb.w	r3, [fp]
 800ad18:	462b      	mov	r3, r5
 800ad1a:	461d      	mov	r5, r3
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad22:	2a39      	cmp	r2, #57	; 0x39
 800ad24:	d071      	beq.n	800ae0a <_dtoa_r+0xb9a>
 800ad26:	3201      	adds	r2, #1
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	e746      	b.n	800abba <_dtoa_r+0x94a>
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	dd07      	ble.n	800ad40 <_dtoa_r+0xad0>
 800ad30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad34:	d0ed      	beq.n	800ad12 <_dtoa_r+0xaa2>
 800ad36:	f10a 0301 	add.w	r3, sl, #1
 800ad3a:	f88b 3000 	strb.w	r3, [fp]
 800ad3e:	e73c      	b.n	800abba <_dtoa_r+0x94a>
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad46:	4599      	cmp	r9, r3
 800ad48:	d047      	beq.n	800adda <_dtoa_r+0xb6a>
 800ad4a:	ee18 1a10 	vmov	r1, s16
 800ad4e:	2300      	movs	r3, #0
 800ad50:	220a      	movs	r2, #10
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 fb16 	bl	800b384 <__multadd>
 800ad58:	45b8      	cmp	r8, r7
 800ad5a:	ee08 0a10 	vmov	s16, r0
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	f04f 020a 	mov.w	r2, #10
 800ad66:	4641      	mov	r1, r8
 800ad68:	4620      	mov	r0, r4
 800ad6a:	d106      	bne.n	800ad7a <_dtoa_r+0xb0a>
 800ad6c:	f000 fb0a 	bl	800b384 <__multadd>
 800ad70:	4680      	mov	r8, r0
 800ad72:	4607      	mov	r7, r0
 800ad74:	f109 0901 	add.w	r9, r9, #1
 800ad78:	e772      	b.n	800ac60 <_dtoa_r+0x9f0>
 800ad7a:	f000 fb03 	bl	800b384 <__multadd>
 800ad7e:	4639      	mov	r1, r7
 800ad80:	4680      	mov	r8, r0
 800ad82:	2300      	movs	r3, #0
 800ad84:	220a      	movs	r2, #10
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 fafc 	bl	800b384 <__multadd>
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	e7f1      	b.n	800ad74 <_dtoa_r+0xb04>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	9302      	str	r3, [sp, #8]
 800ad94:	9d01      	ldr	r5, [sp, #4]
 800ad96:	ee18 0a10 	vmov	r0, s16
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	f7ff f9da 	bl	800a154 <quorem>
 800ada0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ada4:	9b01      	ldr	r3, [sp, #4]
 800ada6:	f805 ab01 	strb.w	sl, [r5], #1
 800adaa:	1aea      	subs	r2, r5, r3
 800adac:	9b02      	ldr	r3, [sp, #8]
 800adae:	4293      	cmp	r3, r2
 800adb0:	dd09      	ble.n	800adc6 <_dtoa_r+0xb56>
 800adb2:	ee18 1a10 	vmov	r1, s16
 800adb6:	2300      	movs	r3, #0
 800adb8:	220a      	movs	r2, #10
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fae2 	bl	800b384 <__multadd>
 800adc0:	ee08 0a10 	vmov	s16, r0
 800adc4:	e7e7      	b.n	800ad96 <_dtoa_r+0xb26>
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bfc8      	it	gt
 800adcc:	461d      	movgt	r5, r3
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	bfd8      	it	le
 800add2:	2501      	movle	r5, #1
 800add4:	441d      	add	r5, r3
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	ee18 1a10 	vmov	r1, s16
 800adde:	2201      	movs	r2, #1
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fc7f 	bl	800b6e4 <__lshift>
 800ade6:	4631      	mov	r1, r6
 800ade8:	ee08 0a10 	vmov	s16, r0
 800adec:	f000 fcea 	bl	800b7c4 <__mcmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	dc91      	bgt.n	800ad18 <_dtoa_r+0xaa8>
 800adf4:	d102      	bne.n	800adfc <_dtoa_r+0xb8c>
 800adf6:	f01a 0f01 	tst.w	sl, #1
 800adfa:	d18d      	bne.n	800ad18 <_dtoa_r+0xaa8>
 800adfc:	462b      	mov	r3, r5
 800adfe:	461d      	mov	r5, r3
 800ae00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae04:	2a30      	cmp	r2, #48	; 0x30
 800ae06:	d0fa      	beq.n	800adfe <_dtoa_r+0xb8e>
 800ae08:	e6d7      	b.n	800abba <_dtoa_r+0x94a>
 800ae0a:	9a01      	ldr	r2, [sp, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d184      	bne.n	800ad1a <_dtoa_r+0xaaa>
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	2331      	movs	r3, #49	; 0x31
 800ae18:	7013      	strb	r3, [r2, #0]
 800ae1a:	e6ce      	b.n	800abba <_dtoa_r+0x94a>
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <_dtoa_r+0xbd4>)
 800ae1e:	f7ff ba95 	b.w	800a34c <_dtoa_r+0xdc>
 800ae22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f47f aa6e 	bne.w	800a306 <_dtoa_r+0x96>
 800ae2a:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <_dtoa_r+0xbd8>)
 800ae2c:	f7ff ba8e 	b.w	800a34c <_dtoa_r+0xdc>
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dcae      	bgt.n	800ad94 <_dtoa_r+0xb24>
 800ae36:	9b06      	ldr	r3, [sp, #24]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	f73f aea8 	bgt.w	800ab8e <_dtoa_r+0x91e>
 800ae3e:	e7a9      	b.n	800ad94 <_dtoa_r+0xb24>
 800ae40:	0800c26f 	.word	0x0800c26f
 800ae44:	0800c1cc 	.word	0x0800c1cc
 800ae48:	0800c1f0 	.word	0x0800c1f0

0800ae4c <__sflush_r>:
 800ae4c:	898a      	ldrh	r2, [r1, #12]
 800ae4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae52:	4605      	mov	r5, r0
 800ae54:	0710      	lsls	r0, r2, #28
 800ae56:	460c      	mov	r4, r1
 800ae58:	d458      	bmi.n	800af0c <__sflush_r+0xc0>
 800ae5a:	684b      	ldr	r3, [r1, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dc05      	bgt.n	800ae6c <__sflush_r+0x20>
 800ae60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dc02      	bgt.n	800ae6c <__sflush_r+0x20>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	d0f9      	beq.n	800ae66 <__sflush_r+0x1a>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae78:	682f      	ldr	r7, [r5, #0]
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	d032      	beq.n	800aee4 <__sflush_r+0x98>
 800ae7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	075a      	lsls	r2, r3, #29
 800ae84:	d505      	bpl.n	800ae92 <__sflush_r+0x46>
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	1ac0      	subs	r0, r0, r3
 800ae8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae8c:	b10b      	cbz	r3, 800ae92 <__sflush_r+0x46>
 800ae8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae90:	1ac0      	subs	r0, r0, r3
 800ae92:	2300      	movs	r3, #0
 800ae94:	4602      	mov	r2, r0
 800ae96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae98:	6a21      	ldr	r1, [r4, #32]
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b0      	blx	r6
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	d106      	bne.n	800aeb2 <__sflush_r+0x66>
 800aea4:	6829      	ldr	r1, [r5, #0]
 800aea6:	291d      	cmp	r1, #29
 800aea8:	d82c      	bhi.n	800af04 <__sflush_r+0xb8>
 800aeaa:	4a2a      	ldr	r2, [pc, #168]	; (800af54 <__sflush_r+0x108>)
 800aeac:	40ca      	lsrs	r2, r1
 800aeae:	07d6      	lsls	r6, r2, #31
 800aeb0:	d528      	bpl.n	800af04 <__sflush_r+0xb8>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	6062      	str	r2, [r4, #4]
 800aeb6:	04d9      	lsls	r1, r3, #19
 800aeb8:	6922      	ldr	r2, [r4, #16]
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	d504      	bpl.n	800aec8 <__sflush_r+0x7c>
 800aebe:	1c42      	adds	r2, r0, #1
 800aec0:	d101      	bne.n	800aec6 <__sflush_r+0x7a>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	b903      	cbnz	r3, 800aec8 <__sflush_r+0x7c>
 800aec6:	6560      	str	r0, [r4, #84]	; 0x54
 800aec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeca:	602f      	str	r7, [r5, #0]
 800aecc:	2900      	cmp	r1, #0
 800aece:	d0ca      	beq.n	800ae66 <__sflush_r+0x1a>
 800aed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed4:	4299      	cmp	r1, r3
 800aed6:	d002      	beq.n	800aede <__sflush_r+0x92>
 800aed8:	4628      	mov	r0, r5
 800aeda:	f000 fd8b 	bl	800b9f4 <_free_r>
 800aede:	2000      	movs	r0, #0
 800aee0:	6360      	str	r0, [r4, #52]	; 0x34
 800aee2:	e7c1      	b.n	800ae68 <__sflush_r+0x1c>
 800aee4:	6a21      	ldr	r1, [r4, #32]
 800aee6:	2301      	movs	r3, #1
 800aee8:	4628      	mov	r0, r5
 800aeea:	47b0      	blx	r6
 800aeec:	1c41      	adds	r1, r0, #1
 800aeee:	d1c7      	bne.n	800ae80 <__sflush_r+0x34>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0c4      	beq.n	800ae80 <__sflush_r+0x34>
 800aef6:	2b1d      	cmp	r3, #29
 800aef8:	d001      	beq.n	800aefe <__sflush_r+0xb2>
 800aefa:	2b16      	cmp	r3, #22
 800aefc:	d101      	bne.n	800af02 <__sflush_r+0xb6>
 800aefe:	602f      	str	r7, [r5, #0]
 800af00:	e7b1      	b.n	800ae66 <__sflush_r+0x1a>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	e7ad      	b.n	800ae68 <__sflush_r+0x1c>
 800af0c:	690f      	ldr	r7, [r1, #16]
 800af0e:	2f00      	cmp	r7, #0
 800af10:	d0a9      	beq.n	800ae66 <__sflush_r+0x1a>
 800af12:	0793      	lsls	r3, r2, #30
 800af14:	680e      	ldr	r6, [r1, #0]
 800af16:	bf08      	it	eq
 800af18:	694b      	ldreq	r3, [r1, #20]
 800af1a:	600f      	str	r7, [r1, #0]
 800af1c:	bf18      	it	ne
 800af1e:	2300      	movne	r3, #0
 800af20:	eba6 0807 	sub.w	r8, r6, r7
 800af24:	608b      	str	r3, [r1, #8]
 800af26:	f1b8 0f00 	cmp.w	r8, #0
 800af2a:	dd9c      	ble.n	800ae66 <__sflush_r+0x1a>
 800af2c:	6a21      	ldr	r1, [r4, #32]
 800af2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af30:	4643      	mov	r3, r8
 800af32:	463a      	mov	r2, r7
 800af34:	4628      	mov	r0, r5
 800af36:	47b0      	blx	r6
 800af38:	2800      	cmp	r0, #0
 800af3a:	dc06      	bgt.n	800af4a <__sflush_r+0xfe>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e78e      	b.n	800ae68 <__sflush_r+0x1c>
 800af4a:	4407      	add	r7, r0
 800af4c:	eba8 0800 	sub.w	r8, r8, r0
 800af50:	e7e9      	b.n	800af26 <__sflush_r+0xda>
 800af52:	bf00      	nop
 800af54:	20400001 	.word	0x20400001

0800af58 <_fflush_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	690b      	ldr	r3, [r1, #16]
 800af5c:	4605      	mov	r5, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	b913      	cbnz	r3, 800af68 <_fflush_r+0x10>
 800af62:	2500      	movs	r5, #0
 800af64:	4628      	mov	r0, r5
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	b118      	cbz	r0, 800af72 <_fflush_r+0x1a>
 800af6a:	6983      	ldr	r3, [r0, #24]
 800af6c:	b90b      	cbnz	r3, 800af72 <_fflush_r+0x1a>
 800af6e:	f000 f887 	bl	800b080 <__sinit>
 800af72:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <_fflush_r+0x6c>)
 800af74:	429c      	cmp	r4, r3
 800af76:	d11b      	bne.n	800afb0 <_fflush_r+0x58>
 800af78:	686c      	ldr	r4, [r5, #4]
 800af7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0ef      	beq.n	800af62 <_fflush_r+0xa>
 800af82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af84:	07d0      	lsls	r0, r2, #31
 800af86:	d404      	bmi.n	800af92 <_fflush_r+0x3a>
 800af88:	0599      	lsls	r1, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_fflush_r+0x3a>
 800af8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af8e:	f000 f91a 	bl	800b1c6 <__retarget_lock_acquire_recursive>
 800af92:	4628      	mov	r0, r5
 800af94:	4621      	mov	r1, r4
 800af96:	f7ff ff59 	bl	800ae4c <__sflush_r>
 800af9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af9c:	07da      	lsls	r2, r3, #31
 800af9e:	4605      	mov	r5, r0
 800afa0:	d4e0      	bmi.n	800af64 <_fflush_r+0xc>
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	059b      	lsls	r3, r3, #22
 800afa6:	d4dd      	bmi.n	800af64 <_fflush_r+0xc>
 800afa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afaa:	f000 f90d 	bl	800b1c8 <__retarget_lock_release_recursive>
 800afae:	e7d9      	b.n	800af64 <_fflush_r+0xc>
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <_fflush_r+0x70>)
 800afb2:	429c      	cmp	r4, r3
 800afb4:	d101      	bne.n	800afba <_fflush_r+0x62>
 800afb6:	68ac      	ldr	r4, [r5, #8]
 800afb8:	e7df      	b.n	800af7a <_fflush_r+0x22>
 800afba:	4b04      	ldr	r3, [pc, #16]	; (800afcc <_fflush_r+0x74>)
 800afbc:	429c      	cmp	r4, r3
 800afbe:	bf08      	it	eq
 800afc0:	68ec      	ldreq	r4, [r5, #12]
 800afc2:	e7da      	b.n	800af7a <_fflush_r+0x22>
 800afc4:	0800c2a0 	.word	0x0800c2a0
 800afc8:	0800c2c0 	.word	0x0800c2c0
 800afcc:	0800c280 	.word	0x0800c280

0800afd0 <std>:
 800afd0:	2300      	movs	r3, #0
 800afd2:	b510      	push	{r4, lr}
 800afd4:	4604      	mov	r4, r0
 800afd6:	e9c0 3300 	strd	r3, r3, [r0]
 800afda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afde:	6083      	str	r3, [r0, #8]
 800afe0:	8181      	strh	r1, [r0, #12]
 800afe2:	6643      	str	r3, [r0, #100]	; 0x64
 800afe4:	81c2      	strh	r2, [r0, #14]
 800afe6:	6183      	str	r3, [r0, #24]
 800afe8:	4619      	mov	r1, r3
 800afea:	2208      	movs	r2, #8
 800afec:	305c      	adds	r0, #92	; 0x5c
 800afee:	f7fe faf1 	bl	80095d4 <memset>
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <std+0x38>)
 800aff4:	6263      	str	r3, [r4, #36]	; 0x24
 800aff6:	4b05      	ldr	r3, [pc, #20]	; (800b00c <std+0x3c>)
 800aff8:	62a3      	str	r3, [r4, #40]	; 0x28
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <std+0x40>)
 800affc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800affe:	4b05      	ldr	r3, [pc, #20]	; (800b014 <std+0x44>)
 800b000:	6224      	str	r4, [r4, #32]
 800b002:	6323      	str	r3, [r4, #48]	; 0x30
 800b004:	bd10      	pop	{r4, pc}
 800b006:	bf00      	nop
 800b008:	0800be89 	.word	0x0800be89
 800b00c:	0800beab 	.word	0x0800beab
 800b010:	0800bee3 	.word	0x0800bee3
 800b014:	0800bf07 	.word	0x0800bf07

0800b018 <_cleanup_r>:
 800b018:	4901      	ldr	r1, [pc, #4]	; (800b020 <_cleanup_r+0x8>)
 800b01a:	f000 b8af 	b.w	800b17c <_fwalk_reent>
 800b01e:	bf00      	nop
 800b020:	0800af59 	.word	0x0800af59

0800b024 <__sfmoreglue>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	2268      	movs	r2, #104	; 0x68
 800b028:	1e4d      	subs	r5, r1, #1
 800b02a:	4355      	muls	r5, r2
 800b02c:	460e      	mov	r6, r1
 800b02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b032:	f000 fd4b 	bl	800bacc <_malloc_r>
 800b036:	4604      	mov	r4, r0
 800b038:	b140      	cbz	r0, 800b04c <__sfmoreglue+0x28>
 800b03a:	2100      	movs	r1, #0
 800b03c:	e9c0 1600 	strd	r1, r6, [r0]
 800b040:	300c      	adds	r0, #12
 800b042:	60a0      	str	r0, [r4, #8]
 800b044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b048:	f7fe fac4 	bl	80095d4 <memset>
 800b04c:	4620      	mov	r0, r4
 800b04e:	bd70      	pop	{r4, r5, r6, pc}

0800b050 <__sfp_lock_acquire>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__sfp_lock_acquire+0x8>)
 800b052:	f000 b8b8 	b.w	800b1c6 <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	20002005 	.word	0x20002005

0800b05c <__sfp_lock_release>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__sfp_lock_release+0x8>)
 800b05e:	f000 b8b3 	b.w	800b1c8 <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	20002005 	.word	0x20002005

0800b068 <__sinit_lock_acquire>:
 800b068:	4801      	ldr	r0, [pc, #4]	; (800b070 <__sinit_lock_acquire+0x8>)
 800b06a:	f000 b8ac 	b.w	800b1c6 <__retarget_lock_acquire_recursive>
 800b06e:	bf00      	nop
 800b070:	20002006 	.word	0x20002006

0800b074 <__sinit_lock_release>:
 800b074:	4801      	ldr	r0, [pc, #4]	; (800b07c <__sinit_lock_release+0x8>)
 800b076:	f000 b8a7 	b.w	800b1c8 <__retarget_lock_release_recursive>
 800b07a:	bf00      	nop
 800b07c:	20002006 	.word	0x20002006

0800b080 <__sinit>:
 800b080:	b510      	push	{r4, lr}
 800b082:	4604      	mov	r4, r0
 800b084:	f7ff fff0 	bl	800b068 <__sinit_lock_acquire>
 800b088:	69a3      	ldr	r3, [r4, #24]
 800b08a:	b11b      	cbz	r3, 800b094 <__sinit+0x14>
 800b08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b090:	f7ff bff0 	b.w	800b074 <__sinit_lock_release>
 800b094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b098:	6523      	str	r3, [r4, #80]	; 0x50
 800b09a:	4b13      	ldr	r3, [pc, #76]	; (800b0e8 <__sinit+0x68>)
 800b09c:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <__sinit+0x6c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	bf04      	itt	eq
 800b0a6:	2301      	moveq	r3, #1
 800b0a8:	61a3      	streq	r3, [r4, #24]
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 f820 	bl	800b0f0 <__sfp>
 800b0b0:	6060      	str	r0, [r4, #4]
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 f81c 	bl	800b0f0 <__sfp>
 800b0b8:	60a0      	str	r0, [r4, #8]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 f818 	bl	800b0f0 <__sfp>
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	60e0      	str	r0, [r4, #12]
 800b0c4:	2104      	movs	r1, #4
 800b0c6:	6860      	ldr	r0, [r4, #4]
 800b0c8:	f7ff ff82 	bl	800afd0 <std>
 800b0cc:	68a0      	ldr	r0, [r4, #8]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	2109      	movs	r1, #9
 800b0d2:	f7ff ff7d 	bl	800afd0 <std>
 800b0d6:	68e0      	ldr	r0, [r4, #12]
 800b0d8:	2202      	movs	r2, #2
 800b0da:	2112      	movs	r1, #18
 800b0dc:	f7ff ff78 	bl	800afd0 <std>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	61a3      	str	r3, [r4, #24]
 800b0e4:	e7d2      	b.n	800b08c <__sinit+0xc>
 800b0e6:	bf00      	nop
 800b0e8:	0800c1b8 	.word	0x0800c1b8
 800b0ec:	0800b019 	.word	0x0800b019

0800b0f0 <__sfp>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	4607      	mov	r7, r0
 800b0f4:	f7ff ffac 	bl	800b050 <__sfp_lock_acquire>
 800b0f8:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <__sfp+0x84>)
 800b0fa:	681e      	ldr	r6, [r3, #0]
 800b0fc:	69b3      	ldr	r3, [r6, #24]
 800b0fe:	b913      	cbnz	r3, 800b106 <__sfp+0x16>
 800b100:	4630      	mov	r0, r6
 800b102:	f7ff ffbd 	bl	800b080 <__sinit>
 800b106:	3648      	adds	r6, #72	; 0x48
 800b108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	d503      	bpl.n	800b118 <__sfp+0x28>
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	b30b      	cbz	r3, 800b158 <__sfp+0x68>
 800b114:	6836      	ldr	r6, [r6, #0]
 800b116:	e7f7      	b.n	800b108 <__sfp+0x18>
 800b118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b11c:	b9d5      	cbnz	r5, 800b154 <__sfp+0x64>
 800b11e:	4b16      	ldr	r3, [pc, #88]	; (800b178 <__sfp+0x88>)
 800b120:	60e3      	str	r3, [r4, #12]
 800b122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b126:	6665      	str	r5, [r4, #100]	; 0x64
 800b128:	f000 f84c 	bl	800b1c4 <__retarget_lock_init_recursive>
 800b12c:	f7ff ff96 	bl	800b05c <__sfp_lock_release>
 800b130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b138:	6025      	str	r5, [r4, #0]
 800b13a:	61a5      	str	r5, [r4, #24]
 800b13c:	2208      	movs	r2, #8
 800b13e:	4629      	mov	r1, r5
 800b140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b144:	f7fe fa46 	bl	80095d4 <memset>
 800b148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b150:	4620      	mov	r0, r4
 800b152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b154:	3468      	adds	r4, #104	; 0x68
 800b156:	e7d9      	b.n	800b10c <__sfp+0x1c>
 800b158:	2104      	movs	r1, #4
 800b15a:	4638      	mov	r0, r7
 800b15c:	f7ff ff62 	bl	800b024 <__sfmoreglue>
 800b160:	4604      	mov	r4, r0
 800b162:	6030      	str	r0, [r6, #0]
 800b164:	2800      	cmp	r0, #0
 800b166:	d1d5      	bne.n	800b114 <__sfp+0x24>
 800b168:	f7ff ff78 	bl	800b05c <__sfp_lock_release>
 800b16c:	230c      	movs	r3, #12
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	e7ee      	b.n	800b150 <__sfp+0x60>
 800b172:	bf00      	nop
 800b174:	0800c1b8 	.word	0x0800c1b8
 800b178:	ffff0001 	.word	0xffff0001

0800b17c <_fwalk_reent>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	4606      	mov	r6, r0
 800b182:	4688      	mov	r8, r1
 800b184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b188:	2700      	movs	r7, #0
 800b18a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b18e:	f1b9 0901 	subs.w	r9, r9, #1
 800b192:	d505      	bpl.n	800b1a0 <_fwalk_reent+0x24>
 800b194:	6824      	ldr	r4, [r4, #0]
 800b196:	2c00      	cmp	r4, #0
 800b198:	d1f7      	bne.n	800b18a <_fwalk_reent+0xe>
 800b19a:	4638      	mov	r0, r7
 800b19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a0:	89ab      	ldrh	r3, [r5, #12]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d907      	bls.n	800b1b6 <_fwalk_reent+0x3a>
 800b1a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	d003      	beq.n	800b1b6 <_fwalk_reent+0x3a>
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	47c0      	blx	r8
 800b1b4:	4307      	orrs	r7, r0
 800b1b6:	3568      	adds	r5, #104	; 0x68
 800b1b8:	e7e9      	b.n	800b18e <_fwalk_reent+0x12>
	...

0800b1bc <_localeconv_r>:
 800b1bc:	4800      	ldr	r0, [pc, #0]	; (800b1c0 <_localeconv_r+0x4>)
 800b1be:	4770      	bx	lr
 800b1c0:	20000250 	.word	0x20000250

0800b1c4 <__retarget_lock_init_recursive>:
 800b1c4:	4770      	bx	lr

0800b1c6 <__retarget_lock_acquire_recursive>:
 800b1c6:	4770      	bx	lr

0800b1c8 <__retarget_lock_release_recursive>:
 800b1c8:	4770      	bx	lr

0800b1ca <__swhatbuf_r>:
 800b1ca:	b570      	push	{r4, r5, r6, lr}
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d2:	2900      	cmp	r1, #0
 800b1d4:	b096      	sub	sp, #88	; 0x58
 800b1d6:	4614      	mov	r4, r2
 800b1d8:	461d      	mov	r5, r3
 800b1da:	da08      	bge.n	800b1ee <__swhatbuf_r+0x24>
 800b1dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	602a      	str	r2, [r5, #0]
 800b1e4:	061a      	lsls	r2, r3, #24
 800b1e6:	d410      	bmi.n	800b20a <__swhatbuf_r+0x40>
 800b1e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ec:	e00e      	b.n	800b20c <__swhatbuf_r+0x42>
 800b1ee:	466a      	mov	r2, sp
 800b1f0:	f000 fee0 	bl	800bfb4 <_fstat_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	dbf1      	blt.n	800b1dc <__swhatbuf_r+0x12>
 800b1f8:	9a01      	ldr	r2, [sp, #4]
 800b1fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b202:	425a      	negs	r2, r3
 800b204:	415a      	adcs	r2, r3
 800b206:	602a      	str	r2, [r5, #0]
 800b208:	e7ee      	b.n	800b1e8 <__swhatbuf_r+0x1e>
 800b20a:	2340      	movs	r3, #64	; 0x40
 800b20c:	2000      	movs	r0, #0
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	b016      	add	sp, #88	; 0x58
 800b212:	bd70      	pop	{r4, r5, r6, pc}

0800b214 <__smakebuf_r>:
 800b214:	898b      	ldrh	r3, [r1, #12]
 800b216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b218:	079d      	lsls	r5, r3, #30
 800b21a:	4606      	mov	r6, r0
 800b21c:	460c      	mov	r4, r1
 800b21e:	d507      	bpl.n	800b230 <__smakebuf_r+0x1c>
 800b220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	2301      	movs	r3, #1
 800b22a:	6163      	str	r3, [r4, #20]
 800b22c:	b002      	add	sp, #8
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	ab01      	add	r3, sp, #4
 800b232:	466a      	mov	r2, sp
 800b234:	f7ff ffc9 	bl	800b1ca <__swhatbuf_r>
 800b238:	9900      	ldr	r1, [sp, #0]
 800b23a:	4605      	mov	r5, r0
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 fc45 	bl	800bacc <_malloc_r>
 800b242:	b948      	cbnz	r0, 800b258 <__smakebuf_r+0x44>
 800b244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b248:	059a      	lsls	r2, r3, #22
 800b24a:	d4ef      	bmi.n	800b22c <__smakebuf_r+0x18>
 800b24c:	f023 0303 	bic.w	r3, r3, #3
 800b250:	f043 0302 	orr.w	r3, r3, #2
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	e7e3      	b.n	800b220 <__smakebuf_r+0xc>
 800b258:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <__smakebuf_r+0x7c>)
 800b25a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	6020      	str	r0, [r4, #0]
 800b260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	6163      	str	r3, [r4, #20]
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	6120      	str	r0, [r4, #16]
 800b26e:	b15b      	cbz	r3, 800b288 <__smakebuf_r+0x74>
 800b270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b274:	4630      	mov	r0, r6
 800b276:	f000 feaf 	bl	800bfd8 <_isatty_r>
 800b27a:	b128      	cbz	r0, 800b288 <__smakebuf_r+0x74>
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	f043 0301 	orr.w	r3, r3, #1
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	89a0      	ldrh	r0, [r4, #12]
 800b28a:	4305      	orrs	r5, r0
 800b28c:	81a5      	strh	r5, [r4, #12]
 800b28e:	e7cd      	b.n	800b22c <__smakebuf_r+0x18>
 800b290:	0800b019 	.word	0x0800b019

0800b294 <malloc>:
 800b294:	4b02      	ldr	r3, [pc, #8]	; (800b2a0 <malloc+0xc>)
 800b296:	4601      	mov	r1, r0
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	f000 bc17 	b.w	800bacc <_malloc_r>
 800b29e:	bf00      	nop
 800b2a0:	200000fc 	.word	0x200000fc

0800b2a4 <memcpy>:
 800b2a4:	440a      	add	r2, r1
 800b2a6:	4291      	cmp	r1, r2
 800b2a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2ac:	d100      	bne.n	800b2b0 <memcpy+0xc>
 800b2ae:	4770      	bx	lr
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	d1f9      	bne.n	800b2b2 <memcpy+0xe>
 800b2be:	bd10      	pop	{r4, pc}

0800b2c0 <_Balloc>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	460d      	mov	r5, r1
 800b2c8:	b976      	cbnz	r6, 800b2e8 <_Balloc+0x28>
 800b2ca:	2010      	movs	r0, #16
 800b2cc:	f7ff ffe2 	bl	800b294 <malloc>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	6260      	str	r0, [r4, #36]	; 0x24
 800b2d4:	b920      	cbnz	r0, 800b2e0 <_Balloc+0x20>
 800b2d6:	4b18      	ldr	r3, [pc, #96]	; (800b338 <_Balloc+0x78>)
 800b2d8:	4818      	ldr	r0, [pc, #96]	; (800b33c <_Balloc+0x7c>)
 800b2da:	2166      	movs	r1, #102	; 0x66
 800b2dc:	f000 fe2a 	bl	800bf34 <__assert_func>
 800b2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2e4:	6006      	str	r6, [r0, #0]
 800b2e6:	60c6      	str	r6, [r0, #12]
 800b2e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2ea:	68f3      	ldr	r3, [r6, #12]
 800b2ec:	b183      	cbz	r3, 800b310 <_Balloc+0x50>
 800b2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2f6:	b9b8      	cbnz	r0, 800b328 <_Balloc+0x68>
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b2fe:	1d72      	adds	r2, r6, #5
 800b300:	0092      	lsls	r2, r2, #2
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fb60 	bl	800b9c8 <_calloc_r>
 800b308:	b160      	cbz	r0, 800b324 <_Balloc+0x64>
 800b30a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b30e:	e00e      	b.n	800b32e <_Balloc+0x6e>
 800b310:	2221      	movs	r2, #33	; 0x21
 800b312:	2104      	movs	r1, #4
 800b314:	4620      	mov	r0, r4
 800b316:	f000 fb57 	bl	800b9c8 <_calloc_r>
 800b31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b31c:	60f0      	str	r0, [r6, #12]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e4      	bne.n	800b2ee <_Balloc+0x2e>
 800b324:	2000      	movs	r0, #0
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	6802      	ldr	r2, [r0, #0]
 800b32a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b32e:	2300      	movs	r3, #0
 800b330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b334:	e7f7      	b.n	800b326 <_Balloc+0x66>
 800b336:	bf00      	nop
 800b338:	0800c1fd 	.word	0x0800c1fd
 800b33c:	0800c2e0 	.word	0x0800c2e0

0800b340 <_Bfree>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b344:	4605      	mov	r5, r0
 800b346:	460c      	mov	r4, r1
 800b348:	b976      	cbnz	r6, 800b368 <_Bfree+0x28>
 800b34a:	2010      	movs	r0, #16
 800b34c:	f7ff ffa2 	bl	800b294 <malloc>
 800b350:	4602      	mov	r2, r0
 800b352:	6268      	str	r0, [r5, #36]	; 0x24
 800b354:	b920      	cbnz	r0, 800b360 <_Bfree+0x20>
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <_Bfree+0x3c>)
 800b358:	4809      	ldr	r0, [pc, #36]	; (800b380 <_Bfree+0x40>)
 800b35a:	218a      	movs	r1, #138	; 0x8a
 800b35c:	f000 fdea 	bl	800bf34 <__assert_func>
 800b360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b364:	6006      	str	r6, [r0, #0]
 800b366:	60c6      	str	r6, [r0, #12]
 800b368:	b13c      	cbz	r4, 800b37a <_Bfree+0x3a>
 800b36a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b36c:	6862      	ldr	r2, [r4, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b374:	6021      	str	r1, [r4, #0]
 800b376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	0800c1fd 	.word	0x0800c1fd
 800b380:	0800c2e0 	.word	0x0800c2e0

0800b384 <__multadd>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	690d      	ldr	r5, [r1, #16]
 800b38a:	4607      	mov	r7, r0
 800b38c:	460c      	mov	r4, r1
 800b38e:	461e      	mov	r6, r3
 800b390:	f101 0c14 	add.w	ip, r1, #20
 800b394:	2000      	movs	r0, #0
 800b396:	f8dc 3000 	ldr.w	r3, [ip]
 800b39a:	b299      	uxth	r1, r3
 800b39c:	fb02 6101 	mla	r1, r2, r1, r6
 800b3a0:	0c1e      	lsrs	r6, r3, #16
 800b3a2:	0c0b      	lsrs	r3, r1, #16
 800b3a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b3a8:	b289      	uxth	r1, r1
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3b0:	4285      	cmp	r5, r0
 800b3b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b3b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3ba:	dcec      	bgt.n	800b396 <__multadd+0x12>
 800b3bc:	b30e      	cbz	r6, 800b402 <__multadd+0x7e>
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	dc19      	bgt.n	800b3f8 <__multadd+0x74>
 800b3c4:	6861      	ldr	r1, [r4, #4]
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	3101      	adds	r1, #1
 800b3ca:	f7ff ff79 	bl	800b2c0 <_Balloc>
 800b3ce:	4680      	mov	r8, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <__multadd+0x5a>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <__multadd+0x84>)
 800b3d6:	480d      	ldr	r0, [pc, #52]	; (800b40c <__multadd+0x88>)
 800b3d8:	21b5      	movs	r1, #181	; 0xb5
 800b3da:	f000 fdab 	bl	800bf34 <__assert_func>
 800b3de:	6922      	ldr	r2, [r4, #16]
 800b3e0:	3202      	adds	r2, #2
 800b3e2:	f104 010c 	add.w	r1, r4, #12
 800b3e6:	0092      	lsls	r2, r2, #2
 800b3e8:	300c      	adds	r0, #12
 800b3ea:	f7ff ff5b 	bl	800b2a4 <memcpy>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff ffa5 	bl	800b340 <_Bfree>
 800b3f6:	4644      	mov	r4, r8
 800b3f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	615e      	str	r6, [r3, #20]
 800b400:	6125      	str	r5, [r4, #16]
 800b402:	4620      	mov	r0, r4
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	0800c26f 	.word	0x0800c26f
 800b40c:	0800c2e0 	.word	0x0800c2e0

0800b410 <__hi0bits>:
 800b410:	0c03      	lsrs	r3, r0, #16
 800b412:	041b      	lsls	r3, r3, #16
 800b414:	b9d3      	cbnz	r3, 800b44c <__hi0bits+0x3c>
 800b416:	0400      	lsls	r0, r0, #16
 800b418:	2310      	movs	r3, #16
 800b41a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b41e:	bf04      	itt	eq
 800b420:	0200      	lsleq	r0, r0, #8
 800b422:	3308      	addeq	r3, #8
 800b424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b428:	bf04      	itt	eq
 800b42a:	0100      	lsleq	r0, r0, #4
 800b42c:	3304      	addeq	r3, #4
 800b42e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b432:	bf04      	itt	eq
 800b434:	0080      	lsleq	r0, r0, #2
 800b436:	3302      	addeq	r3, #2
 800b438:	2800      	cmp	r0, #0
 800b43a:	db05      	blt.n	800b448 <__hi0bits+0x38>
 800b43c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b440:	f103 0301 	add.w	r3, r3, #1
 800b444:	bf08      	it	eq
 800b446:	2320      	moveq	r3, #32
 800b448:	4618      	mov	r0, r3
 800b44a:	4770      	bx	lr
 800b44c:	2300      	movs	r3, #0
 800b44e:	e7e4      	b.n	800b41a <__hi0bits+0xa>

0800b450 <__lo0bits>:
 800b450:	6803      	ldr	r3, [r0, #0]
 800b452:	f013 0207 	ands.w	r2, r3, #7
 800b456:	4601      	mov	r1, r0
 800b458:	d00b      	beq.n	800b472 <__lo0bits+0x22>
 800b45a:	07da      	lsls	r2, r3, #31
 800b45c:	d423      	bmi.n	800b4a6 <__lo0bits+0x56>
 800b45e:	0798      	lsls	r0, r3, #30
 800b460:	bf49      	itett	mi
 800b462:	085b      	lsrmi	r3, r3, #1
 800b464:	089b      	lsrpl	r3, r3, #2
 800b466:	2001      	movmi	r0, #1
 800b468:	600b      	strmi	r3, [r1, #0]
 800b46a:	bf5c      	itt	pl
 800b46c:	600b      	strpl	r3, [r1, #0]
 800b46e:	2002      	movpl	r0, #2
 800b470:	4770      	bx	lr
 800b472:	b298      	uxth	r0, r3
 800b474:	b9a8      	cbnz	r0, 800b4a2 <__lo0bits+0x52>
 800b476:	0c1b      	lsrs	r3, r3, #16
 800b478:	2010      	movs	r0, #16
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	b90a      	cbnz	r2, 800b482 <__lo0bits+0x32>
 800b47e:	3008      	adds	r0, #8
 800b480:	0a1b      	lsrs	r3, r3, #8
 800b482:	071a      	lsls	r2, r3, #28
 800b484:	bf04      	itt	eq
 800b486:	091b      	lsreq	r3, r3, #4
 800b488:	3004      	addeq	r0, #4
 800b48a:	079a      	lsls	r2, r3, #30
 800b48c:	bf04      	itt	eq
 800b48e:	089b      	lsreq	r3, r3, #2
 800b490:	3002      	addeq	r0, #2
 800b492:	07da      	lsls	r2, r3, #31
 800b494:	d403      	bmi.n	800b49e <__lo0bits+0x4e>
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	f100 0001 	add.w	r0, r0, #1
 800b49c:	d005      	beq.n	800b4aa <__lo0bits+0x5a>
 800b49e:	600b      	str	r3, [r1, #0]
 800b4a0:	4770      	bx	lr
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	e7e9      	b.n	800b47a <__lo0bits+0x2a>
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	4770      	bx	lr
 800b4aa:	2020      	movs	r0, #32
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <__i2b>:
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	f7ff ff03 	bl	800b2c0 <_Balloc>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	b928      	cbnz	r0, 800b4ca <__i2b+0x1a>
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <__i2b+0x24>)
 800b4c0:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <__i2b+0x28>)
 800b4c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b4c6:	f000 fd35 	bl	800bf34 <__assert_func>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	6144      	str	r4, [r0, #20]
 800b4ce:	6103      	str	r3, [r0, #16]
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800c26f 	.word	0x0800c26f
 800b4d8:	0800c2e0 	.word	0x0800c2e0

0800b4dc <__multiply>:
 800b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	4691      	mov	r9, r2
 800b4e2:	690a      	ldr	r2, [r1, #16]
 800b4e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	bfb8      	it	lt
 800b4ec:	460b      	movlt	r3, r1
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	bfbc      	itt	lt
 800b4f2:	464c      	movlt	r4, r9
 800b4f4:	4699      	movlt	r9, r3
 800b4f6:	6927      	ldr	r7, [r4, #16]
 800b4f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	6861      	ldr	r1, [r4, #4]
 800b500:	eb07 060a 	add.w	r6, r7, sl
 800b504:	42b3      	cmp	r3, r6
 800b506:	b085      	sub	sp, #20
 800b508:	bfb8      	it	lt
 800b50a:	3101      	addlt	r1, #1
 800b50c:	f7ff fed8 	bl	800b2c0 <_Balloc>
 800b510:	b930      	cbnz	r0, 800b520 <__multiply+0x44>
 800b512:	4602      	mov	r2, r0
 800b514:	4b44      	ldr	r3, [pc, #272]	; (800b628 <__multiply+0x14c>)
 800b516:	4845      	ldr	r0, [pc, #276]	; (800b62c <__multiply+0x150>)
 800b518:	f240 115d 	movw	r1, #349	; 0x15d
 800b51c:	f000 fd0a 	bl	800bf34 <__assert_func>
 800b520:	f100 0514 	add.w	r5, r0, #20
 800b524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b528:	462b      	mov	r3, r5
 800b52a:	2200      	movs	r2, #0
 800b52c:	4543      	cmp	r3, r8
 800b52e:	d321      	bcc.n	800b574 <__multiply+0x98>
 800b530:	f104 0314 	add.w	r3, r4, #20
 800b534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b538:	f109 0314 	add.w	r3, r9, #20
 800b53c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b540:	9202      	str	r2, [sp, #8]
 800b542:	1b3a      	subs	r2, r7, r4
 800b544:	3a15      	subs	r2, #21
 800b546:	f022 0203 	bic.w	r2, r2, #3
 800b54a:	3204      	adds	r2, #4
 800b54c:	f104 0115 	add.w	r1, r4, #21
 800b550:	428f      	cmp	r7, r1
 800b552:	bf38      	it	cc
 800b554:	2204      	movcc	r2, #4
 800b556:	9201      	str	r2, [sp, #4]
 800b558:	9a02      	ldr	r2, [sp, #8]
 800b55a:	9303      	str	r3, [sp, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d80c      	bhi.n	800b57a <__multiply+0x9e>
 800b560:	2e00      	cmp	r6, #0
 800b562:	dd03      	ble.n	800b56c <__multiply+0x90>
 800b564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d05a      	beq.n	800b622 <__multiply+0x146>
 800b56c:	6106      	str	r6, [r0, #16]
 800b56e:	b005      	add	sp, #20
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	f843 2b04 	str.w	r2, [r3], #4
 800b578:	e7d8      	b.n	800b52c <__multiply+0x50>
 800b57a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b57e:	f1ba 0f00 	cmp.w	sl, #0
 800b582:	d024      	beq.n	800b5ce <__multiply+0xf2>
 800b584:	f104 0e14 	add.w	lr, r4, #20
 800b588:	46a9      	mov	r9, r5
 800b58a:	f04f 0c00 	mov.w	ip, #0
 800b58e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b592:	f8d9 1000 	ldr.w	r1, [r9]
 800b596:	fa1f fb82 	uxth.w	fp, r2
 800b59a:	b289      	uxth	r1, r1
 800b59c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b5a8:	4461      	add	r1, ip
 800b5aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5b6:	b289      	uxth	r1, r1
 800b5b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5bc:	4577      	cmp	r7, lr
 800b5be:	f849 1b04 	str.w	r1, [r9], #4
 800b5c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5c6:	d8e2      	bhi.n	800b58e <__multiply+0xb2>
 800b5c8:	9a01      	ldr	r2, [sp, #4]
 800b5ca:	f845 c002 	str.w	ip, [r5, r2]
 800b5ce:	9a03      	ldr	r2, [sp, #12]
 800b5d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	f1b9 0f00 	cmp.w	r9, #0
 800b5da:	d020      	beq.n	800b61e <__multiply+0x142>
 800b5dc:	6829      	ldr	r1, [r5, #0]
 800b5de:	f104 0c14 	add.w	ip, r4, #20
 800b5e2:	46ae      	mov	lr, r5
 800b5e4:	f04f 0a00 	mov.w	sl, #0
 800b5e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b5ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b5f4:	4492      	add	sl, r2
 800b5f6:	b289      	uxth	r1, r1
 800b5f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5fc:	f84e 1b04 	str.w	r1, [lr], #4
 800b600:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b604:	f8be 1000 	ldrh.w	r1, [lr]
 800b608:	0c12      	lsrs	r2, r2, #16
 800b60a:	fb09 1102 	mla	r1, r9, r2, r1
 800b60e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b612:	4567      	cmp	r7, ip
 800b614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b618:	d8e6      	bhi.n	800b5e8 <__multiply+0x10c>
 800b61a:	9a01      	ldr	r2, [sp, #4]
 800b61c:	50a9      	str	r1, [r5, r2]
 800b61e:	3504      	adds	r5, #4
 800b620:	e79a      	b.n	800b558 <__multiply+0x7c>
 800b622:	3e01      	subs	r6, #1
 800b624:	e79c      	b.n	800b560 <__multiply+0x84>
 800b626:	bf00      	nop
 800b628:	0800c26f 	.word	0x0800c26f
 800b62c:	0800c2e0 	.word	0x0800c2e0

0800b630 <__pow5mult>:
 800b630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b634:	4615      	mov	r5, r2
 800b636:	f012 0203 	ands.w	r2, r2, #3
 800b63a:	4606      	mov	r6, r0
 800b63c:	460f      	mov	r7, r1
 800b63e:	d007      	beq.n	800b650 <__pow5mult+0x20>
 800b640:	4c25      	ldr	r4, [pc, #148]	; (800b6d8 <__pow5mult+0xa8>)
 800b642:	3a01      	subs	r2, #1
 800b644:	2300      	movs	r3, #0
 800b646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b64a:	f7ff fe9b 	bl	800b384 <__multadd>
 800b64e:	4607      	mov	r7, r0
 800b650:	10ad      	asrs	r5, r5, #2
 800b652:	d03d      	beq.n	800b6d0 <__pow5mult+0xa0>
 800b654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b656:	b97c      	cbnz	r4, 800b678 <__pow5mult+0x48>
 800b658:	2010      	movs	r0, #16
 800b65a:	f7ff fe1b 	bl	800b294 <malloc>
 800b65e:	4602      	mov	r2, r0
 800b660:	6270      	str	r0, [r6, #36]	; 0x24
 800b662:	b928      	cbnz	r0, 800b670 <__pow5mult+0x40>
 800b664:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <__pow5mult+0xac>)
 800b666:	481e      	ldr	r0, [pc, #120]	; (800b6e0 <__pow5mult+0xb0>)
 800b668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b66c:	f000 fc62 	bl	800bf34 <__assert_func>
 800b670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b674:	6004      	str	r4, [r0, #0]
 800b676:	60c4      	str	r4, [r0, #12]
 800b678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b67c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b680:	b94c      	cbnz	r4, 800b696 <__pow5mult+0x66>
 800b682:	f240 2171 	movw	r1, #625	; 0x271
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ff12 	bl	800b4b0 <__i2b>
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b692:	4604      	mov	r4, r0
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	f04f 0900 	mov.w	r9, #0
 800b69a:	07eb      	lsls	r3, r5, #31
 800b69c:	d50a      	bpl.n	800b6b4 <__pow5mult+0x84>
 800b69e:	4639      	mov	r1, r7
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f7ff ff1a 	bl	800b4dc <__multiply>
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff fe47 	bl	800b340 <_Bfree>
 800b6b2:	4647      	mov	r7, r8
 800b6b4:	106d      	asrs	r5, r5, #1
 800b6b6:	d00b      	beq.n	800b6d0 <__pow5mult+0xa0>
 800b6b8:	6820      	ldr	r0, [r4, #0]
 800b6ba:	b938      	cbnz	r0, 800b6cc <__pow5mult+0x9c>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ff0b 	bl	800b4dc <__multiply>
 800b6c6:	6020      	str	r0, [r4, #0]
 800b6c8:	f8c0 9000 	str.w	r9, [r0]
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	e7e4      	b.n	800b69a <__pow5mult+0x6a>
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800c430 	.word	0x0800c430
 800b6dc:	0800c1fd 	.word	0x0800c1fd
 800b6e0:	0800c2e0 	.word	0x0800c2e0

0800b6e4 <__lshift>:
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	6849      	ldr	r1, [r1, #4]
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	4691      	mov	r9, r2
 800b6f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6fc:	f108 0601 	add.w	r6, r8, #1
 800b700:	42b3      	cmp	r3, r6
 800b702:	db0b      	blt.n	800b71c <__lshift+0x38>
 800b704:	4638      	mov	r0, r7
 800b706:	f7ff fddb 	bl	800b2c0 <_Balloc>
 800b70a:	4605      	mov	r5, r0
 800b70c:	b948      	cbnz	r0, 800b722 <__lshift+0x3e>
 800b70e:	4602      	mov	r2, r0
 800b710:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <__lshift+0xd8>)
 800b712:	482b      	ldr	r0, [pc, #172]	; (800b7c0 <__lshift+0xdc>)
 800b714:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b718:	f000 fc0c 	bl	800bf34 <__assert_func>
 800b71c:	3101      	adds	r1, #1
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	e7ee      	b.n	800b700 <__lshift+0x1c>
 800b722:	2300      	movs	r3, #0
 800b724:	f100 0114 	add.w	r1, r0, #20
 800b728:	f100 0210 	add.w	r2, r0, #16
 800b72c:	4618      	mov	r0, r3
 800b72e:	4553      	cmp	r3, sl
 800b730:	db37      	blt.n	800b7a2 <__lshift+0xbe>
 800b732:	6920      	ldr	r0, [r4, #16]
 800b734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b738:	f104 0314 	add.w	r3, r4, #20
 800b73c:	f019 091f 	ands.w	r9, r9, #31
 800b740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b748:	d02f      	beq.n	800b7aa <__lshift+0xc6>
 800b74a:	f1c9 0e20 	rsb	lr, r9, #32
 800b74e:	468a      	mov	sl, r1
 800b750:	f04f 0c00 	mov.w	ip, #0
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	fa02 f209 	lsl.w	r2, r2, r9
 800b75a:	ea42 020c 	orr.w	r2, r2, ip
 800b75e:	f84a 2b04 	str.w	r2, [sl], #4
 800b762:	f853 2b04 	ldr.w	r2, [r3], #4
 800b766:	4298      	cmp	r0, r3
 800b768:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b76c:	d8f2      	bhi.n	800b754 <__lshift+0x70>
 800b76e:	1b03      	subs	r3, r0, r4
 800b770:	3b15      	subs	r3, #21
 800b772:	f023 0303 	bic.w	r3, r3, #3
 800b776:	3304      	adds	r3, #4
 800b778:	f104 0215 	add.w	r2, r4, #21
 800b77c:	4290      	cmp	r0, r2
 800b77e:	bf38      	it	cc
 800b780:	2304      	movcc	r3, #4
 800b782:	f841 c003 	str.w	ip, [r1, r3]
 800b786:	f1bc 0f00 	cmp.w	ip, #0
 800b78a:	d001      	beq.n	800b790 <__lshift+0xac>
 800b78c:	f108 0602 	add.w	r6, r8, #2
 800b790:	3e01      	subs	r6, #1
 800b792:	4638      	mov	r0, r7
 800b794:	612e      	str	r6, [r5, #16]
 800b796:	4621      	mov	r1, r4
 800b798:	f7ff fdd2 	bl	800b340 <_Bfree>
 800b79c:	4628      	mov	r0, r5
 800b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	e7c1      	b.n	800b72e <__lshift+0x4a>
 800b7aa:	3904      	subs	r1, #4
 800b7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7b4:	4298      	cmp	r0, r3
 800b7b6:	d8f9      	bhi.n	800b7ac <__lshift+0xc8>
 800b7b8:	e7ea      	b.n	800b790 <__lshift+0xac>
 800b7ba:	bf00      	nop
 800b7bc:	0800c26f 	.word	0x0800c26f
 800b7c0:	0800c2e0 	.word	0x0800c2e0

0800b7c4 <__mcmp>:
 800b7c4:	b530      	push	{r4, r5, lr}
 800b7c6:	6902      	ldr	r2, [r0, #16]
 800b7c8:	690c      	ldr	r4, [r1, #16]
 800b7ca:	1b12      	subs	r2, r2, r4
 800b7cc:	d10e      	bne.n	800b7ec <__mcmp+0x28>
 800b7ce:	f100 0314 	add.w	r3, r0, #20
 800b7d2:	3114      	adds	r1, #20
 800b7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7e4:	42a5      	cmp	r5, r4
 800b7e6:	d003      	beq.n	800b7f0 <__mcmp+0x2c>
 800b7e8:	d305      	bcc.n	800b7f6 <__mcmp+0x32>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	bd30      	pop	{r4, r5, pc}
 800b7f0:	4283      	cmp	r3, r0
 800b7f2:	d3f3      	bcc.n	800b7dc <__mcmp+0x18>
 800b7f4:	e7fa      	b.n	800b7ec <__mcmp+0x28>
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fa:	e7f7      	b.n	800b7ec <__mcmp+0x28>

0800b7fc <__mdiff>:
 800b7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	4606      	mov	r6, r0
 800b804:	4611      	mov	r1, r2
 800b806:	4620      	mov	r0, r4
 800b808:	4690      	mov	r8, r2
 800b80a:	f7ff ffdb 	bl	800b7c4 <__mcmp>
 800b80e:	1e05      	subs	r5, r0, #0
 800b810:	d110      	bne.n	800b834 <__mdiff+0x38>
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff fd53 	bl	800b2c0 <_Balloc>
 800b81a:	b930      	cbnz	r0, 800b82a <__mdiff+0x2e>
 800b81c:	4b3a      	ldr	r3, [pc, #232]	; (800b908 <__mdiff+0x10c>)
 800b81e:	4602      	mov	r2, r0
 800b820:	f240 2132 	movw	r1, #562	; 0x232
 800b824:	4839      	ldr	r0, [pc, #228]	; (800b90c <__mdiff+0x110>)
 800b826:	f000 fb85 	bl	800bf34 <__assert_func>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b834:	bfa4      	itt	ge
 800b836:	4643      	movge	r3, r8
 800b838:	46a0      	movge	r8, r4
 800b83a:	4630      	mov	r0, r6
 800b83c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b840:	bfa6      	itte	ge
 800b842:	461c      	movge	r4, r3
 800b844:	2500      	movge	r5, #0
 800b846:	2501      	movlt	r5, #1
 800b848:	f7ff fd3a 	bl	800b2c0 <_Balloc>
 800b84c:	b920      	cbnz	r0, 800b858 <__mdiff+0x5c>
 800b84e:	4b2e      	ldr	r3, [pc, #184]	; (800b908 <__mdiff+0x10c>)
 800b850:	4602      	mov	r2, r0
 800b852:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b856:	e7e5      	b.n	800b824 <__mdiff+0x28>
 800b858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b85c:	6926      	ldr	r6, [r4, #16]
 800b85e:	60c5      	str	r5, [r0, #12]
 800b860:	f104 0914 	add.w	r9, r4, #20
 800b864:	f108 0514 	add.w	r5, r8, #20
 800b868:	f100 0e14 	add.w	lr, r0, #20
 800b86c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b874:	f108 0210 	add.w	r2, r8, #16
 800b878:	46f2      	mov	sl, lr
 800b87a:	2100      	movs	r1, #0
 800b87c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b884:	fa1f f883 	uxth.w	r8, r3
 800b888:	fa11 f18b 	uxtah	r1, r1, fp
 800b88c:	0c1b      	lsrs	r3, r3, #16
 800b88e:	eba1 0808 	sub.w	r8, r1, r8
 800b892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b89a:	fa1f f888 	uxth.w	r8, r8
 800b89e:	1419      	asrs	r1, r3, #16
 800b8a0:	454e      	cmp	r6, r9
 800b8a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b8aa:	d8e7      	bhi.n	800b87c <__mdiff+0x80>
 800b8ac:	1b33      	subs	r3, r6, r4
 800b8ae:	3b15      	subs	r3, #21
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	3415      	adds	r4, #21
 800b8b8:	42a6      	cmp	r6, r4
 800b8ba:	bf38      	it	cc
 800b8bc:	2304      	movcc	r3, #4
 800b8be:	441d      	add	r5, r3
 800b8c0:	4473      	add	r3, lr
 800b8c2:	469e      	mov	lr, r3
 800b8c4:	462e      	mov	r6, r5
 800b8c6:	4566      	cmp	r6, ip
 800b8c8:	d30e      	bcc.n	800b8e8 <__mdiff+0xec>
 800b8ca:	f10c 0203 	add.w	r2, ip, #3
 800b8ce:	1b52      	subs	r2, r2, r5
 800b8d0:	f022 0203 	bic.w	r2, r2, #3
 800b8d4:	3d03      	subs	r5, #3
 800b8d6:	45ac      	cmp	ip, r5
 800b8d8:	bf38      	it	cc
 800b8da:	2200      	movcc	r2, #0
 800b8dc:	441a      	add	r2, r3
 800b8de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b8e2:	b17b      	cbz	r3, 800b904 <__mdiff+0x108>
 800b8e4:	6107      	str	r7, [r0, #16]
 800b8e6:	e7a3      	b.n	800b830 <__mdiff+0x34>
 800b8e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8ec:	fa11 f288 	uxtah	r2, r1, r8
 800b8f0:	1414      	asrs	r4, r2, #16
 800b8f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8f6:	b292      	uxth	r2, r2
 800b8f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8fc:	f84e 2b04 	str.w	r2, [lr], #4
 800b900:	1421      	asrs	r1, r4, #16
 800b902:	e7e0      	b.n	800b8c6 <__mdiff+0xca>
 800b904:	3f01      	subs	r7, #1
 800b906:	e7ea      	b.n	800b8de <__mdiff+0xe2>
 800b908:	0800c26f 	.word	0x0800c26f
 800b90c:	0800c2e0 	.word	0x0800c2e0

0800b910 <__d2b>:
 800b910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b914:	4689      	mov	r9, r1
 800b916:	2101      	movs	r1, #1
 800b918:	ec57 6b10 	vmov	r6, r7, d0
 800b91c:	4690      	mov	r8, r2
 800b91e:	f7ff fccf 	bl	800b2c0 <_Balloc>
 800b922:	4604      	mov	r4, r0
 800b924:	b930      	cbnz	r0, 800b934 <__d2b+0x24>
 800b926:	4602      	mov	r2, r0
 800b928:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <__d2b+0xb0>)
 800b92a:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <__d2b+0xb4>)
 800b92c:	f240 310a 	movw	r1, #778	; 0x30a
 800b930:	f000 fb00 	bl	800bf34 <__assert_func>
 800b934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b93c:	bb35      	cbnz	r5, 800b98c <__d2b+0x7c>
 800b93e:	2e00      	cmp	r6, #0
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	d028      	beq.n	800b996 <__d2b+0x86>
 800b944:	4668      	mov	r0, sp
 800b946:	9600      	str	r6, [sp, #0]
 800b948:	f7ff fd82 	bl	800b450 <__lo0bits>
 800b94c:	9900      	ldr	r1, [sp, #0]
 800b94e:	b300      	cbz	r0, 800b992 <__d2b+0x82>
 800b950:	9a01      	ldr	r2, [sp, #4]
 800b952:	f1c0 0320 	rsb	r3, r0, #32
 800b956:	fa02 f303 	lsl.w	r3, r2, r3
 800b95a:	430b      	orrs	r3, r1
 800b95c:	40c2      	lsrs	r2, r0
 800b95e:	6163      	str	r3, [r4, #20]
 800b960:	9201      	str	r2, [sp, #4]
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	61a3      	str	r3, [r4, #24]
 800b966:	2b00      	cmp	r3, #0
 800b968:	bf14      	ite	ne
 800b96a:	2202      	movne	r2, #2
 800b96c:	2201      	moveq	r2, #1
 800b96e:	6122      	str	r2, [r4, #16]
 800b970:	b1d5      	cbz	r5, 800b9a8 <__d2b+0x98>
 800b972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b976:	4405      	add	r5, r0
 800b978:	f8c9 5000 	str.w	r5, [r9]
 800b97c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b980:	f8c8 0000 	str.w	r0, [r8]
 800b984:	4620      	mov	r0, r4
 800b986:	b003      	add	sp, #12
 800b988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b98c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b990:	e7d5      	b.n	800b93e <__d2b+0x2e>
 800b992:	6161      	str	r1, [r4, #20]
 800b994:	e7e5      	b.n	800b962 <__d2b+0x52>
 800b996:	a801      	add	r0, sp, #4
 800b998:	f7ff fd5a 	bl	800b450 <__lo0bits>
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	6122      	str	r2, [r4, #16]
 800b9a4:	3020      	adds	r0, #32
 800b9a6:	e7e3      	b.n	800b970 <__d2b+0x60>
 800b9a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9b0:	f8c9 0000 	str.w	r0, [r9]
 800b9b4:	6918      	ldr	r0, [r3, #16]
 800b9b6:	f7ff fd2b 	bl	800b410 <__hi0bits>
 800b9ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9be:	e7df      	b.n	800b980 <__d2b+0x70>
 800b9c0:	0800c26f 	.word	0x0800c26f
 800b9c4:	0800c2e0 	.word	0x0800c2e0

0800b9c8 <_calloc_r>:
 800b9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ca:	fba1 2402 	umull	r2, r4, r1, r2
 800b9ce:	b94c      	cbnz	r4, 800b9e4 <_calloc_r+0x1c>
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	9201      	str	r2, [sp, #4]
 800b9d4:	f000 f87a 	bl	800bacc <_malloc_r>
 800b9d8:	9a01      	ldr	r2, [sp, #4]
 800b9da:	4605      	mov	r5, r0
 800b9dc:	b930      	cbnz	r0, 800b9ec <_calloc_r+0x24>
 800b9de:	4628      	mov	r0, r5
 800b9e0:	b003      	add	sp, #12
 800b9e2:	bd30      	pop	{r4, r5, pc}
 800b9e4:	220c      	movs	r2, #12
 800b9e6:	6002      	str	r2, [r0, #0]
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	e7f8      	b.n	800b9de <_calloc_r+0x16>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	f7fd fdf1 	bl	80095d4 <memset>
 800b9f2:	e7f4      	b.n	800b9de <_calloc_r+0x16>

0800b9f4 <_free_r>:
 800b9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	d044      	beq.n	800ba84 <_free_r+0x90>
 800b9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9fe:	9001      	str	r0, [sp, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f1a1 0404 	sub.w	r4, r1, #4
 800ba06:	bfb8      	it	lt
 800ba08:	18e4      	addlt	r4, r4, r3
 800ba0a:	f000 fb19 	bl	800c040 <__malloc_lock>
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <_free_r+0x94>)
 800ba10:	9801      	ldr	r0, [sp, #4]
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	b933      	cbnz	r3, 800ba24 <_free_r+0x30>
 800ba16:	6063      	str	r3, [r4, #4]
 800ba18:	6014      	str	r4, [r2, #0]
 800ba1a:	b003      	add	sp, #12
 800ba1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba20:	f000 bb14 	b.w	800c04c <__malloc_unlock>
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	d908      	bls.n	800ba3a <_free_r+0x46>
 800ba28:	6825      	ldr	r5, [r4, #0]
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf01      	itttt	eq
 800ba30:	6819      	ldreq	r1, [r3, #0]
 800ba32:	685b      	ldreq	r3, [r3, #4]
 800ba34:	1949      	addeq	r1, r1, r5
 800ba36:	6021      	streq	r1, [r4, #0]
 800ba38:	e7ed      	b.n	800ba16 <_free_r+0x22>
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	b10b      	cbz	r3, 800ba44 <_free_r+0x50>
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d9fa      	bls.n	800ba3a <_free_r+0x46>
 800ba44:	6811      	ldr	r1, [r2, #0]
 800ba46:	1855      	adds	r5, r2, r1
 800ba48:	42a5      	cmp	r5, r4
 800ba4a:	d10b      	bne.n	800ba64 <_free_r+0x70>
 800ba4c:	6824      	ldr	r4, [r4, #0]
 800ba4e:	4421      	add	r1, r4
 800ba50:	1854      	adds	r4, r2, r1
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	6011      	str	r1, [r2, #0]
 800ba56:	d1e0      	bne.n	800ba1a <_free_r+0x26>
 800ba58:	681c      	ldr	r4, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	6053      	str	r3, [r2, #4]
 800ba5e:	4421      	add	r1, r4
 800ba60:	6011      	str	r1, [r2, #0]
 800ba62:	e7da      	b.n	800ba1a <_free_r+0x26>
 800ba64:	d902      	bls.n	800ba6c <_free_r+0x78>
 800ba66:	230c      	movs	r3, #12
 800ba68:	6003      	str	r3, [r0, #0]
 800ba6a:	e7d6      	b.n	800ba1a <_free_r+0x26>
 800ba6c:	6825      	ldr	r5, [r4, #0]
 800ba6e:	1961      	adds	r1, r4, r5
 800ba70:	428b      	cmp	r3, r1
 800ba72:	bf04      	itt	eq
 800ba74:	6819      	ldreq	r1, [r3, #0]
 800ba76:	685b      	ldreq	r3, [r3, #4]
 800ba78:	6063      	str	r3, [r4, #4]
 800ba7a:	bf04      	itt	eq
 800ba7c:	1949      	addeq	r1, r1, r5
 800ba7e:	6021      	streq	r1, [r4, #0]
 800ba80:	6054      	str	r4, [r2, #4]
 800ba82:	e7ca      	b.n	800ba1a <_free_r+0x26>
 800ba84:	b003      	add	sp, #12
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	20002008 	.word	0x20002008

0800ba8c <sbrk_aligned>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	4e0e      	ldr	r6, [pc, #56]	; (800bac8 <sbrk_aligned+0x3c>)
 800ba90:	460c      	mov	r4, r1
 800ba92:	6831      	ldr	r1, [r6, #0]
 800ba94:	4605      	mov	r5, r0
 800ba96:	b911      	cbnz	r1, 800ba9e <sbrk_aligned+0x12>
 800ba98:	f000 f9e6 	bl	800be68 <_sbrk_r>
 800ba9c:	6030      	str	r0, [r6, #0]
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4628      	mov	r0, r5
 800baa2:	f000 f9e1 	bl	800be68 <_sbrk_r>
 800baa6:	1c43      	adds	r3, r0, #1
 800baa8:	d00a      	beq.n	800bac0 <sbrk_aligned+0x34>
 800baaa:	1cc4      	adds	r4, r0, #3
 800baac:	f024 0403 	bic.w	r4, r4, #3
 800bab0:	42a0      	cmp	r0, r4
 800bab2:	d007      	beq.n	800bac4 <sbrk_aligned+0x38>
 800bab4:	1a21      	subs	r1, r4, r0
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 f9d6 	bl	800be68 <_sbrk_r>
 800babc:	3001      	adds	r0, #1
 800babe:	d101      	bne.n	800bac4 <sbrk_aligned+0x38>
 800bac0:	f04f 34ff 	mov.w	r4, #4294967295
 800bac4:	4620      	mov	r0, r4
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	2000200c 	.word	0x2000200c

0800bacc <_malloc_r>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	1ccd      	adds	r5, r1, #3
 800bad2:	f025 0503 	bic.w	r5, r5, #3
 800bad6:	3508      	adds	r5, #8
 800bad8:	2d0c      	cmp	r5, #12
 800bada:	bf38      	it	cc
 800badc:	250c      	movcc	r5, #12
 800bade:	2d00      	cmp	r5, #0
 800bae0:	4607      	mov	r7, r0
 800bae2:	db01      	blt.n	800bae8 <_malloc_r+0x1c>
 800bae4:	42a9      	cmp	r1, r5
 800bae6:	d905      	bls.n	800baf4 <_malloc_r+0x28>
 800bae8:	230c      	movs	r3, #12
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	2600      	movs	r6, #0
 800baee:	4630      	mov	r0, r6
 800baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf4:	4e2e      	ldr	r6, [pc, #184]	; (800bbb0 <_malloc_r+0xe4>)
 800baf6:	f000 faa3 	bl	800c040 <__malloc_lock>
 800bafa:	6833      	ldr	r3, [r6, #0]
 800bafc:	461c      	mov	r4, r3
 800bafe:	bb34      	cbnz	r4, 800bb4e <_malloc_r+0x82>
 800bb00:	4629      	mov	r1, r5
 800bb02:	4638      	mov	r0, r7
 800bb04:	f7ff ffc2 	bl	800ba8c <sbrk_aligned>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	d14d      	bne.n	800bbaa <_malloc_r+0xde>
 800bb0e:	6834      	ldr	r4, [r6, #0]
 800bb10:	4626      	mov	r6, r4
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d140      	bne.n	800bb98 <_malloc_r+0xcc>
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	eb04 0803 	add.w	r8, r4, r3
 800bb20:	f000 f9a2 	bl	800be68 <_sbrk_r>
 800bb24:	4580      	cmp	r8, r0
 800bb26:	d13a      	bne.n	800bb9e <_malloc_r+0xd2>
 800bb28:	6821      	ldr	r1, [r4, #0]
 800bb2a:	3503      	adds	r5, #3
 800bb2c:	1a6d      	subs	r5, r5, r1
 800bb2e:	f025 0503 	bic.w	r5, r5, #3
 800bb32:	3508      	adds	r5, #8
 800bb34:	2d0c      	cmp	r5, #12
 800bb36:	bf38      	it	cc
 800bb38:	250c      	movcc	r5, #12
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff ffa5 	bl	800ba8c <sbrk_aligned>
 800bb42:	3001      	adds	r0, #1
 800bb44:	d02b      	beq.n	800bb9e <_malloc_r+0xd2>
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	442b      	add	r3, r5
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	e00e      	b.n	800bb6c <_malloc_r+0xa0>
 800bb4e:	6822      	ldr	r2, [r4, #0]
 800bb50:	1b52      	subs	r2, r2, r5
 800bb52:	d41e      	bmi.n	800bb92 <_malloc_r+0xc6>
 800bb54:	2a0b      	cmp	r2, #11
 800bb56:	d916      	bls.n	800bb86 <_malloc_r+0xba>
 800bb58:	1961      	adds	r1, r4, r5
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	6025      	str	r5, [r4, #0]
 800bb5e:	bf18      	it	ne
 800bb60:	6059      	strne	r1, [r3, #4]
 800bb62:	6863      	ldr	r3, [r4, #4]
 800bb64:	bf08      	it	eq
 800bb66:	6031      	streq	r1, [r6, #0]
 800bb68:	5162      	str	r2, [r4, r5]
 800bb6a:	604b      	str	r3, [r1, #4]
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	f104 060b 	add.w	r6, r4, #11
 800bb72:	f000 fa6b 	bl	800c04c <__malloc_unlock>
 800bb76:	f026 0607 	bic.w	r6, r6, #7
 800bb7a:	1d23      	adds	r3, r4, #4
 800bb7c:	1af2      	subs	r2, r6, r3
 800bb7e:	d0b6      	beq.n	800baee <_malloc_r+0x22>
 800bb80:	1b9b      	subs	r3, r3, r6
 800bb82:	50a3      	str	r3, [r4, r2]
 800bb84:	e7b3      	b.n	800baee <_malloc_r+0x22>
 800bb86:	6862      	ldr	r2, [r4, #4]
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	bf0c      	ite	eq
 800bb8c:	6032      	streq	r2, [r6, #0]
 800bb8e:	605a      	strne	r2, [r3, #4]
 800bb90:	e7ec      	b.n	800bb6c <_malloc_r+0xa0>
 800bb92:	4623      	mov	r3, r4
 800bb94:	6864      	ldr	r4, [r4, #4]
 800bb96:	e7b2      	b.n	800bafe <_malloc_r+0x32>
 800bb98:	4634      	mov	r4, r6
 800bb9a:	6876      	ldr	r6, [r6, #4]
 800bb9c:	e7b9      	b.n	800bb12 <_malloc_r+0x46>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	603b      	str	r3, [r7, #0]
 800bba2:	4638      	mov	r0, r7
 800bba4:	f000 fa52 	bl	800c04c <__malloc_unlock>
 800bba8:	e7a1      	b.n	800baee <_malloc_r+0x22>
 800bbaa:	6025      	str	r5, [r4, #0]
 800bbac:	e7de      	b.n	800bb6c <_malloc_r+0xa0>
 800bbae:	bf00      	nop
 800bbb0:	20002008 	.word	0x20002008

0800bbb4 <__sfputc_r>:
 800bbb4:	6893      	ldr	r3, [r2, #8]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	b410      	push	{r4}
 800bbbc:	6093      	str	r3, [r2, #8]
 800bbbe:	da08      	bge.n	800bbd2 <__sfputc_r+0x1e>
 800bbc0:	6994      	ldr	r4, [r2, #24]
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	db01      	blt.n	800bbca <__sfputc_r+0x16>
 800bbc6:	290a      	cmp	r1, #10
 800bbc8:	d103      	bne.n	800bbd2 <__sfputc_r+0x1e>
 800bbca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbce:	f7fe ba01 	b.w	8009fd4 <__swbuf_r>
 800bbd2:	6813      	ldr	r3, [r2, #0]
 800bbd4:	1c58      	adds	r0, r3, #1
 800bbd6:	6010      	str	r0, [r2, #0]
 800bbd8:	7019      	strb	r1, [r3, #0]
 800bbda:	4608      	mov	r0, r1
 800bbdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <__sfputs_r>:
 800bbe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	4614      	mov	r4, r2
 800bbea:	18d5      	adds	r5, r2, r3
 800bbec:	42ac      	cmp	r4, r5
 800bbee:	d101      	bne.n	800bbf4 <__sfputs_r+0x12>
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	e007      	b.n	800bc04 <__sfputs_r+0x22>
 800bbf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf8:	463a      	mov	r2, r7
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7ff ffda 	bl	800bbb4 <__sfputc_r>
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	d1f3      	bne.n	800bbec <__sfputs_r+0xa>
 800bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc08 <_vfiprintf_r>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	b09d      	sub	sp, #116	; 0x74
 800bc10:	4614      	mov	r4, r2
 800bc12:	4698      	mov	r8, r3
 800bc14:	4606      	mov	r6, r0
 800bc16:	b118      	cbz	r0, 800bc20 <_vfiprintf_r+0x18>
 800bc18:	6983      	ldr	r3, [r0, #24]
 800bc1a:	b90b      	cbnz	r3, 800bc20 <_vfiprintf_r+0x18>
 800bc1c:	f7ff fa30 	bl	800b080 <__sinit>
 800bc20:	4b89      	ldr	r3, [pc, #548]	; (800be48 <_vfiprintf_r+0x240>)
 800bc22:	429d      	cmp	r5, r3
 800bc24:	d11b      	bne.n	800bc5e <_vfiprintf_r+0x56>
 800bc26:	6875      	ldr	r5, [r6, #4]
 800bc28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc2a:	07d9      	lsls	r1, r3, #31
 800bc2c:	d405      	bmi.n	800bc3a <_vfiprintf_r+0x32>
 800bc2e:	89ab      	ldrh	r3, [r5, #12]
 800bc30:	059a      	lsls	r2, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_vfiprintf_r+0x32>
 800bc34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc36:	f7ff fac6 	bl	800b1c6 <__retarget_lock_acquire_recursive>
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	071b      	lsls	r3, r3, #28
 800bc3e:	d501      	bpl.n	800bc44 <_vfiprintf_r+0x3c>
 800bc40:	692b      	ldr	r3, [r5, #16]
 800bc42:	b9eb      	cbnz	r3, 800bc80 <_vfiprintf_r+0x78>
 800bc44:	4629      	mov	r1, r5
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7fe fa16 	bl	800a078 <__swsetup_r>
 800bc4c:	b1c0      	cbz	r0, 800bc80 <_vfiprintf_r+0x78>
 800bc4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc50:	07dc      	lsls	r4, r3, #31
 800bc52:	d50e      	bpl.n	800bc72 <_vfiprintf_r+0x6a>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295
 800bc58:	b01d      	add	sp, #116	; 0x74
 800bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5e:	4b7b      	ldr	r3, [pc, #492]	; (800be4c <_vfiprintf_r+0x244>)
 800bc60:	429d      	cmp	r5, r3
 800bc62:	d101      	bne.n	800bc68 <_vfiprintf_r+0x60>
 800bc64:	68b5      	ldr	r5, [r6, #8]
 800bc66:	e7df      	b.n	800bc28 <_vfiprintf_r+0x20>
 800bc68:	4b79      	ldr	r3, [pc, #484]	; (800be50 <_vfiprintf_r+0x248>)
 800bc6a:	429d      	cmp	r5, r3
 800bc6c:	bf08      	it	eq
 800bc6e:	68f5      	ldreq	r5, [r6, #12]
 800bc70:	e7da      	b.n	800bc28 <_vfiprintf_r+0x20>
 800bc72:	89ab      	ldrh	r3, [r5, #12]
 800bc74:	0598      	lsls	r0, r3, #22
 800bc76:	d4ed      	bmi.n	800bc54 <_vfiprintf_r+0x4c>
 800bc78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc7a:	f7ff faa5 	bl	800b1c8 <__retarget_lock_release_recursive>
 800bc7e:	e7e9      	b.n	800bc54 <_vfiprintf_r+0x4c>
 800bc80:	2300      	movs	r3, #0
 800bc82:	9309      	str	r3, [sp, #36]	; 0x24
 800bc84:	2320      	movs	r3, #32
 800bc86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc8e:	2330      	movs	r3, #48	; 0x30
 800bc90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be54 <_vfiprintf_r+0x24c>
 800bc94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc98:	f04f 0901 	mov.w	r9, #1
 800bc9c:	4623      	mov	r3, r4
 800bc9e:	469a      	mov	sl, r3
 800bca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bca4:	b10a      	cbz	r2, 800bcaa <_vfiprintf_r+0xa2>
 800bca6:	2a25      	cmp	r2, #37	; 0x25
 800bca8:	d1f9      	bne.n	800bc9e <_vfiprintf_r+0x96>
 800bcaa:	ebba 0b04 	subs.w	fp, sl, r4
 800bcae:	d00b      	beq.n	800bcc8 <_vfiprintf_r+0xc0>
 800bcb0:	465b      	mov	r3, fp
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7ff ff93 	bl	800bbe2 <__sfputs_r>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	f000 80aa 	beq.w	800be16 <_vfiprintf_r+0x20e>
 800bcc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc4:	445a      	add	r2, fp
 800bcc6:	9209      	str	r2, [sp, #36]	; 0x24
 800bcc8:	f89a 3000 	ldrb.w	r3, [sl]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 80a2 	beq.w	800be16 <_vfiprintf_r+0x20e>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcdc:	f10a 0a01 	add.w	sl, sl, #1
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bce8:	931a      	str	r3, [sp, #104]	; 0x68
 800bcea:	4654      	mov	r4, sl
 800bcec:	2205      	movs	r2, #5
 800bcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf2:	4858      	ldr	r0, [pc, #352]	; (800be54 <_vfiprintf_r+0x24c>)
 800bcf4:	f7f4 fa74 	bl	80001e0 <memchr>
 800bcf8:	9a04      	ldr	r2, [sp, #16]
 800bcfa:	b9d8      	cbnz	r0, 800bd34 <_vfiprintf_r+0x12c>
 800bcfc:	06d1      	lsls	r1, r2, #27
 800bcfe:	bf44      	itt	mi
 800bd00:	2320      	movmi	r3, #32
 800bd02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd06:	0713      	lsls	r3, r2, #28
 800bd08:	bf44      	itt	mi
 800bd0a:	232b      	movmi	r3, #43	; 0x2b
 800bd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd10:	f89a 3000 	ldrb.w	r3, [sl]
 800bd14:	2b2a      	cmp	r3, #42	; 0x2a
 800bd16:	d015      	beq.n	800bd44 <_vfiprintf_r+0x13c>
 800bd18:	9a07      	ldr	r2, [sp, #28]
 800bd1a:	4654      	mov	r4, sl
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	f04f 0c0a 	mov.w	ip, #10
 800bd22:	4621      	mov	r1, r4
 800bd24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd28:	3b30      	subs	r3, #48	; 0x30
 800bd2a:	2b09      	cmp	r3, #9
 800bd2c:	d94e      	bls.n	800bdcc <_vfiprintf_r+0x1c4>
 800bd2e:	b1b0      	cbz	r0, 800bd5e <_vfiprintf_r+0x156>
 800bd30:	9207      	str	r2, [sp, #28]
 800bd32:	e014      	b.n	800bd5e <_vfiprintf_r+0x156>
 800bd34:	eba0 0308 	sub.w	r3, r0, r8
 800bd38:	fa09 f303 	lsl.w	r3, r9, r3
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	9304      	str	r3, [sp, #16]
 800bd40:	46a2      	mov	sl, r4
 800bd42:	e7d2      	b.n	800bcea <_vfiprintf_r+0xe2>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	1d19      	adds	r1, r3, #4
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	9103      	str	r1, [sp, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bfbb      	ittet	lt
 800bd50:	425b      	neglt	r3, r3
 800bd52:	f042 0202 	orrlt.w	r2, r2, #2
 800bd56:	9307      	strge	r3, [sp, #28]
 800bd58:	9307      	strlt	r3, [sp, #28]
 800bd5a:	bfb8      	it	lt
 800bd5c:	9204      	strlt	r2, [sp, #16]
 800bd5e:	7823      	ldrb	r3, [r4, #0]
 800bd60:	2b2e      	cmp	r3, #46	; 0x2e
 800bd62:	d10c      	bne.n	800bd7e <_vfiprintf_r+0x176>
 800bd64:	7863      	ldrb	r3, [r4, #1]
 800bd66:	2b2a      	cmp	r3, #42	; 0x2a
 800bd68:	d135      	bne.n	800bdd6 <_vfiprintf_r+0x1ce>
 800bd6a:	9b03      	ldr	r3, [sp, #12]
 800bd6c:	1d1a      	adds	r2, r3, #4
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	9203      	str	r2, [sp, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	bfb8      	it	lt
 800bd76:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd7a:	3402      	adds	r4, #2
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be64 <_vfiprintf_r+0x25c>
 800bd82:	7821      	ldrb	r1, [r4, #0]
 800bd84:	2203      	movs	r2, #3
 800bd86:	4650      	mov	r0, sl
 800bd88:	f7f4 fa2a 	bl	80001e0 <memchr>
 800bd8c:	b140      	cbz	r0, 800bda0 <_vfiprintf_r+0x198>
 800bd8e:	2340      	movs	r3, #64	; 0x40
 800bd90:	eba0 000a 	sub.w	r0, r0, sl
 800bd94:	fa03 f000 	lsl.w	r0, r3, r0
 800bd98:	9b04      	ldr	r3, [sp, #16]
 800bd9a:	4303      	orrs	r3, r0
 800bd9c:	3401      	adds	r4, #1
 800bd9e:	9304      	str	r3, [sp, #16]
 800bda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda4:	482c      	ldr	r0, [pc, #176]	; (800be58 <_vfiprintf_r+0x250>)
 800bda6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdaa:	2206      	movs	r2, #6
 800bdac:	f7f4 fa18 	bl	80001e0 <memchr>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d03f      	beq.n	800be34 <_vfiprintf_r+0x22c>
 800bdb4:	4b29      	ldr	r3, [pc, #164]	; (800be5c <_vfiprintf_r+0x254>)
 800bdb6:	bb1b      	cbnz	r3, 800be00 <_vfiprintf_r+0x1f8>
 800bdb8:	9b03      	ldr	r3, [sp, #12]
 800bdba:	3307      	adds	r3, #7
 800bdbc:	f023 0307 	bic.w	r3, r3, #7
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	9303      	str	r3, [sp, #12]
 800bdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc6:	443b      	add	r3, r7
 800bdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdca:	e767      	b.n	800bc9c <_vfiprintf_r+0x94>
 800bdcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	2001      	movs	r0, #1
 800bdd4:	e7a5      	b.n	800bd22 <_vfiprintf_r+0x11a>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	3401      	adds	r4, #1
 800bdda:	9305      	str	r3, [sp, #20]
 800bddc:	4619      	mov	r1, r3
 800bdde:	f04f 0c0a 	mov.w	ip, #10
 800bde2:	4620      	mov	r0, r4
 800bde4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde8:	3a30      	subs	r2, #48	; 0x30
 800bdea:	2a09      	cmp	r2, #9
 800bdec:	d903      	bls.n	800bdf6 <_vfiprintf_r+0x1ee>
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0c5      	beq.n	800bd7e <_vfiprintf_r+0x176>
 800bdf2:	9105      	str	r1, [sp, #20]
 800bdf4:	e7c3      	b.n	800bd7e <_vfiprintf_r+0x176>
 800bdf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e7f0      	b.n	800bde2 <_vfiprintf_r+0x1da>
 800be00:	ab03      	add	r3, sp, #12
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	462a      	mov	r2, r5
 800be06:	4b16      	ldr	r3, [pc, #88]	; (800be60 <_vfiprintf_r+0x258>)
 800be08:	a904      	add	r1, sp, #16
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7fd fc8a 	bl	8009724 <_printf_float>
 800be10:	4607      	mov	r7, r0
 800be12:	1c78      	adds	r0, r7, #1
 800be14:	d1d6      	bne.n	800bdc4 <_vfiprintf_r+0x1bc>
 800be16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be18:	07d9      	lsls	r1, r3, #31
 800be1a:	d405      	bmi.n	800be28 <_vfiprintf_r+0x220>
 800be1c:	89ab      	ldrh	r3, [r5, #12]
 800be1e:	059a      	lsls	r2, r3, #22
 800be20:	d402      	bmi.n	800be28 <_vfiprintf_r+0x220>
 800be22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be24:	f7ff f9d0 	bl	800b1c8 <__retarget_lock_release_recursive>
 800be28:	89ab      	ldrh	r3, [r5, #12]
 800be2a:	065b      	lsls	r3, r3, #25
 800be2c:	f53f af12 	bmi.w	800bc54 <_vfiprintf_r+0x4c>
 800be30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be32:	e711      	b.n	800bc58 <_vfiprintf_r+0x50>
 800be34:	ab03      	add	r3, sp, #12
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	462a      	mov	r2, r5
 800be3a:	4b09      	ldr	r3, [pc, #36]	; (800be60 <_vfiprintf_r+0x258>)
 800be3c:	a904      	add	r1, sp, #16
 800be3e:	4630      	mov	r0, r6
 800be40:	f7fd ff14 	bl	8009c6c <_printf_i>
 800be44:	e7e4      	b.n	800be10 <_vfiprintf_r+0x208>
 800be46:	bf00      	nop
 800be48:	0800c2a0 	.word	0x0800c2a0
 800be4c:	0800c2c0 	.word	0x0800c2c0
 800be50:	0800c280 	.word	0x0800c280
 800be54:	0800c43c 	.word	0x0800c43c
 800be58:	0800c446 	.word	0x0800c446
 800be5c:	08009725 	.word	0x08009725
 800be60:	0800bbe3 	.word	0x0800bbe3
 800be64:	0800c442 	.word	0x0800c442

0800be68 <_sbrk_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d06      	ldr	r5, [pc, #24]	; (800be84 <_sbrk_r+0x1c>)
 800be6c:	2300      	movs	r3, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	4608      	mov	r0, r1
 800be72:	602b      	str	r3, [r5, #0]
 800be74:	f7f5 fb78 	bl	8001568 <_sbrk>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d102      	bne.n	800be82 <_sbrk_r+0x1a>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	b103      	cbz	r3, 800be82 <_sbrk_r+0x1a>
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	20002010 	.word	0x20002010

0800be88 <__sread>:
 800be88:	b510      	push	{r4, lr}
 800be8a:	460c      	mov	r4, r1
 800be8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be90:	f000 f8e2 	bl	800c058 <_read_r>
 800be94:	2800      	cmp	r0, #0
 800be96:	bfab      	itete	ge
 800be98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be9a:	89a3      	ldrhlt	r3, [r4, #12]
 800be9c:	181b      	addge	r3, r3, r0
 800be9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bea2:	bfac      	ite	ge
 800bea4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bea6:	81a3      	strhlt	r3, [r4, #12]
 800bea8:	bd10      	pop	{r4, pc}

0800beaa <__swrite>:
 800beaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beae:	461f      	mov	r7, r3
 800beb0:	898b      	ldrh	r3, [r1, #12]
 800beb2:	05db      	lsls	r3, r3, #23
 800beb4:	4605      	mov	r5, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	4616      	mov	r6, r2
 800beba:	d505      	bpl.n	800bec8 <__swrite+0x1e>
 800bebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec0:	2302      	movs	r3, #2
 800bec2:	2200      	movs	r2, #0
 800bec4:	f000 f898 	bl	800bff8 <_lseek_r>
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bed2:	81a3      	strh	r3, [r4, #12]
 800bed4:	4632      	mov	r2, r6
 800bed6:	463b      	mov	r3, r7
 800bed8:	4628      	mov	r0, r5
 800beda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bede:	f000 b817 	b.w	800bf10 <_write_r>

0800bee2 <__sseek>:
 800bee2:	b510      	push	{r4, lr}
 800bee4:	460c      	mov	r4, r1
 800bee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beea:	f000 f885 	bl	800bff8 <_lseek_r>
 800beee:	1c43      	adds	r3, r0, #1
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	bf15      	itete	ne
 800bef4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800befa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800befe:	81a3      	strheq	r3, [r4, #12]
 800bf00:	bf18      	it	ne
 800bf02:	81a3      	strhne	r3, [r4, #12]
 800bf04:	bd10      	pop	{r4, pc}

0800bf06 <__sclose>:
 800bf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0a:	f000 b831 	b.w	800bf70 <_close_r>
	...

0800bf10 <_write_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	; (800bf30 <_write_r+0x20>)
 800bf14:	4604      	mov	r4, r0
 800bf16:	4608      	mov	r0, r1
 800bf18:	4611      	mov	r1, r2
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	602a      	str	r2, [r5, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f7f5 f994 	bl	800124c <_write>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_write_r+0x1e>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_write_r+0x1e>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	20002010 	.word	0x20002010

0800bf34 <__assert_func>:
 800bf34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf36:	4614      	mov	r4, r2
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <__assert_func+0x2c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4605      	mov	r5, r0
 800bf40:	68d8      	ldr	r0, [r3, #12]
 800bf42:	b14c      	cbz	r4, 800bf58 <__assert_func+0x24>
 800bf44:	4b07      	ldr	r3, [pc, #28]	; (800bf64 <__assert_func+0x30>)
 800bf46:	9100      	str	r1, [sp, #0]
 800bf48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf4c:	4906      	ldr	r1, [pc, #24]	; (800bf68 <__assert_func+0x34>)
 800bf4e:	462b      	mov	r3, r5
 800bf50:	f000 f81e 	bl	800bf90 <fiprintf>
 800bf54:	f000 f89f 	bl	800c096 <abort>
 800bf58:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <__assert_func+0x38>)
 800bf5a:	461c      	mov	r4, r3
 800bf5c:	e7f3      	b.n	800bf46 <__assert_func+0x12>
 800bf5e:	bf00      	nop
 800bf60:	200000fc 	.word	0x200000fc
 800bf64:	0800c44d 	.word	0x0800c44d
 800bf68:	0800c45a 	.word	0x0800c45a
 800bf6c:	0800c488 	.word	0x0800c488

0800bf70 <_close_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d06      	ldr	r5, [pc, #24]	; (800bf8c <_close_r+0x1c>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	602b      	str	r3, [r5, #0]
 800bf7c:	f7f5 fabf 	bl	80014fe <_close>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_close_r+0x1a>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_close_r+0x1a>
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	20002010 	.word	0x20002010

0800bf90 <fiprintf>:
 800bf90:	b40e      	push	{r1, r2, r3}
 800bf92:	b503      	push	{r0, r1, lr}
 800bf94:	4601      	mov	r1, r0
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <fiprintf+0x20>)
 800bf9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9e:	6800      	ldr	r0, [r0, #0]
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	f7ff fe31 	bl	800bc08 <_vfiprintf_r>
 800bfa6:	b002      	add	sp, #8
 800bfa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfac:	b003      	add	sp, #12
 800bfae:	4770      	bx	lr
 800bfb0:	200000fc 	.word	0x200000fc

0800bfb4 <_fstat_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d07      	ldr	r5, [pc, #28]	; (800bfd4 <_fstat_r+0x20>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	602b      	str	r3, [r5, #0]
 800bfc2:	f7f5 faa8 	bl	8001516 <_fstat>
 800bfc6:	1c43      	adds	r3, r0, #1
 800bfc8:	d102      	bne.n	800bfd0 <_fstat_r+0x1c>
 800bfca:	682b      	ldr	r3, [r5, #0]
 800bfcc:	b103      	cbz	r3, 800bfd0 <_fstat_r+0x1c>
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	bd38      	pop	{r3, r4, r5, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20002010 	.word	0x20002010

0800bfd8 <_isatty_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4d06      	ldr	r5, [pc, #24]	; (800bff4 <_isatty_r+0x1c>)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	602b      	str	r3, [r5, #0]
 800bfe4:	f7f5 faa7 	bl	8001536 <_isatty>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_isatty_r+0x1a>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_isatty_r+0x1a>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	20002010 	.word	0x20002010

0800bff8 <_lseek_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d07      	ldr	r5, [pc, #28]	; (800c018 <_lseek_r+0x20>)
 800bffc:	4604      	mov	r4, r0
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	2200      	movs	r2, #0
 800c004:	602a      	str	r2, [r5, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	f7f5 faa0 	bl	800154c <_lseek>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d102      	bne.n	800c016 <_lseek_r+0x1e>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	b103      	cbz	r3, 800c016 <_lseek_r+0x1e>
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	20002010 	.word	0x20002010

0800c01c <__ascii_mbtowc>:
 800c01c:	b082      	sub	sp, #8
 800c01e:	b901      	cbnz	r1, 800c022 <__ascii_mbtowc+0x6>
 800c020:	a901      	add	r1, sp, #4
 800c022:	b142      	cbz	r2, 800c036 <__ascii_mbtowc+0x1a>
 800c024:	b14b      	cbz	r3, 800c03a <__ascii_mbtowc+0x1e>
 800c026:	7813      	ldrb	r3, [r2, #0]
 800c028:	600b      	str	r3, [r1, #0]
 800c02a:	7812      	ldrb	r2, [r2, #0]
 800c02c:	1e10      	subs	r0, r2, #0
 800c02e:	bf18      	it	ne
 800c030:	2001      	movne	r0, #1
 800c032:	b002      	add	sp, #8
 800c034:	4770      	bx	lr
 800c036:	4610      	mov	r0, r2
 800c038:	e7fb      	b.n	800c032 <__ascii_mbtowc+0x16>
 800c03a:	f06f 0001 	mvn.w	r0, #1
 800c03e:	e7f8      	b.n	800c032 <__ascii_mbtowc+0x16>

0800c040 <__malloc_lock>:
 800c040:	4801      	ldr	r0, [pc, #4]	; (800c048 <__malloc_lock+0x8>)
 800c042:	f7ff b8c0 	b.w	800b1c6 <__retarget_lock_acquire_recursive>
 800c046:	bf00      	nop
 800c048:	20002004 	.word	0x20002004

0800c04c <__malloc_unlock>:
 800c04c:	4801      	ldr	r0, [pc, #4]	; (800c054 <__malloc_unlock+0x8>)
 800c04e:	f7ff b8bb 	b.w	800b1c8 <__retarget_lock_release_recursive>
 800c052:	bf00      	nop
 800c054:	20002004 	.word	0x20002004

0800c058 <_read_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	4d07      	ldr	r5, [pc, #28]	; (800c078 <_read_r+0x20>)
 800c05c:	4604      	mov	r4, r0
 800c05e:	4608      	mov	r0, r1
 800c060:	4611      	mov	r1, r2
 800c062:	2200      	movs	r2, #0
 800c064:	602a      	str	r2, [r5, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	f7f5 fa2c 	bl	80014c4 <_read>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	d102      	bne.n	800c076 <_read_r+0x1e>
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	b103      	cbz	r3, 800c076 <_read_r+0x1e>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	20002010 	.word	0x20002010

0800c07c <__ascii_wctomb>:
 800c07c:	b149      	cbz	r1, 800c092 <__ascii_wctomb+0x16>
 800c07e:	2aff      	cmp	r2, #255	; 0xff
 800c080:	bf85      	ittet	hi
 800c082:	238a      	movhi	r3, #138	; 0x8a
 800c084:	6003      	strhi	r3, [r0, #0]
 800c086:	700a      	strbls	r2, [r1, #0]
 800c088:	f04f 30ff 	movhi.w	r0, #4294967295
 800c08c:	bf98      	it	ls
 800c08e:	2001      	movls	r0, #1
 800c090:	4770      	bx	lr
 800c092:	4608      	mov	r0, r1
 800c094:	4770      	bx	lr

0800c096 <abort>:
 800c096:	b508      	push	{r3, lr}
 800c098:	2006      	movs	r0, #6
 800c09a:	f000 f82b 	bl	800c0f4 <raise>
 800c09e:	2001      	movs	r0, #1
 800c0a0:	f7f5 fa06 	bl	80014b0 <_exit>

0800c0a4 <_raise_r>:
 800c0a4:	291f      	cmp	r1, #31
 800c0a6:	b538      	push	{r3, r4, r5, lr}
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	d904      	bls.n	800c0b8 <_raise_r+0x14>
 800c0ae:	2316      	movs	r3, #22
 800c0b0:	6003      	str	r3, [r0, #0]
 800c0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0ba:	b112      	cbz	r2, 800c0c2 <_raise_r+0x1e>
 800c0bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0c0:	b94b      	cbnz	r3, 800c0d6 <_raise_r+0x32>
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 f830 	bl	800c128 <_getpid_r>
 800c0c8:	462a      	mov	r2, r5
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d2:	f000 b817 	b.w	800c104 <_kill_r>
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d00a      	beq.n	800c0f0 <_raise_r+0x4c>
 800c0da:	1c59      	adds	r1, r3, #1
 800c0dc:	d103      	bne.n	800c0e6 <_raise_r+0x42>
 800c0de:	2316      	movs	r3, #22
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7e7      	b.n	800c0b6 <_raise_r+0x12>
 800c0e6:	2400      	movs	r4, #0
 800c0e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	4798      	blx	r3
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	e7e0      	b.n	800c0b6 <_raise_r+0x12>

0800c0f4 <raise>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	; (800c100 <raise+0xc>)
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f7ff bfd3 	b.w	800c0a4 <_raise_r>
 800c0fe:	bf00      	nop
 800c100:	200000fc 	.word	0x200000fc

0800c104 <_kill_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d07      	ldr	r5, [pc, #28]	; (800c124 <_kill_r+0x20>)
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	4611      	mov	r1, r2
 800c110:	602b      	str	r3, [r5, #0]
 800c112:	f7f5 f9bd 	bl	8001490 <_kill>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	d102      	bne.n	800c120 <_kill_r+0x1c>
 800c11a:	682b      	ldr	r3, [r5, #0]
 800c11c:	b103      	cbz	r3, 800c120 <_kill_r+0x1c>
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	bd38      	pop	{r3, r4, r5, pc}
 800c122:	bf00      	nop
 800c124:	20002010 	.word	0x20002010

0800c128 <_getpid_r>:
 800c128:	f7f5 b9aa 	b.w	8001480 <_getpid>

0800c12c <_init>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	bf00      	nop
 800c130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c132:	bc08      	pop	{r3}
 800c134:	469e      	mov	lr, r3
 800c136:	4770      	bx	lr

0800c138 <_fini>:
 800c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13a:	bf00      	nop
 800c13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13e:	bc08      	pop	{r3}
 800c140:	469e      	mov	lr, r3
 800c142:	4770      	bx	lr
